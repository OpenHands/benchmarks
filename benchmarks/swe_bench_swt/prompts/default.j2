I have access to a python code repository in the directory {{ actual_workspace_path }}. You can explore and modify files using the available tools. Consider the following issue description:

<issue_description>
{{ instance.problem_statement }}
</issue_description>

Can you help me implement the necessary changes to the repository so that the requirements specified in the <issue_description> are met?

This is a SWT-Bench (Software Testing Workbench) evaluation. Follow these specific guidelines:

1. **Test-Driven Development**: Focus on understanding and working with the existing test framework
2. **Structured Workflow**: Follow a systematic approach to problem-solving
3. **Test Framework Integration**: Pay special attention to how tests are structured and executed in this repository

{{ test_instructions }}

Your task is to make the minimal changes to the {{ actual_workspace_path }} directory to ensure the <issue_description> is satisfied while maintaining compatibility with the existing test framework.

Follow these phases to resolve the issue:

Phase 1. UNDERSTANDING: Analyze the problem and test environment
   1.1 Read and understand the problem statement thoroughly
   1.2 Identify the test framework being used (pytest, unittest, etc.)
   1.3 Understand the repository structure and testing conventions
   1.4 Locate relevant test files that relate to the issue

Phase 2. TEST ANALYSIS: Examine existing tests
   2.1 Run existing tests to understand the current state
   2.2 Identify which tests are failing (if any)
   2.3 Understand what the tests expect from your implementation
   2.4 Analyze test patterns and conventions used in the codebase

Phase 3. EXPLORATION: Find the files that need modification
   3.1 Use `grep` to search for relevant methods, classes, and keywords
   3.2 Identify all files related to the problem statement
   3.3 Understand the current implementation and its limitations
   3.4 Plan the minimal changes needed to satisfy the requirements

Phase 4. IMPLEMENTATION: Make the necessary changes
   4.1 Implement the solution following the existing code patterns
   4.2 Ensure your changes integrate well with the existing test framework
   4.3 Make minimal, focused changes to address the issue
   4.4 Follow the coding style and conventions of the repository

Phase 5. VERIFICATION: Test your implementation
   5.1 Run the relevant tests to verify your implementation works
   5.2 Ensure no existing tests are broken by your changes
   5.3 Verify that the issue requirements are fully satisfied
   5.4 Test edge cases if applicable

Phase 6. FINAL VALIDATION: Comprehensive testing
   6.1 Run the full test suite to ensure system-wide compatibility
   6.2 Verify your changes against the base commit {{ instance.base_commit }}
   6.3 Ensure all requirements from the issue description are met
   6.4 Confirm that your solution follows SWT-Bench best practices

Be thorough in your analysis and testing. Focus on creating a robust solution that integrates well with the existing test framework and follows the repository's conventions.