<uploaded_files>
{{ actual_workspace_path }}
</uploaded_files>
I've uploaded a Typescript code repository in the directory {{ actual_workspace_path }}. Consider the following issue description:

<issue_description>
{{ instance.problem_statement }}
</issue_description>

Can you help me implement the necessary changes to the repository so that the requirements specified in the <issue_description> are met?
I've already taken care of all changes to any of the test files described in the <issue_description>. This means you DON'T have to modify the testing logic or any of the tests in any way!
Also the development Typescript environment is already set up for you (i.e., all dependencies already installed), so you don't need to install other packages.
Your task is to make the minimal changes to non-test files in the {{ actual_workspace_path }} directory to ensure the <issue_description> is satisfied.
Follow these steps to resolve the issue:
1. As a first step, it might be a good idea to explore the repo to familiarize yourself with its structure.
2. Create a script to reproduce the error and execute it with `ts-node <filename.ts>` using the BashTool, to confirm the error.
3. Edit the sourcecode of the repo to resolve the issue.
4. Rerun your reproduce script and confirm that the error is fixed!
5. Think about edgecases, add comprehensive tests for them in your reproduce script, and run them to make sure your fix handles them as well.
6. Once you are done with the initial implementation, please carefully re-read the problem description and check the difference between the current code and the base commit {{ instance.base_commit }}. Do you think that the issue has been completely and comprehensively solved? Write tests to check the correctness of the solution, specifically focusing on tests that may point out any remaining problems that are not yet solved. Run all of the tests in the repo and check if any of them fail, and if they do fix the code. Repeat this process of carefully reading the problem description and current implementation, testing, and fixing any problems until you are confident that the current implementation is correct. Find and run any tests in the repo that are related to:
   - The issue you are fixing
   - The files you modified
   - The functions you changed
   Make sure all these tests pass with your changes.
Your thinking should be thorough and so it's fine if it's very long.