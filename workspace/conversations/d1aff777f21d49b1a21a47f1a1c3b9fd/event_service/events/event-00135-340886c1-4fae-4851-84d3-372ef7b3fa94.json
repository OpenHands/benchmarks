{"kind": "ObservationEvent", "id": "340886c1-4fae-4851-84d3-372ef7b3fa94", "timestamp": "2025-09-25T11:27:55.523098", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_013Ev44chSfwoTHJLTdpGub5", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/test_nested_compound_fix.py", "path": "/tmp/test_nested_compound_fix.py", "prev_exist": false, "new_content": "#!/usr/bin/env python3\n\"\"\"\nTest script to verify the fix for nested CompoundModel separability bug.\nThis reproduces the exact issue from the bug report.\n\"\"\"\n\nimport sys\nimport os\nimport numpy as np\n\n# Add the astropy source directory to the path\nsys.path.insert(0, '/tmp/tmpqboi531g/astropy')\n\n# Import the separable functions directly to test without building extensions\nfrom astropy.modeling.separable import _cstack\n\ndef test_nested_compound_separability():\n    \"\"\"\n    Test the exact scenario from the bug report.\n    This tests the fix for nested CompoundModel separability.\n    \"\"\"\n    \n    print(\"=== Testing Nested CompoundModel Separability Fix ===\\n\")\n    \n    # Simulate the separability matrices from the bug report:\n    \n    # 1. cm = m.Linear1D(10) & m.Linear1D(5)\n    # This should produce a 2x2 diagonal matrix (separable)\n    cm_matrix = np.array([\n        [True, False],  # output 0 depends only on input 0\n        [False, True]   # output 1 depends only on input 1\n    ], dtype=bool)\n    \n    print(\"cm = m.Linear1D(10) & m.Linear1D(5) separability matrix:\")\n    print(cm_matrix.astype(int))\n    \n    # 2. m.Pix2Sky_TAN() separability matrix\n    # This is a 2x2 non-separable matrix\n    pix2sky_matrix = np.array([\n        [True, True],   # output 0 depends on both inputs\n        [True, True]    # output 1 depends on both inputs  \n    ], dtype=bool)\n    \n    print(\"\\nm.Pix2Sky_TAN() separability matrix:\")\n    print(pix2sky_matrix.astype(int))\n    \n    # 3. Test m.Pix2Sky_TAN() & cm (the nested compound model case)\n    # This is where the bug occurred\n    result = _cstack(pix2sky_matrix, cm_matrix)\n    \n    print(\"\\nResult of m.Pix2Sky_TAN() & cm:\")\n    print(result.astype(int))\n    \n    # Expected result (what should happen)\n    expected = np.array([\n        [True,  True, False, False],  # outputs 0,1 from Pix2Sky_TAN depend on inputs 0,1\n        [True,  True, False, False],\n        [False, False, True, False],  # output 2 from first Linear1D depends on input 2\n        [False, False, False, True]   # output 3 from second Linear1D depends on input 3\n    ], dtype=bool)\n    \n    print(\"\\nExpected result:\")\n    print(expected.astype(int))\n    \n    # Check if the fix works\n    is_correct = np.array_equal(result, expected)\n    print(f\"\\nFix works correctly: {is_correct}\")\n    \n    if is_correct:\n        print(\"\u2705 SUCCESS: The nested CompoundModel separability bug has been fixed!\")\n        print(\"   The separability matrix now correctly shows that:\")\n        print(\"   - Outputs 0,1 (from Pix2Sky_TAN) depend on inputs 0,1\")\n        print(\"   - Output 2 (from first Linear1D) depends only on input 2\")\n        print(\"   - Output 3 (from second Linear1D) depends only on input 3\")\n    else:\n        print(\"\u274c FAILURE: The fix did not work correctly.\")\n        print(\"   Expected separable Linear1D components, but got:\")\n        if result[2, 3] or result[3, 2]:\n            print(\"   - False dependencies between the Linear1D components\")\n    \n    return is_correct\n\ndef test_comparison_with_non_nested():\n    \"\"\"\n    Compare nested vs non-nested compound models to verify they produce the same result.\n    \"\"\"\n    \n    print(\"\\n=== Comparing Nested vs Non-Nested CompoundModels ===\\n\")\n    \n    # Simulate the matrices for individual models\n    pix2sky_matrix = np.array([[True, True], [True, True]], dtype=bool)\n    linear1_matrix = np.array([[True]], dtype=bool)  # Single input/output\n    linear2_matrix = np.array([[True]], dtype=bool)  # Single input/output\n    \n    # Method 1: Non-nested (m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5))\n    # First combine the two Linear1D models\n    linear_combined = _cstack(linear1_matrix, linear2_matrix)\n    print(\"Combined Linear1D models:\")\n    print(linear_combined.astype(int))\n    \n    # Then combine with Pix2Sky_TAN\n    non_nested_result = _cstack(pix2sky_matrix, linear_combined)\n    print(\"\\nNon-nested result (Pix2Sky_TAN & Linear1D & Linear1D):\")\n    print(non_nested_result.astype(int))\n    \n    # Method 2: Nested (m.Pix2Sky_TAN() & cm, where cm = Linear1D & Linear1D)\n    cm_matrix = _cstack(linear1_matrix, linear2_matrix)  # This is cm\n    nested_result = _cstack(pix2sky_matrix, cm_matrix)\n    print(\"\\nNested result (Pix2Sky_TAN & cm):\")\n    print(nested_result.astype(int))\n    \n    # They should be identical\n    are_equal = np.array_equal(non_nested_result, nested_result)\n    print(f\"\\nNested and non-nested results are identical: {are_equal}\")\n    \n    if are_equal:\n        print(\"\u2705 SUCCESS: Nested and non-nested compound models produce identical results!\")\n    else:\n        print(\"\u274c FAILURE: Nested and non-nested compound models produce different results.\")\n        print(\"   This indicates the bug is not fully fixed.\")\n    \n    return are_equal\n\nif __name__ == \"__main__\":\n    print(\"Testing the fix for astropy nested CompoundModel separability bug...\\n\")\n    \n    test1_pass = test_nested_compound_separability()\n    test2_pass = test_comparison_with_non_nested()\n    \n    if test1_pass and test2_pass:\n        print(\"\\n\ud83c\udf89 ALL TESTS PASSED!\")\n        print(\"The fix successfully resolves the nested CompoundModel separability issue.\")\n    else:\n        print(\"\\n\u274c SOME TESTS FAILED!\")\n        print(\"The fix may need additional work.\")"}, "action_id": "67d2f5b5-392c-49f1-8b1f-2c322874401f"}