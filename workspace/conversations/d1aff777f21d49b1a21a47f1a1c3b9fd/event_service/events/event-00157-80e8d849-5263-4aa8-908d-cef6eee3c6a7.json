{"kind": "ObservationEvent", "id": "80e8d849-5263-4aa8-908d-cef6eee3c6a7", "timestamp": "2025-09-25T11:30:01.047464", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_016KCb2qAdTQEuLv2xGwHZGc", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/final_comprehensive_test.py", "path": "/tmp/final_comprehensive_test.py", "prev_exist": false, "new_content": "#!/usr/bin/env python3\n\"\"\"\nFinal comprehensive test demonstrating the fix for the separability matrix bug.\nThis reproduces the exact examples from the issue description.\n\"\"\"\n\nimport numpy as np\n\ndef _compute_n_outputs(left, right):\n    \"\"\"Helper to compute total outputs.\"\"\"\n    return left.shape[0] + right.shape[0]\n\ndef _cstack_fixed(left, right):\n    \"\"\"Fixed version of _cstack function.\"\"\"\n    noutp = _compute_n_outputs(left, right)\n    \n    # Left side\n    cleft = np.zeros((noutp, left.shape[1]))\n    cleft[:left.shape[0], :left.shape[1]] = left\n    \n    # Right side (FIXED)\n    cright = np.zeros((noutp, right.shape[1]))\n    cright[-right.shape[0]:, -right.shape[1]:] = right  # FIXED: use 'right' not 1\n    \n    return np.hstack([cleft, cright])\n\ndef test_issue_examples():\n    \"\"\"Test the exact examples from the GitHub issue.\"\"\"\n    \n    print(\"=== Testing Examples from GitHub Issue ===\\n\")\n    \n    # Example 1: cm = m.Linear1D(10) & m.Linear1D(5)\n    print(\"1. Testing: cm = m.Linear1D(10) & m.Linear1D(5)\")\n    \n    # Simulate two separable Linear1D models\n    linear1d_1 = np.array([[True]], dtype=bool)  # 1 input, 1 output\n    linear1d_2 = np.array([[True]], dtype=bool)  # 1 input, 1 output\n    \n    cm = _cstack_fixed(linear1d_1, linear1d_2)\n    print(\"Result:\")\n    print(cm.astype(int))\n    \n    expected_cm = np.array([\n        [True, False],\n        [False, True]\n    ], dtype=bool)\n    \n    print(\"Expected (diagonal):\")\n    print(expected_cm.astype(int))\n    print(f\"\u2713 Correct: {np.array_equal(cm, expected_cm)}\")\n    \n    # Example 2: m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\n    print(\"\\n2. Testing: m.Pix2Sky_TAN() & m.Linear1D(10) & m.Linear1D(5)\")\n    \n    # Simulate Pix2Sky_TAN (2 inputs, 2 outputs, non-separable)\n    pix2sky = np.array([\n        [True, True],\n        [True, True]\n    ], dtype=bool)\n    \n    # First combine the Linear1D models\n    linear_combined = _cstack_fixed(linear1d_1, linear1d_2)\n    \n    # Then combine with Pix2Sky_TAN\n    result_non_nested = _cstack_fixed(pix2sky, linear_combined)\n    print(\"Result:\")\n    print(result_non_nested.astype(int))\n    \n    expected_non_nested = np.array([\n        [True,  True, False, False],\n        [True,  True, False, False],\n        [False, False, True, False],\n        [False, False, False, True]\n    ], dtype=bool)\n    \n    print(\"Expected:\")\n    print(expected_non_nested.astype(int))\n    print(f\"\u2713 Correct: {np.array_equal(result_non_nested, expected_non_nested)}\")\n    \n    # Example 3: m.Pix2Sky_TAN() & cm (the problematic nested case)\n    print(\"\\n3. Testing: m.Pix2Sky_TAN() & cm (nested compound model)\")\n    \n    # This is where the bug occurred - cm is already a processed compound model\n    result_nested = _cstack_fixed(pix2sky, cm)\n    print(\"Result with fix:\")\n    print(result_nested.astype(int))\n    \n    print(\"Expected (same as non-nested):\")\n    print(expected_non_nested.astype(int))\n    \n    nested_correct = np.array_equal(result_nested, expected_non_nested)\n    print(f\"\u2713 Nested matches non-nested: {nested_correct}\")\n    \n    if nested_correct:\n        print(\"\\n\ud83c\udf89 SUCCESS: The bug is fixed!\")\n        print(\"   Nested compound models now produce the same result as non-nested ones.\")\n        print(\"   The separability of Linear1D components is preserved.\")\n    else:\n        print(\"\\n\u274c FAILURE: The bug is not fixed.\")\n        \n    return nested_correct\n\ndef demonstrate_bug_vs_fix():\n    \"\"\"Show the difference between buggy and fixed behavior.\"\"\"\n    \n    print(\"\\n=== Bug vs Fix Comparison ===\\n\")\n    \n    def _cstack_buggy(left, right):\n        \"\"\"Original buggy version.\"\"\"\n        noutp = _compute_n_outputs(left, right)\n        cleft = np.zeros((noutp, left.shape[1]))\n        cleft[:left.shape[0], :left.shape[1]] = left\n        cright = np.zeros((noutp, right.shape[1]))\n        cright[-right.shape[0]:, -right.shape[1]:] = 1  # BUG: hardcoded 1\n        return np.hstack([cleft, cright])\n    \n    # Test data\n    pix2sky = np.array([[True, True], [True, True]], dtype=bool)\n    cm = np.array([[True, False], [False, True]], dtype=bool)\n    \n    print(\"Input: Pix2Sky_TAN & cm\")\n    print(\"Pix2Sky_TAN matrix:\")\n    print(pix2sky.astype(int))\n    print(\"cm matrix (Linear1D & Linear1D):\")\n    print(cm.astype(int))\n    \n    # Buggy result\n    buggy = _cstack_buggy(pix2sky, cm)\n    print(\"\\nBuggy result (original code):\")\n    print(buggy.astype(int))\n    print(\"\u274c Shows false dependencies: outputs 2,3 both depend on inputs 2,3\")\n    \n    # Fixed result\n    fixed = _cstack_fixed(pix2sky, cm)\n    print(\"\\nFixed result (with our fix):\")\n    print(fixed.astype(int))\n    print(\"\u2705 Correct dependencies: output 2\u2192input 2, output 3\u2192input 3\")\n    \n    print(f\"\\nResults are different: {not np.array_equal(buggy, fixed)}\")\n    print(\"The fix resolves the false dependency issue!\")\n\nif __name__ == \"__main__\":\n    print(\"Comprehensive test of the separability matrix fix\")\n    print(\"=\" * 50)\n    \n    success = test_issue_examples()\n    demonstrate_bug_vs_fix()\n    \n    if success:\n        print(\"\\n\" + \"=\" * 50)\n        print(\"\ud83c\udf89 FINAL RESULT: All tests passed!\")\n        print(\"The separability matrix bug for nested CompoundModels is FIXED!\")\n        print(\"\\nSummary of the fix:\")\n        print(\"- File: astropy/modeling/separable.py\")\n        print(\"- Line: 245\")\n        print(\"- Change: cright[...] = 1  \u2192  cright[...] = right\")\n        print(\"- Impact: Nested compound models now preserve separability correctly\")\n    else:\n        print(\"\\n\u274c Some tests failed - the fix needs more work.\")"}, "action_id": "553dc5b9-4b01-4349-897b-f1b45bbeaaac"}