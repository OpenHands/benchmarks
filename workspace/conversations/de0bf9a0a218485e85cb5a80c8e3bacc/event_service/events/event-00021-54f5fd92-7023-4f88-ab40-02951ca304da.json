{"kind": "ObservationEvent", "id": "54f5fd92-7023-4f88-ab40-02951ca304da", "timestamp": "2025-09-25T11:20:23.205865", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01AeHDw9uEATfGKCBAu9ztJj", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmplnydgmuv/astropy/astropy/io/ascii/html.py:\n     1\t# Licensed under a 3-clause BSD style license - see LICENSE.rst\n     2\t\"\"\"An extensible HTML table reader and writer.\n     3\t\n     4\thtml.py:\n     5\t  Classes to read and write HTML tables\n     6\t\n     7\t`BeautifulSoup <http://www.crummy.com/software/BeautifulSoup/>`_\n     8\tmust be installed to read HTML tables.\n     9\t\"\"\"\n    10\t\n    11\timport warnings\n    12\t\n    13\tfrom . import core\n    14\tfrom astropy.table import Column\n    15\tfrom astropy.utils.xml import writer\n    16\t\n    17\tfrom copy import deepcopy\n    18\t\n    19\t\n    20\tclass SoupString(str):\n    21\t    \"\"\"\n    22\t    Allows for strings to hold BeautifulSoup data.\n    23\t    \"\"\"\n    24\t\n    25\t    def __new__(cls, *args, **kwargs):\n    26\t        return str.__new__(cls, *args, **kwargs)\n    27\t\n    28\t    def __init__(self, val):\n    29\t        self.soup = val\n    30\t\n    31\t\n    32\tclass ListWriter:\n    33\t    \"\"\"\n    34\t    Allows for XMLWriter to write to a list instead of a file.\n    35\t    \"\"\"\n    36\t\n    37\t    def __init__(self, out):\n    38\t        self.out = out\n    39\t\n    40\t    def write(self, data):\n    41\t        self.out.append(data)\n    42\t\n    43\t\n    44\tdef identify_table(soup, htmldict, numtable):\n    45\t    \"\"\"\n    46\t    Checks whether the given BeautifulSoup tag is the table\n    47\t    the user intends to process.\n    48\t    \"\"\"\n    49\t\n    50\t    if soup is None or soup.name != 'table':\n    51\t        return False  # Tag is not a <table>\n    52\t\n    53\t    elif 'table_id' not in htmldict:\n    54\t        return numtable == 1\n    55\t    table_id = htmldict['table_id']\n    56\t\n    57\t    if isinstance(table_id, str):\n    58\t        return 'id' in soup.attrs and soup['id'] == table_id\n    59\t    elif isinstance(table_id, int):\n    60\t        return table_id == numtable\n    61\t\n    62\t    # Return False if an invalid parameter is given\n    63\t    return False\n    64\t\n    65\t\n    66\tclass HTMLInputter(core.BaseInputter):\n    67\t    \"\"\"\n    68\t    Input lines of HTML in a valid form.\n    69\t\n    70\t    This requires `BeautifulSoup\n    71\t    <http://www.crummy.com/software/BeautifulSoup/>`_ to be installed.\n    72\t    \"\"\"\n    73\t\n    74\t    def process_lines(self, lines):\n    75\t        \"\"\"\n    76\t        Convert the given input into a list of SoupString rows\n    77\t        for further processing.\n    78\t        \"\"\"\n    79\t\n    80\t        try:\n    81\t            from bs4 import BeautifulSoup\n    82\t        except ImportError:\n    83\t            raise core.OptionalTableImportError('BeautifulSoup must be '\n    84\t                                                'installed to read HTML tables')\n    85\t\n    86\t        if 'parser' not in self.html:\n    87\t            with warnings.catch_warnings():\n    88\t                # Ignore bs4 parser warning #4550.\n    89\t                warnings.filterwarnings('ignore', '.*no parser was explicitly specified.*')\n    90\t                soup = BeautifulSoup('\\n'.join(lines))\n    91\t        else:  # use a custom backend parser\n    92\t            soup = BeautifulSoup('\\n'.join(lines), self.html['parser'])\n    93\t        tables = soup.find_all('table')\n    94\t        for i, possible_table in enumerate(tables):\n    95\t            if identify_table(possible_table, self.html, i + 1):\n    96\t                table = possible_table  # Find the correct table\n    97\t                break\n    98\t        else:\n    99\t            if isinstance(self.html['table_id'], int):\n   100\t                err_descr = f\"number {self.html['table_id']}\"\n   101\t            else:\n   102\t                err_descr = f\"id '{self.html['table_id']}'\"\n   103\t            raise core.InconsistentTableError(\n   104\t                f'ERROR: HTML table {err_descr} not found')\n   105\t\n   106\t        # Get all table rows\n   107\t        soup_list = [SoupString(x) for x in table.find_all('tr')]\n   108\t\n   109\t        return soup_list\n   110\t\n   111\t\n   112\tclass HTMLSplitter(core.BaseSplitter):\n   113\t    \"\"\"\n   114\t    Split HTML table data.\n   115\t    \"\"\"\n   116\t\n   117\t    def __call__(self, lines):\n   118\t        \"\"\"\n   119\t        Return HTML data from lines as a generator.\n   120\t        \"\"\"\n   121\t        for line in lines:\n   122\t            if not isinstance(line, SoupString):\n   123\t                raise TypeError('HTML lines should be of type SoupString')\n   124\t            soup = line.soup\n   125\t            header_elements = soup.find_all('th')\n   126\t            if header_elements:\n   127\t                # Return multicolumns as tuples for HTMLHeader handling\n   128\t                yield [(el.text.strip(), el['colspan']) if el.has_attr('colspan')\n   129\t                       else el.text.strip() for el in header_elements]\n   130\t            data_elements = soup.find_all('td')\n   131\t            if data_elements:\n   132\t                yield [el.text.strip() for el in data_elements]\n   133\t        if len(lines) == 0:\n   134\t            raise core.InconsistentTableError('HTML tables must contain data '\n   135\t                                              'in a <table> tag')\n   136\t\n   137\t\n   138\tclass HTMLOutputter(core.TableOutputter):\n   139\t    \"\"\"\n   140\t    Output the HTML data as an ``astropy.table.Table`` object.\n   141\t\n   142\t    This subclass allows for the final table to contain\n   143\t    multidimensional columns (defined using the colspan attribute\n   144\t    of <th>).\n   145\t    \"\"\"\n   146\t\n   147\t    default_converters = [core.convert_numpy(int),\n   148\t                          core.convert_numpy(float),\n   149\t                          core.convert_numpy(str)]\n   150\t\n   151\t    def __call__(self, cols, meta):\n   152\t        \"\"\"\n   153\t        Process the data in multidimensional columns.\n   154\t        \"\"\"\n   155\t        new_cols = []\n   156\t        col_num = 0\n   157\t\n   158\t        while col_num < len(cols):\n   159\t            col = cols[col_num]\n   160\t            if hasattr(col, 'colspan'):\n   161\t                # Join elements of spanned columns together into list of tuples\n   162\t                span_cols = cols[col_num:col_num + col.colspan]\n   163\t                new_col = core.Column(col.name)\n   164\t                new_col.str_vals = list(zip(*[x.str_vals for x in span_cols]))\n   165\t                new_cols.append(new_col)\n   166\t                col_num += col.colspan\n   167\t            else:\n   168\t                new_cols.append(col)\n   169\t                col_num += 1\n   170\t\n   171\t        return super().__call__(new_cols, meta)\n   172\t\n   173\t\n   174\tclass HTMLHeader(core.BaseHeader):\n   175\t    splitter_class = HTMLSplitter\n   176\t\n   177\t    def start_line(self, lines):\n   178\t        \"\"\"\n   179\t        Return the line number at which header data begins.\n   180\t        \"\"\"\n   181\t\n   182\t        for i, line in enumerate(lines):\n   183\t            if not isinstance(line, SoupString):\n   184\t                raise TypeError('HTML lines should be of type SoupString')\n   185\t            soup = line.soup\n   186\t            if soup.th is not None:\n   187\t                return i\n   188\t\n   189\t        return None\n   190\t\n   191\t    def _set_cols_from_names(self):\n   192\t        \"\"\"\n   193\t        Set columns from header names, handling multicolumns appropriately.\n   194\t        \"\"\"\n   195\t        self.cols = []\n   196\t        new_names = []\n   197\t\n   198\t        for name in self.names:\n   199\t            if isinstance(name, tuple):\n   200\t                col = core.Column(name=name[0])\n   201\t                col.colspan = int(name[1])\n   202\t                self.cols.append(col)\n   203\t                new_names.append(name[0])\n   204\t                for i in range(1, int(name[1])):\n   205\t                    # Add dummy columns\n   206\t                    self.cols.append(core.Column(''))\n   207\t                    new_names.append('')\n   208\t            else:\n   209\t                self.cols.append(core.Column(name=name))\n   210\t                new_names.append(name)\n   211\t\n   212\t        self.names = new_names\n   213\t\n   214\t\n   215\tclass HTMLData(core.BaseData):\n   216\t    splitter_class = HTMLSplitter\n   217\t\n   218\t    def start_line(self, lines):\n   219\t        \"\"\"\n   220\t        Return the line number at which table data begins.\n   221\t        \"\"\"\n   222\t\n   223\t        for i, line in enumerate(lines):\n   224\t            if not isinstance(line, SoupString):\n   225\t                raise TypeError('HTML lines should be of type SoupString')\n   226\t            soup = line.soup\n   227\t\n   228\t            if soup.td is not None:\n   229\t                if soup.th is not None:\n   230\t                    raise core.InconsistentTableError('HTML tables cannot '\n   231\t                                                      'have headings and data in the same row')\n   232\t                return i\n   233\t\n   234\t        raise core.InconsistentTableError('No start line found for HTML data')\n   235\t\n   236\t    def end_line(self, lines):\n   237\t        \"\"\"\n   238\t        Return the line number at which table data ends.\n   239\t        \"\"\"\n   240\t        last_index = -1\n   241\t\n   242\t        for i, line in enumerate(lines):\n   243\t            if not isinstance(line, SoupString):\n   244\t                raise TypeError('HTML lines should be of type SoupString')\n   245\t            soup = line.soup\n   246\t            if soup.td is not None:\n   247\t                last_index = i\n   248\t\n   249\t        if last_index == -1:\n   250\t            return None\n   251\t        return last_index + 1\n   252\t\n   253\t\n   254\tclass HTML(core.BaseReader):\n   255\t    \"\"\"HTML format table.\n   256\t\n   257\t    In order to customize input and output, a dict of parameters may\n   258\t    be passed to this class holding<response clipped><NOTE>Due to the max output limit, only part of this file has been shown to you. You should retry this tool after you have searched inside the file with `grep -n` in order to find the line numbers of what you are looking for.</NOTE>eautifulSoup should use as a backend. The options to choose\n   259\t            from are 'html.parser' (the standard library parser), 'lxml'\n   260\t            (the recommended parser), 'xml' (lxml's XML parser), and\n   261\t            'html5lib'. html5lib is a highly lenient parser and therefore\n   262\t            might work correctly for unusual input if a different parser\n   263\t            fails.\n   264\t\n   265\t        * jsfiles : list of js files to include when writing table.\n   266\t\n   267\t        * cssfiles : list of css files to include when writing table.\n   268\t\n   269\t        * js : js script to include in the body when writing table.\n   270\t\n   271\t        * table_class : css class for the table\n   272\t\n   273\t    \"\"\"\n   274\t\n   275\t    _format_name = 'html'\n   276\t    _io_registry_format_aliases = ['html']\n   277\t    _io_registry_suffix = '.html'\n   278\t    _description = 'HTML table'\n   279\t\n   280\t    header_class = HTMLHeader\n   281\t    data_class = HTMLData\n   282\t    inputter_class = HTMLInputter\n   283\t\n   284\t    max_ndim = 2  # HTML supports writing 2-d columns with shape (n, m)\n   285\t\n   286\t    def __init__(self, htmldict={}):\n   287\t        \"\"\"\n   288\t        Initialize classes for HTML reading and writing.\n   289\t        \"\"\"\n   290\t        super().__init__()\n   291\t        self.html = deepcopy(htmldict)\n   292\t        if 'multicol' not in htmldict:\n   293\t            self.html['multicol'] = True\n   294\t        if 'table_id' not in htmldict:\n   295\t            self.html['table_id'] = 1\n   296\t        self.inputter.html = self.html\n   297\t\n   298\t    def read(self, table):\n   299\t        \"\"\"\n   300\t        Read the ``table`` in HTML format and return a resulting ``Table``.\n   301\t        \"\"\"\n   302\t\n   303\t        self.outputter = HTMLOutputter()\n   304\t        return super().read(table)\n   305\t\n   306\t    def write(self, table):\n   307\t        \"\"\"\n   308\t        Return data in ``table`` converted to HTML as a list of strings.\n   309\t        \"\"\"\n   310\t        # Check that table has only 1-d or 2-d columns. Above that fails.\n   311\t        self._check_multidim_table(table)\n   312\t\n   313\t        cols = list(table.columns.values())\n   314\t\n   315\t        self.data.header.cols = cols\n   316\t\n   317\t        if isinstance(self.data.fill_values, tuple):\n   318\t            self.data.fill_values = [self.data.fill_values]\n   319\t\n   320\t        self.data._set_fill_values(cols)\n   321\t\n   322\t        lines = []\n   323\t\n   324\t        # Set HTML escaping to False for any column in the raw_html_cols input\n   325\t        raw_html_cols = self.html.get('raw_html_cols', [])\n   326\t        if isinstance(raw_html_cols, str):\n   327\t            raw_html_cols = [raw_html_cols]  # Allow for a single string as input\n   328\t        cols_escaped = [col.info.name not in raw_html_cols for col in cols]\n   329\t\n   330\t        # Kwargs that get passed on to bleach.clean() if that is available.\n   331\t        raw_html_clean_kwargs = self.html.get('raw_html_clean_kwargs', {})\n   332\t\n   333\t        # Use XMLWriter to output HTML to lines\n   334\t        w = writer.XMLWriter(ListWriter(lines))\n   335\t\n   336\t        with w.tag('html'):\n   337\t            with w.tag('head'):\n   338\t                # Declare encoding and set CSS style for table\n   339\t                with w.tag('meta', attrib={'charset': 'utf-8'}):\n   340\t                    pass\n   341\t                with w.tag('meta', attrib={'http-equiv': 'Content-type',\n   342\t                                           'content': 'text/html;charset=UTF-8'}):\n   343\t                    pass\n   344\t                if 'css' in self.html:\n   345\t                    with w.tag('style'):\n   346\t                        w.data(self.html['css'])\n   347\t                if 'cssfiles' in self.html:\n   348\t                    for filename in self.html['cssfiles']:\n   349\t                        with w.tag('link', rel=\"stylesheet\", href=filename, type='text/css'):\n   350\t                            pass\n   351\t                if 'jsfiles' in self.html:\n   352\t                    for filename in self.html['jsfiles']:\n   353\t                        with w.tag('script', src=filename):\n   354\t                            w.data('')  # need this instead of pass to get <script></script>\n   355\t            with w.tag('body'):\n   356\t                if 'js' in self.html:\n   357\t                    with w.xml_cleaning_method('none'):\n   358\t                        with w.tag('script'):\n   359\t                            w.data(self.html['js'])\n   360\t                if isinstance(self.html['table_id'], str):\n   361\t                    html_table_id = self.html['table_id']\n   362\t                else:\n   363\t                    html_table_id = None\n   364\t                if 'table_class' in self.html:\n   365\t                    html_table_class = self.html['table_class']\n   366\t                    attrib = {\"class\": html_table_class}\n   367\t                else:\n   368\t                    attrib = {}\n   369\t                with w.tag('table', id=html_table_id, attrib=attrib):\n   370\t                    with w.tag('thead'):\n   371\t                        with w.tag('tr'):\n   372\t                            for col in cols:\n   373\t                                if len(col.shape) > 1 and self.html['multicol']:\n   374\t                                    # Set colspan attribute for multicolumns\n   375\t                                    w.start('th', colspan=col.shape[1])\n   376\t                                else:\n   377\t                                    w.start('th')\n   378\t                                w.data(col.info.name.strip())\n   379\t                                w.end(indent=False)\n   380\t                        col_str_iters = []\n   381\t                        new_cols_escaped = []\n   382\t\n   383\t                        # Make a container to hold any new_col objects created\n   384\t                        # below for multicolumn elements.  This is purely to\n   385\t                        # maintain a reference for these objects during\n   386\t                        # subsequent iteration to format column values.  This\n   387\t                        # requires that the weakref info._parent be maintained.\n   388\t                        new_cols = []\n   389\t\n   390\t                        for col, col_escaped in zip(cols, cols_escaped):\n   391\t                            if len(col.shape) > 1 and self.html['multicol']:\n   392\t                                span = col.shape[1]\n   393\t                                for i in range(span):\n   394\t                                    # Split up multicolumns into separate columns\n   395\t                                    new_col = Column([el[i] for el in col])\n   396\t\n   397\t                                    new_col_iter_str_vals = self.fill_values(\n   398\t                                        col, new_col.info.iter_str_vals())\n   399\t                                    col_str_iters.append(new_col_iter_str_vals)\n   400\t                                    new_cols_escaped.append(col_escaped)\n   401\t                                    new_cols.append(new_col)\n   402\t                            else:\n   403\t\n   404\t                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n   405\t                                col_str_iters.append(col_iter_str_vals)\n   406\t\n   407\t                                new_cols_escaped.append(col_escaped)\n   408\t\n   409\t                    for row in zip(*col_str_iters):\n   410\t                        with w.tag('tr'):\n   411\t                            for el, col_escaped in zip(row, new_cols_escaped):\n   412\t                                # Potentially disable HTML escaping for column\n   413\t                                method = ('escape_xml' if col_escaped else 'bleach_clean')\n   414\t                                with w.xml_cleaning_method(method, **raw_html_clean_kwargs):\n   415\t                                    w.start('td')\n   416\t                                    w.data(el.strip())\n   417\t                                    w.end(indent=False)\n   418\t\n   419\t        # Fixes XMLWriter's insertion of unwanted line breaks\n   420\t        return [''.join(lines)]\n   421\t\n   422\t    def fill_values(self, col, col_str_iters):\n   423\t        \"\"\"\n   424\t        Return an iterator of the values with replacements based on fill_values\n   425\t        \"\"\"\n   426\t        # check if the col is a masked column and has fill values\n   427\t        is_masked_column = hasattr(col, 'mask')\n   428\t        has_fill_values = hasattr(col, 'fill_values')\n   429\t\n   430\t        for idx, col_str in enumerate(col_str_iters):\n   431\t            if is_masked_column and has_fill_values:\n   432\t                if col.mask[idx]:\n   433\t                    yield col.fill_values[core.masked]\n   434\t                    continue\n   435\t\n   436\t            if has_fill_values:\n   437\t                if col_str in col.fill_values:\n   438\t                    yield col.fill_values[col_str]\n   439\t                    continue\n   440\t\n   441\t            yield col_str\n   442\t\n", "path": "/tmp/tmplnydgmuv/astropy/astropy/io/ascii/html.py", "prev_exist": true}, "action_id": "2b3788c8-4e83-4a7c-af61-0c1d0527212f"}