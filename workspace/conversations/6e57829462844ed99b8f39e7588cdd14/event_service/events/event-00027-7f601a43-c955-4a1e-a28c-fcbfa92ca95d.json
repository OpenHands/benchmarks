{"kind": "ObservationEvent", "id": "7f601a43-c955-4a1e-a28c-fcbfa92ca95d", "timestamp": "2025-09-25T18:59:46.199034", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_011hdhtZVM6CF5XoddQMXoZd", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmpl5smzkye/pytest/src/_pytest/logging.py:\n     1\t\"\"\" Access and control log capturing. \"\"\"\n     2\timport logging\n     3\timport os\n     4\timport re\n     5\timport sys\n     6\tfrom contextlib import contextmanager\n     7\tfrom io import StringIO\n     8\tfrom typing import AbstractSet\n     9\tfrom typing import Dict\n    10\tfrom typing import Generator\n    11\tfrom typing import List\n    12\tfrom typing import Mapping\n    13\tfrom typing import Optional\n    14\tfrom typing import Tuple\n    15\tfrom typing import TypeVar\n    16\tfrom typing import Union\n    17\t\n    18\timport pytest\n    19\tfrom _pytest import nodes\n    20\tfrom _pytest._io import TerminalWriter\n    21\tfrom _pytest.capture import CaptureManager\n    22\tfrom _pytest.compat import nullcontext\n    23\tfrom _pytest.config import _strtobool\n    24\tfrom _pytest.config import Config\n    25\tfrom _pytest.config import create_terminal_writer\n    26\tfrom _pytest.config.argparsing import Parser\n    27\tfrom _pytest.fixtures import FixtureRequest\n    28\tfrom _pytest.main import Session\n    29\tfrom _pytest.pathlib import Path\n    30\tfrom _pytest.store import StoreKey\n    31\tfrom _pytest.terminal import TerminalReporter\n    32\t\n    33\t\n    34\tDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n    35\tDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n    36\t_ANSI_ESCAPE_SEQ = re.compile(r\"\\x1b\\[[\\d;]+m\")\n    37\tcaplog_handler_key = StoreKey[\"LogCaptureHandler\"]()\n    38\tcaplog_records_key = StoreKey[Dict[str, List[logging.LogRecord]]]()\n    39\t\n    40\t\n    41\tdef _remove_ansi_escape_sequences(text: str) -> str:\n    42\t    return _ANSI_ESCAPE_SEQ.sub(\"\", text)\n    43\t\n    44\t\n    45\tclass ColoredLevelFormatter(logging.Formatter):\n    46\t    \"\"\"\n    47\t    Colorize the %(levelname)..s part of the log format passed to __init__.\n    48\t    \"\"\"\n    49\t\n    50\t    LOGLEVEL_COLOROPTS = {\n    51\t        logging.CRITICAL: {\"red\"},\n    52\t        logging.ERROR: {\"red\", \"bold\"},\n    53\t        logging.WARNING: {\"yellow\"},\n    54\t        logging.WARN: {\"yellow\"},\n    55\t        logging.INFO: {\"green\"},\n    56\t        logging.DEBUG: {\"purple\"},\n    57\t        logging.NOTSET: set(),\n    58\t    }  # type: Mapping[int, AbstractSet[str]]\n    59\t    LEVELNAME_FMT_REGEX = re.compile(r\"%\\(levelname\\)([+-.]?\\d*s)\")\n    60\t\n    61\t    def __init__(self, terminalwriter: TerminalWriter, *args, **kwargs) -> None:\n    62\t        super().__init__(*args, **kwargs)\n    63\t        self._original_fmt = self._style._fmt\n    64\t        self._level_to_fmt_mapping = {}  # type: Dict[int, str]\n    65\t\n    66\t        assert self._fmt is not None\n    67\t        levelname_fmt_match = self.LEVELNAME_FMT_REGEX.search(self._fmt)\n    68\t        if not levelname_fmt_match:\n    69\t            return\n    70\t        levelname_fmt = levelname_fmt_match.group()\n    71\t\n    72\t        for level, color_opts in self.LOGLEVEL_COLOROPTS.items():\n    73\t            formatted_levelname = levelname_fmt % {\n    74\t                \"levelname\": logging.getLevelName(level)\n    75\t            }\n    76\t\n    77\t            # add ANSI escape sequences around the formatted levelname\n    78\t            color_kwargs = {name: True for name in color_opts}\n    79\t            colorized_formatted_levelname = terminalwriter.markup(\n    80\t                formatted_levelname, **color_kwargs\n    81\t            )\n    82\t            self._level_to_fmt_mapping[level] = self.LEVELNAME_FMT_REGEX.sub(\n    83\t                colorized_formatted_levelname, self._fmt\n    84\t            )\n    85\t\n    86\t    def format(self, record: logging.LogRecord) -> str:\n    87\t        fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n    88\t        self._style._fmt = fmt\n    89\t        return super().format(record)\n    90\t\n    91\t\n    92\tclass PercentStyleMultiline(logging.PercentStyle):\n    93\t    \"\"\"A logging style with special support for multiline messages.\n    94\t\n    95\t    If the message of a record consists of multiple lines, this style\n    96\t    formats the message as if each line were logged separately.\n    97\t    \"\"\"\n    98\t\n    99\t    def __init__(self, fmt: str, auto_indent: Union[int, str, bool, None]) -> None:\n   100\t        super().__init__(fmt)\n   101\t        self._auto_indent = self._get_auto_indent(auto_indent)\n   102\t\n   103\t    @staticmethod\n   104\t    def _update_message(\n   105\t        record_dict: Dict[str, object], message: str\n   106\t    ) -> Dict[str, object]:\n   107\t        tmp = record_dict.copy()\n   108\t        tmp[\"message\"] = message\n   109\t        return tmp\n   110\t\n   111\t    @staticmethod\n   112\t    def _get_auto_indent(auto_indent_option: Union[int, str, bool, None]) -> int:\n   113\t        \"\"\"Determines the current auto indentation setting\n   114\t\n   115\t        Specify auto indent behavior (on/off/fixed) by passing in\n   116\t        extra={\"auto_indent\": [value]} to the call to logging.log() or\n   117\t        using a --log-auto-indent [value] command line or the\n   118\t        log_auto_indent [value] config option.\n   119\t\n   120\t        Default behavior is auto-indent off.\n   121\t\n   122\t        Using the string \"True\" or \"on\" or the boolean True as the value\n   123\t        turns auto indent on, using the string \"False\" or \"off\" or the\n   124\t        boolean False or the int 0 turns it off, and specifying a\n   125\t        positive integer fixes the indentation position to the value\n   126\t        specified.\n   127\t\n   128\t        Any other values for the option are invalid, and will silently be\n   129\t        converted to the default.\n   130\t\n   131\t        :param any auto_indent_option: User specified option for indentation\n   132\t            from command line, config or extra kwarg. Accepts int, bool or str.\n   133\t            str option accepts the same range of values as boolean config options,\n   134\t            as well as positive integers represented in str form.\n   135\t\n   136\t        :returns: indentation value, which can be\n   137\t            -1 (automatically determine indentation) or\n   138\t            0 (auto-indent turned off) or\n   139\t            >0 (explicitly set indentation position).\n   140\t        \"\"\"\n   141\t\n   142\t        if auto_indent_option is None:\n   143\t            return 0\n   144\t        elif isinstance(auto_indent_option, bool):\n   145\t            if auto_indent_option:\n   146\t                return -1\n   147\t            else:\n   148\t                return 0\n   149\t        elif isinstance(auto_indent_option, int):\n   150\t            return int(auto_indent_option)\n   151\t        elif isinstance(auto_indent_option, str):\n   152\t            try:\n   153\t                return int(auto_indent_option)\n   154\t            except ValueError:\n   155\t                pass\n   156\t            try:\n   157\t                if _strtobool(auto_indent_option):\n   158\t                    return -1\n   159\t            except ValueError:\n   160\t                return 0\n   161\t\n   162\t        return 0\n   163\t\n   164\t    def format(self, record: logging.LogRecord) -> str:\n   165\t        if \"\\n\" in record.message:\n   166\t            if hasattr(record, \"auto_indent\"):\n   167\t                # passed in from the \"extra={}\" kwarg on the call to logging.log()\n   168\t                auto_indent = self._get_auto_indent(record.auto_indent)  # type: ignore[attr-defined]\n   169\t            else:\n   170\t                auto_indent = self._auto_indent\n   171\t\n   172\t            if auto_indent:\n   173\t                lines = record.message.splitlines()\n   174\t                formatted = self._fmt % self._update_message(record.__dict__, lines[0])\n   175\t\n   176\t                if auto_indent < 0:\n   177\t                    indentation = _remove_ansi_escape_sequences(formatted).find(\n   178\t                        lines[0]\n   179\t                    )\n   180\t                else:\n   181\t                    # optimizes logging by allowing a fixed indentation\n   182\t                    indentation = auto_indent\n   183\t                lines[0] = formatted\n   184\t                return (\"\\n\" + \" \" * indentation).join(lines)\n   185\t        return self._fmt % record.__dict__\n   186\t\n   187\t\n   188\tdef get_option_ini(config: Config, *names: str):\n   189\t    for name in names:\n   190\t        ret = config.getoption(name)  # 'default' arg won't work as expected\n   191\t        if ret is None:\n   192\t            ret = config.getini(name)\n   193\t        if ret:\n   194\t            return ret\n   195\t\n   196\t\n   197\tdef pytest_addoption(parser: Parser) -> None:\n   198\t    \"\"\"Add options to control log capturing.\"\"\"\n   199\t    group = parser.getgroup(\"logging\")\n   200\t\n   201\t    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n   202\t        parser.addini(\n   203\t            dest, default=default, type=type, help=\"default value for \" + option\n   204\t        )\n   205\t        group.addoption(option, dest=dest, **kwargs)\n   206\t\n   207\t    add_option_ini(\n   208\t        \"--log-level\",\n   209\t        dest=\"log_level\",\n   210\t        default=None,\n   211\t        metavar=\"LEVEL\",\n   212\t        help=(\n   213\t            \"level of messages to catch/display.\\n\"\n   214\t            \"Not set by default, so it depends on the root/parent log handler's\"\n   215\t            ' effective level, where it is \"WARNING\" by default.'\n   216\t        ),\n   217\t    )\n   218\t    add_option_ini(\n   219\t        \"--log-format\",\n   220\t        dest=\"log_format\",\n   221\t        default=DEFAULT_LOG_FORMAT,\n   222\t  <response clipped><NOTE>Due to the max output limit, only part of this file has been shown to you. You should retry this tool after you have searched inside the file with `grep -n` in order to find the line numbers of what you are looking for.</NOTE>True, parents=True)\n   223\t\n   224\t        stream = fpath.open(mode=\"w\", encoding=\"UTF-8\")\n   225\t        if sys.version_info >= (3, 7):\n   226\t            old_stream = self.log_file_handler.setStream(stream)\n   227\t        else:\n   228\t            old_stream = self.log_file_handler.stream\n   229\t            self.log_file_handler.acquire()\n   230\t            try:\n   231\t                self.log_file_handler.flush()\n   232\t                self.log_file_handler.stream = stream\n   233\t            finally:\n   234\t                self.log_file_handler.release()\n   235\t        if old_stream:\n   236\t            old_stream.close()\n   237\t\n   238\t    def _log_cli_enabled(self):\n   239\t        \"\"\"Return whether live logging is enabled.\"\"\"\n   240\t        enabled = self._config.getoption(\n   241\t            \"--log-cli-level\"\n   242\t        ) is not None or self._config.getini(\"log_cli\")\n   243\t        if not enabled:\n   244\t            return False\n   245\t\n   246\t        terminal_reporter = self._config.pluginmanager.get_plugin(\"terminalreporter\")\n   247\t        if terminal_reporter is None:\n   248\t            # terminal reporter is disabled e.g. by pytest-xdist.\n   249\t            return False\n   250\t\n   251\t        return True\n   252\t\n   253\t    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n   254\t    def pytest_sessionstart(self) -> Generator[None, None, None]:\n   255\t        self.log_cli_handler.set_when(\"sessionstart\")\n   256\t\n   257\t        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n   258\t            with catching_logs(self.log_file_handler, level=self.log_file_level):\n   259\t                yield\n   260\t\n   261\t    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n   262\t    def pytest_collection(self) -> Generator[None, None, None]:\n   263\t        self.log_cli_handler.set_when(\"collection\")\n   264\t\n   265\t        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n   266\t            with catching_logs(self.log_file_handler, level=self.log_file_level):\n   267\t                yield\n   268\t\n   269\t    @pytest.hookimpl(hookwrapper=True)\n   270\t    def pytest_runtestloop(self, session: Session) -> Generator[None, None, None]:\n   271\t        \"\"\"Runs all collected test items.\"\"\"\n   272\t\n   273\t        if session.config.option.collectonly:\n   274\t            yield\n   275\t            return\n   276\t\n   277\t        if self._log_cli_enabled() and self._config.getoption(\"verbose\") < 1:\n   278\t            # setting verbose flag is needed to avoid messy test progress output\n   279\t            self._config.option.verbose = 1\n   280\t\n   281\t        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n   282\t            with catching_logs(self.log_file_handler, level=self.log_file_level):\n   283\t                yield  # run all the tests\n   284\t\n   285\t    @pytest.hookimpl\n   286\t    def pytest_runtest_logstart(self) -> None:\n   287\t        self.log_cli_handler.reset()\n   288\t        self.log_cli_handler.set_when(\"start\")\n   289\t\n   290\t    @pytest.hookimpl\n   291\t    def pytest_runtest_logreport(self) -> None:\n   292\t        self.log_cli_handler.set_when(\"logreport\")\n   293\t\n   294\t    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None, None, None]:\n   295\t        \"\"\"Implements the internals of pytest_runtest_xxx() hook.\"\"\"\n   296\t        with catching_logs(\n   297\t            self.caplog_handler, level=self.log_level,\n   298\t        ) as caplog_handler, catching_logs(\n   299\t            self.report_handler, level=self.log_level,\n   300\t        ) as report_handler:\n   301\t            caplog_handler.reset()\n   302\t            report_handler.reset()\n   303\t            item._store[caplog_records_key][when] = caplog_handler.records\n   304\t            item._store[caplog_handler_key] = caplog_handler\n   305\t\n   306\t            yield\n   307\t\n   308\t            log = report_handler.stream.getvalue().strip()\n   309\t            item.add_report_section(when, \"log\", log)\n   310\t\n   311\t    @pytest.hookimpl(hookwrapper=True)\n   312\t    def pytest_runtest_setup(self, item: nodes.Item) -> Generator[None, None, None]:\n   313\t        self.log_cli_handler.set_when(\"setup\")\n   314\t\n   315\t        empty = {}  # type: Dict[str, List[logging.LogRecord]]\n   316\t        item._store[caplog_records_key] = empty\n   317\t        yield from self._runtest_for(item, \"setup\")\n   318\t\n   319\t    @pytest.hookimpl(hookwrapper=True)\n   320\t    def pytest_runtest_call(self, item: nodes.Item) -> Generator[None, None, None]:\n   321\t        self.log_cli_handler.set_when(\"call\")\n   322\t\n   323\t        yield from self._runtest_for(item, \"call\")\n   324\t\n   325\t    @pytest.hookimpl(hookwrapper=True)\n   326\t    def pytest_runtest_teardown(self, item: nodes.Item) -> Generator[None, None, None]:\n   327\t        self.log_cli_handler.set_when(\"teardown\")\n   328\t\n   329\t        yield from self._runtest_for(item, \"teardown\")\n   330\t        del item._store[caplog_records_key]\n   331\t        del item._store[caplog_handler_key]\n   332\t\n   333\t    @pytest.hookimpl\n   334\t    def pytest_runtest_logfinish(self) -> None:\n   335\t        self.log_cli_handler.set_when(\"finish\")\n   336\t\n   337\t    @pytest.hookimpl(hookwrapper=True, tryfirst=True)\n   338\t    def pytest_sessionfinish(self) -> Generator[None, None, None]:\n   339\t        self.log_cli_handler.set_when(\"sessionfinish\")\n   340\t\n   341\t        with catching_logs(self.log_cli_handler, level=self.log_cli_level):\n   342\t            with catching_logs(self.log_file_handler, level=self.log_file_level):\n   343\t                yield\n   344\t\n   345\t    @pytest.hookimpl\n   346\t    def pytest_unconfigure(self) -> None:\n   347\t        # Close the FileHandler explicitly.\n   348\t        # (logging.shutdown might have lost the weakref?!)\n   349\t        self.log_file_handler.close()\n   350\t\n   351\t\n   352\tclass _FileHandler(logging.FileHandler):\n   353\t    \"\"\"\n   354\t    Custom FileHandler with pytest tweaks.\n   355\t    \"\"\"\n   356\t\n   357\t    def handleError(self, record: logging.LogRecord) -> None:\n   358\t        # Handled by LogCaptureHandler.\n   359\t        pass\n   360\t\n   361\t\n   362\tclass _LiveLoggingStreamHandler(logging.StreamHandler):\n   363\t    \"\"\"\n   364\t    Custom StreamHandler used by the live logging feature: it will write a newline before the first log message\n   365\t    in each test.\n   366\t\n   367\t    During live logging we must also explicitly disable stdout/stderr capturing otherwise it will get captured\n   368\t    and won't appear in the terminal.\n   369\t    \"\"\"\n   370\t\n   371\t    # Officially stream needs to be a IO[str], but TerminalReporter\n   372\t    # isn't. So force it.\n   373\t    stream = None  # type: TerminalReporter # type: ignore\n   374\t\n   375\t    def __init__(\n   376\t        self,\n   377\t        terminal_reporter: TerminalReporter,\n   378\t        capture_manager: Optional[CaptureManager],\n   379\t    ) -> None:\n   380\t        \"\"\"\n   381\t        :param _pytest.terminal.TerminalReporter terminal_reporter:\n   382\t        :param _pytest.capture.CaptureManager capture_manager:\n   383\t        \"\"\"\n   384\t        logging.StreamHandler.__init__(self, stream=terminal_reporter)  # type: ignore[arg-type]\n   385\t        self.capture_manager = capture_manager\n   386\t        self.reset()\n   387\t        self.set_when(None)\n   388\t        self._test_outcome_written = False\n   389\t\n   390\t    def reset(self) -> None:\n   391\t        \"\"\"Reset the handler; should be called before the start of each test\"\"\"\n   392\t        self._first_record_emitted = False\n   393\t\n   394\t    def set_when(self, when: Optional[str]) -> None:\n   395\t        \"\"\"Prepares for the given test phase (setup/call/teardown)\"\"\"\n   396\t        self._when = when\n   397\t        self._section_name_shown = False\n   398\t        if when == \"start\":\n   399\t            self._test_outcome_written = False\n   400\t\n   401\t    def emit(self, record: logging.LogRecord) -> None:\n   402\t        ctx_manager = (\n   403\t            self.capture_manager.global_and_fixture_disabled()\n   404\t            if self.capture_manager\n   405\t            else nullcontext()\n   406\t        )\n   407\t        with ctx_manager:\n   408\t            if not self._first_record_emitted:\n   409\t                self.stream.write(\"\\n\")\n   410\t                self._first_record_emitted = True\n   411\t            elif self._when in (\"teardown\", \"finish\"):\n   412\t                if not self._test_outcome_written:\n   413\t                    self._test_outcome_written = True\n   414\t                    self.stream.write(\"\\n\")\n   415\t            if not self._section_name_shown and self._when:\n   416\t                self.stream.section(\"live log \" + self._when, sep=\"-\", bold=True)\n   417\t                self._section_name_shown = True\n   418\t            super().emit(record)\n   419\t\n   420\t    def handleError(self, record: logging.LogRecord) -> None:\n   421\t        # Handled by LogCaptureHandler.\n   422\t        pass\n   423\t\n   424\t\n   425\tclass _LiveLoggingNullHandler(logging.NullHandler):\n   426\t    \"\"\"A handler used when live logging is disabled.\"\"\"\n   427\t\n   428\t    def reset(self) -> None:\n   429\t        pass\n   430\t\n   431\t    def set_when(self, when: str) -> None:\n   432\t        pass\n   433\t\n   434\t    def handleError(self, record: logging.LogRecord) -> None:\n   435\t        # Handled by LogCaptureHandler.\n   436\t        pass\n   437\t\n", "path": "/tmp/tmpl5smzkye/pytest/src/_pytest/logging.py", "prev_exist": true}, "action_id": "7ee3b42e-0a7e-4fc0-bd5d-36b16561d124"}