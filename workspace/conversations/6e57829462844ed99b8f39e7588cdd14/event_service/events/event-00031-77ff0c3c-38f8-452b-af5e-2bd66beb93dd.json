{"kind": "ObservationEvent", "id": "77ff0c3c-38f8-452b-af5e-2bd66beb93dd", "timestamp": "2025-09-25T18:59:55.830034", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01EoHHBbzc3md7ZgTcU8gc5C", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmpl5smzkye/pytest/src/_pytest/logging.py:\n   450\t        orig_level = logger_obj.level\n   451\t        logger_obj.setLevel(level)\n   452\t        handler_orig_level = self.handler.level\n   453\t        self.handler.setLevel(level)\n   454\t        try:\n   455\t            yield\n   456\t        finally:\n   457\t            logger_obj.setLevel(orig_level)\n   458\t            self.handler.setLevel(handler_orig_level)\n   459\t\n   460\t\n   461\t@pytest.fixture\n   462\tdef caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n   463\t    \"\"\"Access and control log capturing.\n   464\t\n   465\t    Captured logs are available through the following properties/methods::\n   466\t\n   467\t    * caplog.messages        -> list of format-interpolated log messages\n   468\t    * caplog.text            -> string containing formatted log output\n   469\t    * caplog.records         -> list of logging.LogRecord instances\n   470\t    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n   471\t    * caplog.clear()         -> clear captured records and formatted log output string\n   472\t    \"\"\"\n   473\t    result = LogCaptureFixture(request.node)\n   474\t    yield result\n   475\t    result._finalize()\n   476\t\n   477\t\n   478\tdef get_log_level_for_setting(config: Config, *setting_names: str) -> Optional[int]:\n   479\t    for setting_name in setting_names:\n   480\t        log_level = config.getoption(setting_name)\n   481\t        if log_level is None:\n   482\t            log_level = config.getini(setting_name)\n   483\t        if log_level:\n   484\t            break\n   485\t    else:\n   486\t        return None\n   487\t\n   488\t    if isinstance(log_level, str):\n   489\t        log_level = log_level.upper()\n   490\t    try:\n   491\t        return int(getattr(logging, log_level, log_level))\n   492\t    except ValueError as e:\n   493\t        # Python logging does not recognise this as a logging level\n   494\t        raise pytest.UsageError(\n   495\t            \"'{}' is not recognized as a logging level name for \"\n   496\t            \"'{}'. Please consider passing the \"\n   497\t            \"logging level num instead.\".format(log_level, setting_name)\n   498\t        ) from e\n   499\t\n   500\t\n", "path": "/tmp/tmpl5smzkye/pytest/src/_pytest/logging.py", "prev_exist": true}, "action_id": "2fb27da0-e6ce-46f2-8926-c47662fed6e5"}