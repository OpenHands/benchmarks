{"kind": "ObservationEvent", "id": "c3913458-141c-4cc9-8cda-db12d3d032ba", "timestamp": "2025-09-26T01:49:17.741813", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01UcmPnWHNunkRwi8FRUsXpe", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/tmp1c5hnr0b/sympy/test_comprehensive.py", "path": "/tmp/tmp1c5hnr0b/sympy/test_comprehensive.py", "prev_exist": false, "new_content": "#!/usr/bin/env python3\n\n\"\"\"\nComprehensive test for MatrixSymbol printing fix.\n\"\"\"\n\nfrom sympy import *\n\ndef test_comprehensive():\n    print(\"Comprehensive MatrixSymbol printing test...\")\n    print(\"=\" * 60)\n    \n    # Create MatrixSymbols\n    A = MatrixSymbol('A', 2, 2)\n    B = MatrixSymbol('B', 2, 2)\n    C = MatrixSymbol('C', 2, 2)\n    \n    # Test cases that should work correctly\n    test_cases = [\n        # Basic subtraction\n        (\"A - B\", A - B),\n        (\"B - A\", B - A),\n        \n        # Multiple terms\n        (\"A - B - C\", A - B - C),\n        (\"A + B - C\", A + B - C),\n        (\"A - B + C\", A - B + C),\n        \n        # Matrix multiplication with subtraction\n        (\"A - A*B\", A - A*B),\n        (\"A*B - A\", A*B - A),\n        (\"A - A*B - B\", A - A*B - B),\n        \n        # Negative matrices\n        (\"-A\", -A),\n        (\"-A*B\", -A*B),\n        (\"-A - B\", -A - B),\n        \n        # Coefficients\n        (\"A - 2*B\", A - 2*B),\n        (\"2*A - B\", 2*A - B),\n        (\"-2*A + B\", -2*A + B),\n        (\"A - 3*B*C\", A - 3*B*C),\n        \n        # Complex expressions\n        (\"A*B - B*A\", A*B - B*A),\n        (\"A*B - C*A - B\", A*B - C*A - B),\n        (\"-A*B - C + A\", -A*B - C + A),\n        \n        # Edge cases\n        (\"A + A\", A + A),  # Should not be affected\n        (\"A*B\", A*B),      # Should not be affected\n        (\"2*A\", 2*A),      # Should not be affected\n    ]\n    \n    all_passed = True\n    \n    for description, expr in test_cases:\n        print(f\"\\nTest: {description}\")\n        \n        try:\n            # Test str() printing\n            str_result = str(expr)\n            print(f\"str():    '{str_result}'\")\n            \n            # Test pprint() printing\n            from io import StringIO\n            import sys\n            old_stdout = sys.stdout\n            sys.stdout = buffer = StringIO()\n            pprint(expr)\n            sys.stdout = old_stdout\n            pprint_result = buffer.getvalue().strip()\n            print(f\"pprint(): '{pprint_result}'\")\n            \n            # Test latex() printing\n            latex_result = latex(expr)\n            print(f\"latex():  '{latex_result}'\")\n            \n            # Check for the problematic (-1)* pattern\n            has_problem = \"(-1)*\" in str_result or \"-1 \" in latex_result\n            if has_problem:\n                print(f\"\u274c FAILED: Still contains (-1) pattern!\")\n                all_passed = False\n            else:\n                print(f\"\u2705 PASSED: No (-1) pattern found\")\n                \n        except Exception as e:\n            print(f\"\u274c ERROR: {e}\")\n            all_passed = False\n        \n        print(\"-\" * 40)\n    \n    # Test that regular expressions still work\n    print(f\"\\nTesting regular expressions (should be unchanged):\")\n    print(\"=\" * 50)\n    \n    x, y, z = symbols('x y z')\n    regular_cases = [\n        (\"x - y\", x - y),\n        (\"x - x*y - y\", x - x*y - y),\n        (\"-x - y\", -x - y),\n        (\"x - 2*y\", x - 2*y),\n    ]\n    \n    for description, expr in regular_cases:\n        print(f\"\\nRegular test: {description}\")\n        str_result = str(expr)\n        latex_result = latex(expr)\n        print(f\"str():   '{str_result}'\")\n        print(f\"latex(): '{latex_result}'\")\n        \n        # Regular expressions should not have (-1)* either\n        has_problem = \"(-1)*\" in str_result or \"-1 \" in latex_result\n        if has_problem:\n            print(f\"\u274c FAILED: Regular expression has (-1) pattern!\")\n            all_passed = False\n        else:\n            print(f\"\u2705 PASSED: Regular expression looks good\")\n    \n    print(\"\\n\" + \"=\" * 60)\n    if all_passed:\n        print(\"\ud83c\udf89 ALL TESTS PASSED! The fix is working correctly.\")\n    else:\n        print(\"\u274c SOME TESTS FAILED! Need to investigate.\")\n    \n    return all_passed\n\nif __name__ == \"__main__\":\n    test_comprehensive()"}, "action_id": "642adfd8-d691-4c46-81ad-59ebf8f37b96"}