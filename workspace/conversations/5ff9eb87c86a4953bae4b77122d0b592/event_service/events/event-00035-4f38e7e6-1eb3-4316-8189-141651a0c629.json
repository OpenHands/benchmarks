{"kind": "ObservationEvent", "id": "4f38e7e6-1eb3-4316-8189-141651a0c629", "timestamp": "2025-09-25T11:20:56.197868", "source": "environment", "tool_name": "execute_bash", "tool_call_id": "toolu_014a14QiDbiBjkPAqtrpBkuD", "observation": {"kind": "ExecuteBashObservation", "output": "diff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex ab88c147d9..a4951094fe 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -69,10 +69,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n             (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n         ):\n             return True\n-    elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU)):\n-        return True\n-    else:\n-        return False\n+    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n\n\n def _decode_mixins(tbl):\n\ncommit b4f3daeaea1c30a9c34b58ccd1a4e24f57cabad2\nAuthor: Nathaniel Starkman <nstarkman@protonmail.com>\nDate:   Fri Jan 13 16:11:56 2023 -0500\n\n    fix D415 - EndsInPunctuation\n\n    Also cleaned up the per-file ignore config for examples.\n    In future, ruff will try to autofix the docstring, ensuring the summary ends in a punctuation mark.\n--\n-COLUMN_KEYWORD_REGEXP = '(' + '|'.join(KEYWORD_NAMES) + ')[0-9]+'\n+COLUMN_KEYWORD_REGEXP = \"(\" + \"|\".join(KEYWORD_NAMES) + \")[0-9]+\"\n\n\n def is_column_keyword(keyword):\n@@ -56,8 +65,9 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         fileobj.seek(pos)\n         return sig == FITS_SIGNATURE\n     elif filepath is not None:\n-        if filepath.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz',\n-                                      '.fts', '.fts.gz')):\n+        if filepath.lower().endswith(\n+            (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n+        ):\n             return True\n     elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU)):\n         return True\n@@ -72,8 +82,8 @@ def _decode_mixins(tbl):\n     # If available read in __serialized_columns__ meta info which is stored\n     # in FITS COMMENTS between two sentinels.\n     try:\n-        i0 = tbl.meta['comments'].index('--BEGIN-ASTROPY-SERIALIZED-COLUMNS--')\n-        i1 = tbl.meta['comments'].index('--END-ASTROPY-SERIALIZED-COLUMNS--')\n+        i0 = tbl.meta[\"comments\"].index(\"--BEGIN-ASTROPY-SERIALIZED-COLUMNS--\")\n+        i1 = tbl.meta[\"comments\"].index(\"--END-ASTROPY-SERIALIZED-COLUMNS--\")\n     except (ValueError, KeyError):\n--\n         table_hdu.writeto(output)\n\n\n-io_registry.register_reader('fits', Table, read_table_fits)\n-io_registry.register_writer('fits', Table, write_table_fits)\n-io_registry.register_identifier('fits', Table, is_fits)\n+io_registry.register_reader(\"fits\", Table, read_table_fits)\n+io_registry.register_writer(\"fits\", Table, write_table_fits)\n+io_registry.register_identifier(\"fits\", Table, is_fits)\n\ncommit 7a43a57edf447f1a0678e1b3929082f4d94cdd87\nAuthor: Nathaniel Starkman <nstarkman@protonmail.com>\nDate:   Sun Sep 18 13:44:39 2022 -0400\n\n    isort io\n\n    Signed-off-by: Nathaniel Starkman (@nstarman) <nstarkman@protonmail.com>\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex ad80f99641..b853781ee9 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -8,21 +8,22 @@ from copy import deepcopy\n\n import numpy as np\n\n-from astropy.io import registry as io_registry\n from astropy import units as u\n-from astropy.table import Table, serialize, meta, Column, MaskedColumn\n--\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 599238b097..084b7a76c4 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -41,7 +41,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n\n     Parameters\n     ----------\n-    origin : str or readable file-like object\n+    origin : str or readable file-like\n         Path or file object containing a potential FITS file.\n\n     Returns\n@@ -138,7 +138,7 @@ def read_table_fits(input, hdu=None, astropy_native=False, memmap=False,\n\n     Parameters\n     ----------\n-    input : str or file-like object or compatible `astropy.io.fits` HDU object\n+    input : str or file-like or compatible `astropy.io.fits` HDU object\n         If a string, the filename to read the table from. If a file object, or\n         a compatible HDU object, the object to extract the table from. The\n         following `astropy.io.fits` HDU objects can be used as input:\n\ncommit 1fa638bcb892ccb2b52dd1609cad2a27e3bf804b\nAuthor: Nicholas Earl <contact@nicholasearl.me>\n--\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -397,4 +397,3 @@ def write_table_fits(input, output, overwrite=False):\n io_registry.register_reader('fits', Table, read_table_fits)\n io_registry.register_writer('fits', Table, write_table_fits)\n io_registry.register_identifier('fits', Table, is_fits)\n-\n\ncommit 9d63666e5db52b79bbe0d90e8dc8a7b8792db803\nAuthor: Sara Ogaz <ogaz@stsci.edu>\nDate:   Mon May 7 11:29:01 2018 -0400\n\n    moving content from connect to column\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 9f0a95745d..7936c7bca7 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -14,7 +14,7 @@ from ...time import Time\n from ...utils.exceptions import AstropyUserWarning\n from ...utils.data_info import MixinInfo, serialize_context_as\n from . import HDUList, TableHDU, BinTableHDU, GroupsHDU\n-from .column import KEYWORD_NAMES, ASCII_DEFAULT_WIDTHS\n+from .column import KEYWORD_NAMES, ASCII_DEFAULT_WIDTHS, _fortran_to_python_format\n from .convenience import table_to_hdu\n from .hdu.hdulist import fitsopen as fits_open\n--\n\n def is_column_keyword(keyword):\n     return re.match(COLUMN_KEYWORD_REGEXP, keyword) is not None\n@@ -446,162 +398,3 @@ io_registry.register_reader('fits', Table, read_table_fits)\n io_registry.register_writer('fits', Table, write_table_fits)\n io_registry.register_identifier('fits', Table, is_fits)\n\n-\n-def _parse_tdisp_format(tdisp):\n-    \"\"\"\n-    Parse the ``TDISPn`` keywords for ASCII and binary tables into a\n-    ``(format, width, precision, exponential)`` tuple (the TDISP values\n-    for ASCII and binary are identical except for 'Lw',\n-    which is only present in BINTABLE extensions\n-\n-    Parameters\n-    ----------\n-    tdisp: str\n-        TDISPn FITS Header keyword.  Used to specify display formatting.\n-\n-    Returns\n-    -------\n-    formatc: str\n-        The format characters from TDISPn\n-    width: str\n-        The width int value from TDISPn\n--\n\n     # Create Table object\n@@ -392,3 +446,170 @@ def write_table_fits(input, output, overwrite=False):\n io_registry.register_reader('fits', Table, read_table_fits)\n io_registry.register_writer('fits', Table, write_table_fits)\n io_registry.register_identifier('fits', Table, is_fits)\n+\n+\n+def _parse_tdisp_format(tdisp):\n+    \"\"\"\n+    Parse the ``TDISPn`` keywords for ASCII and binary tables into a\n+    ``(format, width, precision, exponential)`` tuple (the TDISP values\n+    for ASCII and binary are identical except for 'Lw',\n+    which is only present in BINTABLE extensions\n+\n+    Parameters\n+    ----------\n+    tdisp: str\n+        TDISPn FITS Header keyword.  Used to specify display formatting.\n+\n+    Returns\n+    -------\n+    formatc: str\n+        The format characters from TDISPn\n+\n+    width: str\n--\n-from ...table import Table, Column, MaskedColumn\n+from ...table import Table, serialize, meta, Column, MaskedColumn\n from ...utils.exceptions import AstropyUserWarning\n from . import HDUList, TableHDU, BinTableHDU, GroupsHDU\n from .column import KEYWORD_NAMES\n@@ -63,6 +64,47 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         return False\n\n\n+def _decode_mixins(tbl):\n+    \"\"\"Decode a Table ``tbl`` that has astropy Columns + appropriate meta-data into\n+    the corresponding table with mixin columns (as appropriate).\n+    \"\"\"\n+    # If available read in __serialized_columns__ meta info which is stored\n+    # in FITS COMMENTS between two sentinels.\n+    try:\n+        i0 = tbl.meta['comments'].index('--BEGIN-BASE64-ASTROPY-SERIALIZED-COLUMNS--')\n+        i1 = tbl.meta['comments'].index('--END-BASE64-ASTROPY-SERIALIZED-COLUMNS--')\n+    except (AttributeError, ValueError):\n+        return tbl\n+\n+    # Lines are base64-encoded to deal with whitespace, see _encode_mixins for details.\n+    b64_line = ''.join(tbl.meta['comments'][i0 + 1:i1])\n+    lines = [b64decode(b64_line.encode('ascii')).decode('ascii')]\n+\n+    del tbl.meta['comments'][i0:i1 + 1]\n--\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 250ea38e42..eef96b1b4f 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -63,7 +63,8 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         return False\n\n\n-def read_table_fits(input, hdu=None, astropy_native=False, memmap=False):\n+def read_table_fits(input, hdu=None, astropy_native=False, memmap=False,\n+                    character_as_bytes=True):\n     \"\"\"\n     Read a Table object from an FITS file\n\n@@ -96,6 +97,13 @@ def read_table_fits(input, hdu=None, astropy_native=False, memmap=False):\n         fit the table in memory, you may be better off leaving memory mapping\n         off. However, if your table would not fit in memory, you should set this\n         to `True`.\n+    character_as_bytes : bool, optional\n+        If `True`, string columns are stored as Numpy byte arrays (dtype ``S``)\n+        and are converted on-the-fly to unicode strings when accessing\n+        individual elements. If you need to use Numpy unicode arrays (dtype\n+        ``U``) internally, you should set this to `False`, but note that this\n+        will use more memory. If set to `False`, string columns will not be\n+        memory-mapped even if ``memmap`` is `True`.\n--\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 06033d0d30..42db60020f 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -63,7 +63,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         return False\n\n\n-def read_table_fits(input, hdu=None, astropy_native=False, memmap=True):\n+def read_table_fits(input, hdu=None, astropy_native=False, memmap=False):\n     \"\"\"\n     Read a Table object from an FITS file\n\n\ncommit de1643ab505343b8e92c1778db80d742a2d448fa\nAuthor: Thomas Robitaille <thomas.robitaille@gmail.com>\nDate:   Mon Nov 27 17:28:31 2017 +0000\n\n    Make it possible to control memory mapping when using Table.read\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 9b6fe3995b..06033d0d30 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -63,7 +63,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         return False\n\n\n-def read_table_fits(input, hdu=None, astropy_native=False):\n+def read_table_fits(input, hdu=None, astropy_native=False, memmap=True):\n     \"\"\"\n     Read a Table object from an FITS file\n\n@@ -89,6 +89,11 @@ def read_table_fits(input, hdu=None, astropy_native=False):\n     astropy_native : bool, optional\n         Read in FITS columns as native astropy objects where possible instead\n         of standard Table Column objects. Default is False.\n+    memmap : bool, optional\n+        Whether to use memory mapping, which accesses data on disk as needed. If\n+        you are only accessing part of the data, this is often more efficient.\n+        If you want to access all the values in the table, and you are able to\n+        fit the table in memory, you may want to try turning memory mapping off.\n     \"\"\"\n\n     if isinstance(input, HDUList):\n--\n-            return True\n-    return False\n+    return re.match(COLUMN_KEYWORD_REGEXP, keyword) is not None\n\n\n def is_fits(origin, filepath, fileobj, *args, **kwargs):\n\ncommit 397b89a992fc9a245fb65243709ca75cb0b3064c\nAuthor: Marten van Kerkwijk <mhvk@astro.utoronto.ca>\nDate:   Thu Aug 3 11:17:23 2017 -0400\n\n    Update list of column keywords in connect to include Time ones.\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 271099bcec..67fe25e8b6 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -14,7 +14,6 @@ from ...table import Table\n from ...utils.exceptions import AstropyUserWarning\n from . import HDUList, TableHDU, BinTableHDU, GroupsHDU\n from .convenience import table_to_hdu\n-from .column import is_time_column_keyword\n from .hdu.hdulist import fitsopen as fits_open\n from .util import first\n\n@@ -38,6 +37,9 @@ COLUMN_KEYWORDS = ['TFORM[0-9]+',\n--\n+from .column import is_time_column_keyword\n+from .fitstime import fits_to_time\n from .hdu.hdulist import fitsopen as fits_open\n from .util import first\n\n@@ -77,7 +78,7 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         return False\n\n\n-def read_table_fits(input, hdu=None):\n+def read_table_fits(input, hdu=None, astropy_native=False):\n     \"\"\"\n     Read a Table object from an FITS file\n\n@@ -93,6 +94,10 @@ def read_table_fits(input, hdu=None):\n         - :class:`~astropy.io.fits.hdu.hdulist.HDUList`\n     hdu : int or str, optional\n         The HDU to read the table from.\n+    astropy_native : bool\n+        The option to read in FITS columns as mixins if possible. By default\n+        this option is set to False, to read raw fits data as non-mixin Table\n+        columns.\n     \"\"\"\n\n     if isinstance(input, HDUList):\n@@ -134,7 +139,8 @@ def read_table_fits(input, hdu=None):\n--\n-        if re.match(c, keyword) is not None:\n-            return True\n-    return False\n-\n-\n def is_fits(origin, filepath, fileobj, *args, **kwargs):\n     \"\"\"\n     Determine whether `origin` is a FITS file.\n@@ -113,7 +95,7 @@ def read_table_fits(input, hdu=None):\n     \"\"\"\n\n     # Avoid circular imports\n-    from .time import FitsTime\n+    from .time import is_time_column_keyword, FitsTime, TIME_KEYWORDS\n\n     if isinstance(input, HDUList):\n\n\ncommit b7db66ebef95fa4ddcdedee959f4a0bea591d213\nAuthor: Aarya Patil <aaryapatil1996@gmail.com>\nDate:   Sun Jun 11 01:51:52 2017 +0530\n\n    Time Writing and Reading\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 1c64840513..a2900e63b9 100644\n--\n+        if re.match(c, keyword) is not None:\n+            return True\n+    return False\n+\n+\n def is_fits(origin, filepath, fileobj, *args, **kwargs):\n     \"\"\"\n     Determine whether `origin` is a FITS file.\n@@ -94,6 +111,9 @@ def read_table_fits(input, hdu=None):\n         The HDU to read the table from.\n     \"\"\"\n\n+    # Avoid circular imports\n+    from .time import FitsTime\n+\n     if isinstance(input, HDUList):\n\n         # Parse all table objects\n@@ -162,6 +182,9 @@ def read_table_fits(input, hdu=None):\n\n     # TODO: deal properly with unsigned integers\n\n+    # Create a Time_fits object to facilitate reading in time\n+    time_state = FitsTime(len(t.columns))\n+\n     for key, value, comment in table.header.cards:\n--\n     table_hdu.writeto(output)\n\n+\n io_registry.register_reader('fits', Table, read_table_fits)\n io_registry.register_writer('fits', Table, write_table_fits)\n io_registry.register_identifier('fits', Table, is_fits)\n\ncommit 3dd261697aca44be1d374669f0c0560029d63054\nAuthor: Giang Nguyen <giang.nghg@gmail.com>\nDate:   Wed Jun 7 10:39:51 2017 +0800\n\n    Fixes https://github.com/astropy/astropy/issues/6079\n\n    - Convert FITS comment header format to io.ascii format and vice versa\n    - Log this change as both API change and bug fix\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 73b2be50dc..908623fa3c 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -165,6 +165,10 @@ def read_table_fits(input, hdu=None):\n     for key, value, comment in table.header.cards:\n\n         if key in ['COMMENT', 'HISTORY']:\n+            # Convert to io.ascii format\n+            if key == 'COMMENT':\n--\n\n-io_registry.register_reader('fits', Table, read_table_fits, update_docs=False)\n-io_registry.register_writer('fits', Table, write_table_fits, update_docs=False)\n+io_registry.register_reader('fits', Table, read_table_fits)\n+io_registry.register_writer('fits', Table, write_table_fits)\n io_registry.register_identifier('fits', Table, is_fits)\n\ncommit e7520bbe1cba778342b1a08bf9dc7b8c6bf95b26\nAuthor: Michael Seifert <michaelseifert04@yahoo.de>\nDate:   Sun Aug 28 20:43:11 2016 +0200\n\n    make registry_update_docs optional for registration of reader/writer\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 1c97b594b6..43e9669caf 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -219,6 +219,6 @@ def write_table_fits(input, output, overwrite=False):\n\n     table_hdu.writeto(output)\n\n-io_registry.register_reader('fits', Table, read_table_fits)\n-io_registry.register_writer('fits', Table, write_table_fits)\n+io_registry.register_reader('fits', Table, read_table_fits, update_docs=False)\n+io_registry.register_writer('fits', Table, write_table_fits, update_docs=False)\n io_registry.register_identifier('fits', Table, is_fits)\n\ncommit ca4b73b3715ae859974fab34633ab8ad3a13f0e4\nAuthor: Michael Seifert <michaelseifert04@yahoo.de>\nDate:   Mon Aug 1 20:59:42 2016 +0200\n\n    added fts and fts.gz to auto-identify in io.registry for astropy.io.fits\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 66c802eaa8..1c97b594b6 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -70,7 +70,8 @@ def is_fits(origin, filepath, fileobj, *args, **kwargs):\n         fileobj.seek(pos)\n         return sig == FITS_SIGNATURE\n     elif filepath is not None:\n-        if filepath.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n+        if filepath.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz',\n+                                      '.fts', '.fts.gz')):\n             return True\n     elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU)):\n         return True\n\ncommit 8a38a9beadefd162ee5e39b06aec7bdf8c9e5069\nAuthor: Evert Rol <evert.rol@gmail.com>\nDate:   Wed Apr 13 17:32:52 2016 +1000\n\n    Add function to convert a table to a single HDU\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 6a53e33a92..66c802eaa8 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n--\n+++ b/astropy/io/fits/connect.py\n@@ -47,7 +47,7 @@ def is_column_keyword(keyword):\n     return False\n\n\n-def is_fits(origin, path, fileobj, *args, **kwargs):\n+def is_fits(origin, filepath, fileobj, *args, **kwargs):\n     \"\"\"\n     Determine whether `origin` is a FITS file.\n\n@@ -66,8 +66,8 @@ def is_fits(origin, path, fileobj, *args, **kwargs):\n         sig = fileobj.read(30)\n         fileobj.seek(pos)\n         return sig == FITS_SIGNATURE\n-    elif path is not None:\n-        if path.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n+    elif filepath is not None:\n+        if filepath.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n             return True\n     elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU)):\n         return True\n\ncommit 0e82fdc12f88914226e05283cc1e458dd85101fd\nAuthor: Michael Droettboom <mdboom@gmail.com>\nDate:   Tue May 21 18:37:10 2013 -0400\n\n    Fix #1117: Fix the double download problem (again) when identifying the file type.  Also gracefully handle invalid units in a FITS file.\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex d4a674bf7e..65111dc998 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -47,7 +47,7 @@ def is_column_keyword(keyword):\n     return False\n\n\n-def is_fits(origin, *args, **kwargs):\n+def is_fits(origin, path, fileobj, *args, **kwargs):\n     \"\"\"\n     Determine whether `origin` is a FITS file.\n\n@@ -61,18 +61,14 @@ def is_fits(origin, *args, **kwargs):\n     is_fits : bool\n         Returns `True` if the given file is a FITS file.\n     \"\"\"\n-    if isinstance(args[0], basestring):\n-        if args[0].lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n-            return True\n-        elif origin == 'read':\n-            with open(args[0], 'rb') as f:\n-                sig = f.read(30)\n-            return sig == FITS_SIGNATURE\n-    elif hasattr(args[0], 'read'):\n-        pos = args[0].tell()\n-        sig = args[0].read(30)\n-        args[0].seek(pos)\n+    if fileobj is not None:\n+        pos = fileobj.tell()\n+        sig = fileobj.read(30)\n+        fileobj.seek(pos)\n         return sig == FITS_SIGNATURE\n+    elif path is not None:\n+        if path.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n--\n-from . import HDUList, TableHDU, BinTableHDU\n+from . import HDUList, TableHDU, BinTableHDU, GroupsHDU\n from .hdu.hdulist import fitsopen as fits_open\n\n\n@@ -72,7 +72,7 @@ def is_fits(origin, *args, **kwargs):\n         sig = args[0].read(30)\n         args[0].seek(pos)\n         return sig == FITS_SIGNATURE\n-    elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU)):\n+    elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU)):\n         return True\n     else:\n         return False\n@@ -84,10 +84,11 @@ def read_table_fits(input, hdu=None):\n\n     Parameters\n     ----------\n-    input : str or fileobj or `~astropy.io.fits.hdu.table.TableHDU` or `~astropy.io.fits.hdu.table.BinTableHDU` or `~astropy.io.fits.hdu.hdulist.HDUList`\n+    input : str or fileobj or `~astropy.io.fits.hdu.table.TableHDU` or `~astropy.io.fits.hdu.table.BinTableHDU` or `~astropy.io.fits.hdu.table.GroupsHDU` or `~astropy.io.fits.hdu.hdulist.HDUList`\n         If a string, the filename to read the table from. If a file object, or\n         a :class:`~astropy.io.fits.hdu.table.TableHDU` or\n         :class:`~astropy.io.fits.hdu.table.BinTableHDU` or\n+        :class:`~astropy.io.fits.hdu.table.GroupsHDU` or\n         :class:`~astropy.io.fits.hdu.hdulist.HDUList` instance, the object to\n         extract the table from.\n--\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 55c73db72d..f1c484c795 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -62,7 +62,7 @@ def is_fits(origin, *args, **kwargs):\n     if isinstance(args[0], basestring):\n         if args[0].lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n             return True\n-        else:\n+        elif origin == 'read':\n             with open(args[0], 'rb') as f:\n                 sig = f.read(30)\n             return sig == FITS_SIGNATURE\n@@ -123,6 +123,14 @@ def read_table_fits(input, hdu=None):\n         else:\n             raise ValueError(\"No table found\")\n\n+    elif isinstance(input, (TableHDU, BinTableHDU)):\n+\n+        table = input\n+\n+    else:\n+\n+        raise ValueError(\"Input should be a string, an HDUList object, or a TableHDU instance or BinTableHDU instance\")\n+\n--\n-from . import open as fits_open\n+from .hdu.hdulist import fitsopen as fits_open\n\n\n # FITS file signature as per RFC 4047\n@@ -71,7 +72,7 @@ def is_fits(origin, *args, **kwargs):\n         return False\n\n\n-def read_table_fits(input, hdu_id=None):\n+def read_table_fits(input, hdu=None):\n     \"\"\"\n     Read a Table object from an FITS file\n\n@@ -83,8 +84,8 @@ def read_table_fits(input, hdu_id=None):\n         :class:`~astropy.io.fits.hdu.table.BinTableHDU` or\n         :class:`~astropy.io.fits.hdu.hdulist.HDUList` instance, the object to\n         extract the table from.\n-    hdu_id : str, optional\n-        The HDU to read the table from\n+    hdu : int or str, optional\n+        The HDU to read the table from.\n     \"\"\"\n\n     if isinstance(input, basestring):\n@@ -93,22 +94,25 @@ def read_table_fits(input, hdu_id=None):\n--\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 5e67d932d1..a84901320d 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -57,9 +57,8 @@ def is_fits(origin, *args, **kwargs):\n         if args[0].lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n             return True\n         else:\n-            f = open(args[0], 'rb')\n-            sig = f.read(30)\n-            f.close()\n+            with open(args[0], 'rb') as f:\n+                sig = f.read(30)\n             return sig == FITS_SIGNATURE\n     elif hasattr(args[0], 'read'):\n         pos = args[0].tell()\n\ncommit 34813b75fb5703f72ddaa277bfb74e28aaa783af\nAuthor: Thomas Robitaille <thomas.robitaille@gmail.com>\nDate:   Wed Apr 17 21:42:42 2013 +0200\n\n    Use *args, **kwargs for identifier functions instead of args, kwargs, since the former is more standard. This will break backward-compatibility with existing user-written identifiers.\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex 98adf39e2e..5e67d932d1 100644\n--\n+++ b/astropy/io/fits/connect.py\n@@ -39,7 +39,7 @@ def is_column_keyword(keyword):\n     return False\n\n\n-def is_fits(origin, args, kwargs):\n+def is_fits(origin, *args, **kwargs):\n     \"\"\"\n     Determine whether `origin` is a FITS file.\n\n\ncommit 294590487239a9b200157e579b15b4c5269dda94\nAuthor: Thomas Robitaille <thomas.robitaille@gmail.com>\nDate:   Tue Mar 26 23:55:56 2013 +0100\n\n    Remove certain keywords, and move others to column-specific meta-data\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nindex f55494c9a1..98adf39e2e 100644\n--- a/astropy/io/fits/connect.py\n+++ b/astropy/io/fits/connect.py\n@@ -3,6 +3,7 @@\n from __future__ import print_function\n\n import os\n+import re\n\n--\n+        if re.match(c, keyword) is not None:\n+            return True\n+    return False\n+\n\n def is_fits(origin, args, kwargs):\n     \"\"\"\n@@ -115,11 +135,22 @@ def read_table_fits(input, hdu_id=None):\n             else:\n                 t.meta[key] = [t.meta[key], value]\n\n+        elif is_column_keyword(key):\n+\n+            # TODO: remove column keywords that aren't needed\n+\n+            column_id = int(key[5:]) - 1\n+            t.columns[t.colnames[column_id]].meta[key] = value\n+\n+        elif key in REMOVE_KEYWORDS:\n+\n+            pass\n+\n         else:\n\n             t.meta[key] = value\n\n--\n+FITS_SIGNATURE = (b\"\\x53\\x49\\x4d\\x50\\x4c\\x45\\x20\\x20\\x3d\\x20\\x20\\x20\\x20\\x20\"\n+                  b\"\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\"\n+                  b\"\\x20\\x54\")\n+\n+\n def is_fits(origin, args, kwargs):\n     \"\"\"\n     Determine whether `origin` is a FITS file.\n@@ -24,29 +32,41 @@ def is_fits(origin, args, kwargs):\n     is_fits : bool\n         Returns `True` if the given file is a FITS file.\n     \"\"\"\n-    if isinstance(origin, basestring):\n-        if origin.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n+    if isinstance(args[0], basestring):\n+        if args[0].lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n             return True\n         else:\n-            return False\n+            f = open(args[0], 'rb')\n+            sig = f.read(30)\n+            f.close()\n+            return sig == FITS_SIGNATURE\n+    elif hasattr(args[0], 'read'):\n+        pos = args[0].tell()\n+        sig = args[0].read(30)\n+        args[0].seek(pos)\n+        return sig == FITS_SIGNATURE\n+    elif isinstance(args[0], (HDUList, TableHDU, BinTableHDU)):\n+        return True\n--\n+    # TODO: write out metadata\n+\n\n-io_registry.register_reader('fits', read_table_fits)\n-io_registry.register_writer('fits', write_table_fits)\n-io_registry.register_identifier('fits', is_fits)\n+io_registry.register_reader('fits', Table, read_table_fits)\n+io_registry.register_writer('fits', Table, write_table_fits)\n+io_registry.register_identifier('fits', Table, is_fits)\n\ncommit f7aced30f6abfddd3a779ce3e2b5a236edd12814\nAuthor: Thomas Robitaille <thomas.robitaille@gmail.com>\nDate:   Wed Dec 12 09:24:49 2012 +0100\n\n    Initial Table interface for astropy.io.fits\n\ndiff --git a/astropy/io/fits/connect.py b/astropy/io/fits/connect.py\nnew file mode 100644\nindex 0000000000..0b27610029\n--- /dev/null\n+++ b/astropy/io/fits/connect.py\n@@ -0,0 +1,111 @@\n+# Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n+from __future__ import print_function\n+\n+import os\n+\n+from ...utils import OrderedDict\n+from ...table import io_registry, Table\n+from . import HDUList, TableHDU, BinTableHDU\n+from . import open as fits_open\n+\n+\n+def is_fits(origin, args, kwargs):\n+    \"\"\"\n+    Determine whether `origin` is a FITS file.\n+\n+    Parameters\n+    ----------\n+    origin : str or readable file-like object\n+        Path or file object containing a potential FITS file.\n+\n+    Returns\n+    -------\n+    is_fits : bool\n+        Returns `True` if the given file is a FITS file.\n+    \"\"\"\n+    if isinstance(origin, basestring):\n+        if origin.lower().endswith(('.fits', '.fits.gz', '.fit', '.fit.gz')):\n+            return True\n+        else:\n+            return False\n+    else:\n+        return False\n+\n+def read_table_fits(input, hdu_id=None):\n+    \"\"\"\n+    Read a Table object from an FITS file\n+\n+    Parameters\n+    ----------\n+    input : str or `~astropy.io.fits.hdu.table.TableHDU` or `~astropy.io.fits.hdu.table.BinTableHDU` or `~astropy.io.fits.hdu.hdulist.HDUList`\n+        If a string, the filename to read the table from. If a\n+        :class:`~astropy.io.fits.hdu.table.TableHDU` or\n+        :class:`~astropy.io.fits.hdu.table.BinTableHDU` or\n--\n+    table_hdu.writeto(output)\n+\n+\n+io_registry.register_reader('fits', read_table_fits)\n+io_registry.register_writer('fits', write_table_fits)\n+io_registry.register_identifier('fits', is_fits)", "command": "cd /tmp/tmp3xm1sm4z/astropy && git log -p --follow astropy/io/fits/connect.py | grep -A 20 -B 5 \"is_fits\"", "error": false, "timeout": false, "metadata": {"exit_code": 0, "pid": -1, "username": "juan-all-hands", "hostname": "juan-dev", "working_dir": "/tmp/tmp3xm1sm4z/astropy", "py_interpreter_path": "/home/juan-all-hands/v1/benchmarks/.venv/bin/python", "prefix": "", "suffix": "\n[The command completed with exit code 0.]"}}, "action_id": "faf137b5-e092-4e6c-a40a-fdedc0fe4b97"}