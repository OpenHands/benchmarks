{"kind": "ObservationEvent", "id": "d69ba31d-843b-4d74-8b52-470df5272c35", "timestamp": "2025-09-25T11:23:08.511001", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01SyWo38Vmkxwnpfow3mU9Hb", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/tmp3xm1sm4z/astropy/test_comprehensive.py", "path": "/tmp/tmp3xm1sm4z/astropy/test_comprehensive.py", "prev_exist": false, "new_content": "#!/usr/bin/env python3\n\"\"\"\nComprehensive test of the is_fits fix to ensure all edge cases work correctly.\n\"\"\"\n\ndef test_comprehensive():\n    \"\"\"Test all edge cases for the is_fits function.\"\"\"\n    \n    # Mock the FITS classes for testing\n    class HDUList:\n        pass\n    \n    class TableHDU:\n        pass\n    \n    class BinTableHDU:\n        pass\n    \n    class GroupsHDU:\n        pass\n    \n    # Mock FITS_SIGNATURE\n    FITS_SIGNATURE = (b\"\\x53\\x49\\x4d\\x50\\x4c\\x45\\x20\\x20\\x3d\\x20\\x20\\x20\\x20\\x20\"\n                      b\"\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\\x20\"\n                      b\"\\x20\\x54\")\n    \n    # Mock file object\n    class MockFileObj:\n        def __init__(self, signature):\n            self.signature = signature\n            self.pos = 0\n        \n        def tell(self):\n            return self.pos\n        \n        def read(self, n):\n            return self.signature\n        \n        def seek(self, pos):\n            self.pos = pos\n    \n    # This is our fixed version\n    def is_fits_fixed(origin, filepath, fileobj, *args, **kwargs):\n        \"\"\"Fixed version that handles empty args.\"\"\"\n        if fileobj is not None:\n            pos = fileobj.tell()\n            sig = fileobj.read(30)\n            fileobj.seek(pos)\n            return sig == FITS_SIGNATURE\n        elif filepath is not None:\n            if filepath.lower().endswith(\n                (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n            ):\n                return True\n        return bool(args) and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n    \n    print(\"Comprehensive test of is_fits function...\")\n    print(\"=\" * 50)\n    \n    # Test cases: (origin, filepath, fileobj, args, expected, description)\n    test_cases = [\n        # File object tests\n        (\"read\", None, MockFileObj(FITS_SIGNATURE), (), True, \"Valid FITS signature in fileobj\"),\n        (\"read\", None, MockFileObj(b\"invalid\"), (), False, \"Invalid signature in fileobj\"),\n        \n        # Filepath tests - FITS extensions\n        (\"write\", \"test.fits\", None, (), True, \"FITS extension .fits\"),\n        (\"write\", \"test.fits.gz\", None, (), True, \"FITS extension .fits.gz\"),\n        (\"write\", \"test.fit\", None, (), True, \"FITS extension .fit\"),\n        (\"write\", \"test.fit.gz\", None, (), True, \"FITS extension .fit.gz\"),\n        (\"write\", \"test.fts\", None, (), True, \"FITS extension .fts\"),\n        (\"write\", \"test.fts.gz\", None, (), True, \"FITS extension .fts.gz\"),\n        (\"write\", \"TEST.FITS\", None, (), True, \"FITS extension uppercase\"),\n        \n        # Filepath tests - Non-FITS extensions\n        (\"write\", \"test.ecsv\", None, (), False, \"Non-FITS extension, empty args\"),\n        (\"write\", \"test.csv\", None, (), False, \"Non-FITS extension .csv\"),\n        (\"write\", \"test.txt\", None, (), False, \"Non-FITS extension .txt\"),\n        (\"write\", \"test\", None, (), False, \"No extension\"),\n        \n        # Args tests with non-FITS extensions\n        (\"write\", \"test.ecsv\", None, (HDUList(),), True, \"HDUList in args\"),\n        (\"write\", \"test.ecsv\", None, (TableHDU(),), True, \"TableHDU in args\"),\n        (\"write\", \"test.ecsv\", None, (BinTableHDU(),), True, \"BinTableHDU in args\"),\n        (\"write\", \"test.ecsv\", None, (GroupsHDU(),), True, \"GroupsHDU in args\"),\n        (\"write\", \"test.ecsv\", None, (\"not_hdu\",), False, \"Non-HDU object in args\"),\n        (\"write\", \"test.ecsv\", None, (None,), False, \"None in args\"),\n        (\"write\", \"test.ecsv\", None, (42,), False, \"Integer in args\"),\n        \n        # Edge cases\n        (\"write\", None, None, (), False, \"All None/empty\"),\n        (\"write\", \"\", None, (), False, \"Empty filepath\"),\n        (\"write\", \"test.ecsv\", None, (HDUList(), \"extra\"), True, \"Multiple args, first is HDU\"),\n        (\"write\", \"test.ecsv\", None, (\"not_hdu\", HDUList()), False, \"Multiple args, first is not HDU\"),\n        \n        # Precedence tests (fileobj takes precedence over filepath)\n        (\"read\", \"test.ecsv\", MockFileObj(FITS_SIGNATURE), (), True, \"fileobj overrides non-FITS filepath\"),\n        (\"read\", \"test.fits\", MockFileObj(b\"invalid\"), (), False, \"fileobj overrides FITS filepath\"),\n    ]\n    \n    passed = 0\n    failed = 0\n    \n    for i, (origin, filepath, fileobj, args, expected, description) in enumerate(test_cases, 1):\n        print(f\"\\nTest {i:2d}: {description}\")\n        print(f\"         Args: origin='{origin}', filepath='{filepath}', fileobj={type(fileobj).__name__ if fileobj else None}, args={len(args)} items\")\n        \n        try:\n            result = is_fits_fixed(origin, filepath, fileobj, *args)\n            if result == expected:\n                print(f\"         \u2713 PASS: {result}\")\n                passed += 1\n            else:\n                print(f\"         \u2717 FAIL: Expected {expected}, got {result}\")\n                failed += 1\n        except Exception as e:\n            print(f\"         \u2717 ERROR: {type(e).__name__}: {e}\")\n            failed += 1\n    \n    print(\"\\n\" + \"=\" * 50)\n    print(f\"Results: {passed} passed, {failed} failed\")\n    \n    if failed == 0:\n        print(\"\ud83c\udf89 All tests passed! The fix handles all edge cases correctly.\")\n    else:\n        print(\"\u274c Some tests failed. The fix may need adjustment.\")\n    \n    return failed == 0\n\nif __name__ == \"__main__\":\n    test_comprehensive()"}, "action_id": "d07031ce-bb43-4ab7-89d1-d21daf804a69"}