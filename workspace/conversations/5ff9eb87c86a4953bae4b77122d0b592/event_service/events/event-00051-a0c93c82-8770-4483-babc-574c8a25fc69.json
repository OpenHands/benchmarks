{"kind": "ObservationEvent", "id": "a0c93c82-8770-4483-babc-574c8a25fc69", "timestamp": "2025-09-25T11:22:15.761278", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01QY2iSM6DyPJYZtoRigTZ4g", "observation": {"kind": "StrReplaceEditorObservation", "command": "str_replace", "output": "The file /tmp/tmp3xm1sm4z/astropy/astropy/io/fits/connect.py has been edited. Here's the result of running `cat -n` on a snippet of /tmp/tmp3xm1sm4z/astropy/astropy/io/fits/connect.py:\n    45\t    return re.match(COLUMN_KEYWORD_REGEXP, keyword) is not None\n    46\t\n    47\t\n    48\tdef is_fits(origin, filepath, fileobj, *args, **kwargs):\n    49\t    \"\"\"\n    50\t    Determine whether `origin` is a FITS file.\n    51\t\n    52\t    Parameters\n    53\t    ----------\n    54\t    origin : str or readable file-like\n    55\t        Path or file object containing a potential FITS file.\n    56\t\n    57\t    Returns\n    58\t    -------\n    59\t    is_fits : bool\n    60\t        Returns `True` if the given file is a FITS file.\n    61\t    \"\"\"\n    62\t    if fileobj is not None:\n    63\t        pos = fileobj.tell()\n    64\t        sig = fileobj.read(30)\n    65\t        fileobj.seek(pos)\n    66\t        return sig == FITS_SIGNATURE\n    67\t    elif filepath is not None:\n    68\t        if filepath.lower().endswith(\n    69\t            (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n    70\t        ):\n    71\t            return True\n    72\t    return args and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n    73\t\n    74\t\n    75\tdef _decode_mixins(tbl):\n    76\t    \"\"\"Decode a Table ``tbl`` that has astropy Columns + appropriate meta-data into\n    77\t\nReview the changes and make sure they are as expected. Edit the file again if necessary.", "path": "/tmp/tmp3xm1sm4z/astropy/astropy/io/fits/connect.py", "prev_exist": true, "old_content": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\nimport os\nimport re\nimport warnings\nfrom copy import deepcopy\n\nimport numpy as np\n\nfrom astropy import units as u\nfrom astropy.io import registry as io_registry\nfrom astropy.table import Column, MaskedColumn, Table, meta, serialize\nfrom astropy.time import Time\nfrom astropy.utils.data_info import serialize_context_as\nfrom astropy.utils.exceptions import AstropyDeprecationWarning, AstropyUserWarning\nfrom astropy.utils.misc import NOT_OVERWRITING_MSG\n\nfrom . import BinTableHDU, GroupsHDU, HDUList, TableHDU\nfrom . import append as fits_append\nfrom .column import KEYWORD_NAMES, _fortran_to_python_format\nfrom .convenience import table_to_hdu\nfrom .hdu.hdulist import FITS_SIGNATURE\nfrom .hdu.hdulist import fitsopen as fits_open\nfrom .util import first\n\n# Keywords to remove for all tables that are read in\nREMOVE_KEYWORDS = [\n    \"XTENSION\",\n    \"BITPIX\",\n    \"NAXIS\",\n    \"NAXIS1\",\n    \"NAXIS2\",\n    \"PCOUNT\",\n    \"GCOUNT\",\n    \"TFIELDS\",\n    \"THEAP\",\n]\n\n# Column-specific keywords regex\nCOLUMN_KEYWORD_REGEXP = \"(\" + \"|\".join(KEYWORD_NAMES) + \")[0-9]+\"\n\n\ndef is_column_keyword(keyword):\n    return re.match(COLUMN_KEYWORD_REGEXP, keyword) is not None\n\n\ndef is_fits(origin, filepath, fileobj, *args, **kwargs):\n    \"\"\"\n    Determine whether `origin` is a FITS file.\n\n    Parameters\n    ----------\n    origin : str or readable file-like\n        Path or file object containing a potential FITS file.\n\n    Returns\n    -------\n    is_fits : bool\n        Returns `True` if the given file is a FITS file.\n    \"\"\"\n    if fileobj is not None:\n        pos = fileobj.tell()\n        sig = fileobj.read(30)\n        fileobj.seek(pos)\n        return sig == FITS_SIGNATURE\n    elif filepath is not None:\n        if filepath.lower().endswith(\n            (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n        ):\n            return True\n    return isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n\n\ndef _decode_mixins(tbl):\n    \"\"\"Decode a Table ``tbl`` that has astropy Columns + appropriate meta-data into\n    the corresponding table with mixin columns (as appropriate).\n    \"\"\"\n    # If available read in __serialized_columns__ meta info which is stored\n    # in FITS COMMENTS between two sentinels.\n    try:\n        i0 = tbl.meta[\"comments\"].index(\"--BEGIN-ASTROPY-SERIALIZED-COLUMNS--\")\n        i1 = tbl.meta[\"comments\"].index(\"--END-ASTROPY-SERIALIZED-COLUMNS--\")\n    except (ValueError, KeyError):\n        return tbl\n\n    # The YAML data are split into COMMENT cards, with lines longer than 70\n    # characters being split with a continuation character \\ (backslash).\n    # Strip the backslashes and join together.\n    continuation_line = False\n    lines = []\n    for line in tbl.meta[\"comments\"][i0 + 1 : i1]:\n        if continuation_line:\n            lines[-1] = lines[-1] + line[:70]\n        else:\n            lines.append(line[:70])\n        continuation_line = len(line) == 71\n\n    del tbl.meta[\"comments\"][i0 : i1 + 1]\n    if not tbl.meta[\"comments\"]:\n        del tbl.meta[\"comments\"]\n\n    info = meta.get_header_from_yaml(lines)\n\n    # Add serialized column information to table meta for use in constructing mixins\n    tbl.meta[\"__serialized_columns__\"] = info[\"meta\"][\"__serialized_columns__\"]\n\n    # Use the `datatype` attribute info to update column attributes that are\n    # NOT already handled via standard FITS column keys (name, dtype, unit).\n    for col in info[\"datatype\"]:\n        for attr in [\"description\", \"meta\"]:\n            if attr in col:\n                setattr(tbl[col[\"name\"]].info, attr, col[attr])\n\n    # Construct new table with mixins, using tbl.meta['__serialized_columns__']\n    # as guidance.\n    tbl = serialize._construct_mixins_from_columns(tbl)\n\n    return tbl\n\n\ndef read_table_fits(\n    input,\n    hdu=None,\n    astropy_native=False,\n    memmap=False,\n    character_as_bytes=True,\n    unit_parse_strict=\"warn\",\n    mask_invalid=True,\n):\n    \"\"\"\n    Read a Table object from an FITS file.\n\n    If the ``astropy_native`` argument is ``True``, then input FITS columns\n    which are representations of an astropy core object will be converted to\n    that class and stored in the ``Table`` as \"mixin columns\".  Currently this\n    is limited to FITS columns which adhere to the FITS Time standard, in which\n    case they will be converted to a `~astropy.time.Time` column in the output\n    table.\n\n    Parameters\n    ----------\n    input : str or file-like or compatible `astropy.io.fits` HDU object\n        If a string, the filename to read the table from. If a file object, or\n        a compatible HDU object, the object to extract the table from. The\n        following `astropy.io.fits` HDU objects can be used as input:\n        - :class:`~astropy.io.fits.hdu.table.TableHDU`\n        - :class:`~astropy.io.fits.hdu.table.BinTableHDU`\n        - :class:`~astropy.io.fits.hdu.table.GroupsHDU`\n        - :class:`~astropy.io.fits.hdu.hdulist.HDUList`\n    hdu : int or str, optional\n        The HDU to read the table from.\n    astropy_native : bool, optional\n        Read in FITS columns as native astropy objects where possible instead\n        of standard Table Column objects. Default is False.\n    memmap : bool, optional\n        Whether to use memory mapping, which accesses data on disk as needed. If\n        you are only accessing part of the data, this is often more efficient.\n        If you want to access all the values in the table, and you are able to\n        fit the table in memory, you may be better off leaving memory mapping\n        off. However, if your table would not fit in memory, you should set this\n        to `True`.\n        When set to `True` then ``mask_invalid`` is set to `False` since the\n        masking would cause loading the full data array.\n    character_as_bytes : bool, optional\n        If `True`, string columns are stored as Numpy byte arrays (dtype ``S``)\n        and are converted on-the-fly to unicode strings when accessing\n        individual elements. If you need to use Numpy unicode arrays (dtype\n        ``U``) internally, you should set this to `False`, but note that this\n        will use more memory. If set to `False`, string columns will not be\n        memory-mapped even if ``memmap`` is `True`.\n    unit_parse_strict : str, optional\n        Behaviour when encountering invalid column units in the FITS header.\n        Default is \"warn\", which will emit a ``UnitsWarning`` and create a\n        :class:`~astropy.units.core.UnrecognizedUnit`.\n        Values are the ones allowed by the ``parse_strict`` argument of\n        :class:`~astropy.units.core.Unit`: ``raise``, ``warn`` and ``silent``.\n    mask_invalid : bool, optional\n        By default the code masks NaNs in float columns and empty strings in\n        string columns. Set this parameter to `False` to avoid the performance\n        penalty of doing this masking step. The masking is always deactivated\n        when using ``memmap=True`` (see above).\n\n    \"\"\"\n    if isinstance(input, HDUList):\n        # Parse all table objects\n        tables = dict()\n        for ihdu, hdu_item in enumerate(input):\n            if isinstance(hdu_item, (TableHDU, BinTableHDU, GroupsHDU)):\n                tables[ihdu] = hdu_item\n\n        if len(tables) > 1:\n            if hdu is None:\n                warnings.warn(\n                    \"hdu= was not specified but multiple tables\"\n                    \" are present, reading in first available\"\n                    f\" table (hdu={first(tables)})\",\n                    AstropyUserWarning,\n                )\n                hdu = first(tables)\n\n            # hdu might not be an integer, so we first need to convert it\n            # to the correct HDU index\n            hdu = input.index_of(hdu)\n\n            if hdu in tables:\n                table = tables[hdu]\n            else:\n                raise ValueError(f\"No table found in hdu={hdu}\")\n\n        elif len(tables) == 1:\n            if hdu is not None:\n                msg = None\n                try:\n                    hdi = input.index_of(hdu)\n                except KeyError:\n                    msg = f\"Specified hdu={hdu} not found\"\n                else:\n                    if hdi >= len(input):\n                        msg = f\"Specified hdu={hdu} not found\"\n                    elif hdi not in tables:\n                        msg = f\"No table found in specified hdu={hdu}\"\n                if msg is not None:\n                    warnings.warn(\n                        f\"{msg}, reading in first available table \"\n                        f\"(hdu={first(tables)}) instead. This will\"\n                        \" result in an error in future versions!\",\n                        AstropyDeprecationWarning,\n                    )\n            table = tables[first(tables)]\n\n        else:\n            raise ValueError(\"No table found\")\n\n    elif isinstance(input, (TableHDU, BinTableHDU, GroupsHDU)):\n        table = input\n\n    else:\n        if memmap:\n            # using memmap is not compatible with masking invalid value by\n            # default so we deactivate the masking\n            mask_invalid = False\n\n        hdulist = fits_open(input, character_as_bytes=character_as_bytes, memmap=memmap)\n\n        try:\n            return read_table_fits(\n                hdulist,\n                hdu=hdu,\n                astropy_native=astropy_native,\n                unit_parse_strict=unit_parse_strict,\n                mask_invalid=mask_invalid,\n            )\n        finally:\n            hdulist.close()\n\n    # In the loop below we access the data using data[col.name] rather than\n    # col.array to make sure that the data is scaled correctly if needed.\n    data = table.data\n\n    columns = []\n    for col in data.columns:\n        # Check if column is masked. Here, we make a guess based on the\n        # presence of FITS mask values. For integer columns, this is simply\n        # the null header, for float and complex, the presence of NaN, and for\n        # string, empty strings.\n        # Since Multi-element columns with dtypes such as '2f8' have a subdtype,\n        # we should look up the type of column on that.\n        masked = mask = False\n        coltype = col.dtype.subdtype[0].type if col.dtype.subdtype else col.dtype.type\n        if col.null is not None:\n            mask = data[col.name] == col.null\n            # Return a MaskedColumn even if no elements are masked so\n            # we roundtrip better.\n            masked = True\n        elif mask_invalid and issubclass(coltype, np.inexact):\n            mask = np.isnan(data[col.name])\n        elif mask_invalid and issubclass(coltype, np.character):\n            mask = col.array == b\"\"\n\n        if masked or np.any(mask):\n            column = MaskedColumn(\n                data=data[col.name], name=col.name, mask=mask, copy=False\n            )\n        else:\n            column = Column(data=data[col.name], name=col.name, copy=False)\n\n        # Copy over units\n        if col.unit is not None:\n            column.unit = u.Unit(\n                col.unit, format=\"fits\", parse_strict=unit_parse_strict\n            )\n\n        # Copy over display format\n        if col.disp is not None:\n            column.format = _fortran_to_python_format(col.disp)\n\n        columns.append(column)\n\n    # Create Table object\n    t = Table(columns, copy=False)\n\n    # TODO: deal properly with unsigned integers\n\n    hdr = table.header\n    if astropy_native:\n        # Avoid circular imports, and also only import if necessary.\n        from .fitstime import fits_to_time\n\n        hdr = fits_to_time(hdr, t)\n\n    for key, value, comment in hdr.cards:\n        if key in [\"COMMENT\", \"HISTORY\"]:\n            # Convert to io.ascii format\n            if key == \"COMMENT\":\n                key = \"comments\"\n\n            if key in t.meta:\n                t.meta[key].append(value)\n            else:\n                t.meta[key] = [value]\n\n        elif key in t.meta:  # key is duplicate\n            if isinstance(t.meta[key], list):\n                t.meta[key].append(value)\n            else:\n                t.meta[key] = [t.meta[key], value]\n\n        elif is_column_keyword(key) or key in REMOVE_KEYWORDS:\n            pass\n\n        else:\n            t.meta[key] = value\n\n    # TODO: implement masking\n\n    # Decode any mixin columns that have been stored as standard Columns.\n    t = _decode_mixins(t)\n\n    return t\n\n\ndef _encode_mixins(tbl):\n    \"\"\"Encode a Table ``tbl`` that may have mixin columns to a Table with only\n    astropy Columns + appropriate meta-data to allow subsequent decoding.\n    \"\"\"\n    # Determine if information will be lost without serializing meta.  This is hardcoded\n    # to the set difference between column info attributes and what FITS can store\n    # natively (name, dtype, unit).  See _get_col_attributes() in table/meta.py for where\n    # this comes from.\n    info_lost = any(\n        any(\n            getattr(col.info, attr, None) not in (None, {})\n            for attr in (\"description\", \"meta\")\n        )\n        for col in tbl.itercols()\n    )\n\n    # Convert the table to one with no mixins, only Column objects.  This adds\n    # meta data which is extracted with meta.get_yaml_from_table.  This ignores\n    # Time-subclass columns and leave them in the table so that the downstream\n    # FITS Time handling does the right thing.\n\n    with serialize_context_as(\"fits\"):\n        encode_tbl = serialize.represent_mixins_as_columns(tbl, exclude_classes=(Time,))\n\n    # If the encoded table is unchanged then there were no mixins.  But if there\n    # is column metadata (format, description, meta) that would be lost, then\n    # still go through the serialized columns machinery.\n    if encode_tbl is tbl and not info_lost:\n        return tbl\n\n    # Copy the meta dict if it was not copied by represent_mixins_as_columns.\n    # We will modify .meta['comments'] below and we do not want to see these\n    # comments in the input table.\n    if encode_tbl is tbl:\n        meta_copy = deepcopy(tbl.meta)\n        encode_tbl = Table(tbl.columns, meta=meta_copy, copy=False)\n\n    # Get the YAML serialization of information describing the table columns.\n    # This is re-using ECSV code that combined existing table.meta with with\n    # the extra __serialized_columns__ key.  For FITS the table.meta is handled\n    # by the native FITS connect code, so don't include that in the YAML\n    # output.\n    ser_col = \"__serialized_columns__\"\n\n    # encode_tbl might not have a __serialized_columns__ key if there were no mixins,\n    # but machinery below expects it to be available, so just make an empty dict.\n    encode_tbl.meta.setdefault(ser_col, {})\n\n    tbl_meta_copy = encode_tbl.meta.copy()\n    try:\n        encode_tbl.meta = {ser_col: encode_tbl.meta[ser_col]}\n        meta_yaml_lines = meta.get_yaml_from_table(encode_tbl)\n    finally:\n        encode_tbl.meta = tbl_meta_copy\n    del encode_tbl.meta[ser_col]\n\n    if \"comments\" not in encode_tbl.meta:\n        encode_tbl.meta[\"comments\"] = []\n    encode_tbl.meta[\"comments\"].append(\"--BEGIN-ASTROPY-SERIALIZED-COLUMNS--\")\n\n    for line in meta_yaml_lines:\n        if len(line) == 0:\n            lines = [\"\"]\n        else:\n            # Split line into 70 character chunks for COMMENT cards\n            idxs = list(range(0, len(line) + 70, 70))\n            lines = [line[i0:i1] + \"\\\\\" for i0, i1 in zip(idxs[:-1], idxs[1:])]\n            lines[-1] = lines[-1][:-1]\n        encode_tbl.meta[\"comments\"].extend(lines)\n\n    encode_tbl.meta[\"comments\"].append(\"--END-ASTROPY-SERIALIZED-COLUMNS--\")\n\n    return encode_tbl\n\n\ndef write_table_fits(input, output, overwrite=False, append=False):\n    \"\"\"\n    Write a Table object to a FITS file.\n\n    Parameters\n    ----------\n    input : Table\n        The table to write out.\n    output : str\n        The filename to write the table to.\n    overwrite : bool\n        Whether to overwrite any existing file without warning.\n    append : bool\n        Whether to append the table to an existing file\n    \"\"\"\n    # Encode any mixin columns into standard Columns.\n    input = _encode_mixins(input)\n\n    table_hdu = table_to_hdu(input, character_as_bytes=True)\n\n    # Check if output file already exists\n    if isinstance(output, str) and os.path.exists(output):\n        if overwrite:\n            os.remove(output)\n        elif not append:\n            raise OSError(NOT_OVERWRITING_MSG.format(output))\n\n    if append:\n        # verify=False stops it reading and checking the existing file.\n        fits_append(output, table_hdu.data, table_hdu.header, verify=False)\n    else:\n        table_hdu.writeto(output)\n\n\nio_registry.register_reader(\"fits\", Table, read_table_fits)\nio_registry.register_writer(\"fits\", Table, write_table_fits)\nio_registry.register_identifier(\"fits\", Table, is_fits)\n", "new_content": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\n\nimport os\nimport re\nimport warnings\nfrom copy import deepcopy\n\nimport numpy as np\n\nfrom astropy import units as u\nfrom astropy.io import registry as io_registry\nfrom astropy.table import Column, MaskedColumn, Table, meta, serialize\nfrom astropy.time import Time\nfrom astropy.utils.data_info import serialize_context_as\nfrom astropy.utils.exceptions import AstropyDeprecationWarning, AstropyUserWarning\nfrom astropy.utils.misc import NOT_OVERWRITING_MSG\n\nfrom . import BinTableHDU, GroupsHDU, HDUList, TableHDU\nfrom . import append as fits_append\nfrom .column import KEYWORD_NAMES, _fortran_to_python_format\nfrom .convenience import table_to_hdu\nfrom .hdu.hdulist import FITS_SIGNATURE\nfrom .hdu.hdulist import fitsopen as fits_open\nfrom .util import first\n\n# Keywords to remove for all tables that are read in\nREMOVE_KEYWORDS = [\n    \"XTENSION\",\n    \"BITPIX\",\n    \"NAXIS\",\n    \"NAXIS1\",\n    \"NAXIS2\",\n    \"PCOUNT\",\n    \"GCOUNT\",\n    \"TFIELDS\",\n    \"THEAP\",\n]\n\n# Column-specific keywords regex\nCOLUMN_KEYWORD_REGEXP = \"(\" + \"|\".join(KEYWORD_NAMES) + \")[0-9]+\"\n\n\ndef is_column_keyword(keyword):\n    return re.match(COLUMN_KEYWORD_REGEXP, keyword) is not None\n\n\ndef is_fits(origin, filepath, fileobj, *args, **kwargs):\n    \"\"\"\n    Determine whether `origin` is a FITS file.\n\n    Parameters\n    ----------\n    origin : str or readable file-like\n        Path or file object containing a potential FITS file.\n\n    Returns\n    -------\n    is_fits : bool\n        Returns `True` if the given file is a FITS file.\n    \"\"\"\n    if fileobj is not None:\n        pos = fileobj.tell()\n        sig = fileobj.read(30)\n        fileobj.seek(pos)\n        return sig == FITS_SIGNATURE\n    elif filepath is not None:\n        if filepath.lower().endswith(\n            (\".fits\", \".fits.gz\", \".fit\", \".fit.gz\", \".fts\", \".fts.gz\")\n        ):\n            return True\n    return args and isinstance(args[0], (HDUList, TableHDU, BinTableHDU, GroupsHDU))\n\n\ndef _decode_mixins(tbl):\n    \"\"\"Decode a Table ``tbl`` that has astropy Columns + appropriate meta-data into\n    the corresponding table with mixin columns (as appropriate).\n    \"\"\"\n    # If available read in __serialized_columns__ meta info which is stored\n    # in FITS COMMENTS between two sentinels.\n    try:\n        i0 = tbl.meta[\"comments\"].index(\"--BEGIN-ASTROPY-SERIALIZED-COLUMNS--\")\n        i1 = tbl.meta[\"comments\"].index(\"--END-ASTROPY-SERIALIZED-COLUMNS--\")\n    except (ValueError, KeyError):\n        return tbl\n\n    # The YAML data are split into COMMENT cards, with lines longer than 70\n    # characters being split with a continuation character \\ (backslash).\n    # Strip the backslashes and join together.\n    continuation_line = False\n    lines = []\n    for line in tbl.meta[\"comments\"][i0 + 1 : i1]:\n        if continuation_line:\n            lines[-1] = lines[-1] + line[:70]\n        else:\n            lines.append(line[:70])\n        continuation_line = len(line) == 71\n\n    del tbl.meta[\"comments\"][i0 : i1 + 1]\n    if not tbl.meta[\"comments\"]:\n        del tbl.meta[\"comments\"]\n\n    info = meta.get_header_from_yaml(lines)\n\n    # Add serialized column information to table meta for use in constructing mixins\n    tbl.meta[\"__serialized_columns__\"] = info[\"meta\"][\"__serialized_columns__\"]\n\n    # Use the `datatype` attribute info to update column attributes that are\n    # NOT already handled via standard FITS column keys (name, dtype, unit).\n    for col in info[\"datatype\"]:\n        for attr in [\"description\", \"meta\"]:\n            if attr in col:\n                setattr(tbl[col[\"name\"]].info, attr, col[attr])\n\n    # Construct new table with mixins, using tbl.meta['__serialized_columns__']\n    # as guidance.\n    tbl = serialize._construct_mixins_from_columns(tbl)\n\n    return tbl\n\n\ndef read_table_fits(\n    input,\n    hdu=None,\n    astropy_native=False,\n    memmap=False,\n    character_as_bytes=True,\n    unit_parse_strict=\"warn\",\n    mask_invalid=True,\n):\n    \"\"\"\n    Read a Table object from an FITS file.\n\n    If the ``astropy_native`` argument is ``True``, then input FITS columns\n    which are representations of an astropy core object will be converted to\n    that class and stored in the ``Table`` as \"mixin columns\".  Currently this\n    is limited to FITS columns which adhere to the FITS Time standard, in which\n    case they will be converted to a `~astropy.time.Time` column in the output\n    table.\n\n    Parameters\n    ----------\n    input : str or file-like or compatible `astropy.io.fits` HDU object\n        If a string, the filename to read the table from. If a file object, or\n        a compatible HDU object, the object to extract the table from. The\n        following `astropy.io.fits` HDU objects can be used as input:\n        - :class:`~astropy.io.fits.hdu.table.TableHDU`\n        - :class:`~astropy.io.fits.hdu.table.BinTableHDU`\n        - :class:`~astropy.io.fits.hdu.table.GroupsHDU`\n        - :class:`~astropy.io.fits.hdu.hdulist.HDUList`\n    hdu : int or str, optional\n        The HDU to read the table from.\n    astropy_native : bool, optional\n        Read in FITS columns as native astropy objects where possible instead\n        of standard Table Column objects. Default is False.\n    memmap : bool, optional\n        Whether to use memory mapping, which accesses data on disk as needed. If\n        you are only accessing part of the data, this is often more efficient.\n        If you want to access all the values in the table, and you are able to\n        fit the table in memory, you may be better off leaving memory mapping\n        off. However, if your table would not fit in memory, you should set this\n        to `True`.\n        When set to `True` then ``mask_invalid`` is set to `False` since the\n        masking would cause loading the full data array.\n    character_as_bytes : bool, optional\n        If `True`, string columns are stored as Numpy byte arrays (dtype ``S``)\n        and are converted on-the-fly to unicode strings when accessing\n        individual elements. If you need to use Numpy unicode arrays (dtype\n        ``U``) internally, you should set this to `False`, but note that this\n        will use more memory. If set to `False`, string columns will not be\n        memory-mapped even if ``memmap`` is `True`.\n    unit_parse_strict : str, optional\n        Behaviour when encountering invalid column units in the FITS header.\n        Default is \"warn\", which will emit a ``UnitsWarning`` and create a\n        :class:`~astropy.units.core.UnrecognizedUnit`.\n        Values are the ones allowed by the ``parse_strict`` argument of\n        :class:`~astropy.units.core.Unit`: ``raise``, ``warn`` and ``silent``.\n    mask_invalid : bool, optional\n        By default the code masks NaNs in float columns and empty strings in\n        string columns. Set this parameter to `False` to avoid the performance\n        penalty of doing this masking step. The masking is always deactivated\n        when using ``memmap=True`` (see above).\n\n    \"\"\"\n    if isinstance(input, HDUList):\n        # Parse all table objects\n        tables = dict()\n        for ihdu, hdu_item in enumerate(input):\n            if isinstance(hdu_item, (TableHDU, BinTableHDU, GroupsHDU)):\n                tables[ihdu] = hdu_item\n\n        if len(tables) > 1:\n            if hdu is None:\n                warnings.warn(\n                    \"hdu= was not specified but multiple tables\"\n                    \" are present, reading in first available\"\n                    f\" table (hdu={first(tables)})\",\n                    AstropyUserWarning,\n                )\n                hdu = first(tables)\n\n            # hdu might not be an integer, so we first need to convert it\n            # to the correct HDU index\n            hdu = input.index_of(hdu)\n\n            if hdu in tables:\n                table = tables[hdu]\n            else:\n                raise ValueError(f\"No table found in hdu={hdu}\")\n\n        elif len(tables) == 1:\n            if hdu is not None:\n                msg = None\n                try:\n                    hdi = input.index_of(hdu)\n                except KeyError:\n                    msg = f\"Specified hdu={hdu} not found\"\n                else:\n                    if hdi >= len(input):\n                        msg = f\"Specified hdu={hdu} not found\"\n                    elif hdi not in tables:\n                        msg = f\"No table found in specified hdu={hdu}\"\n                if msg is not None:\n                    warnings.warn(\n                        f\"{msg}, reading in first available table \"\n                        f\"(hdu={first(tables)}) instead. This will\"\n                        \" result in an error in future versions!\",\n                        AstropyDeprecationWarning,\n                    )\n            table = tables[first(tables)]\n\n        else:\n            raise ValueError(\"No table found\")\n\n    elif isinstance(input, (TableHDU, BinTableHDU, GroupsHDU)):\n        table = input\n\n    else:\n        if memmap:\n            # using memmap is not compatible with masking invalid value by\n            # default so we deactivate the masking\n            mask_invalid = False\n\n        hdulist = fits_open(input, character_as_bytes=character_as_bytes, memmap=memmap)\n\n        try:\n            return read_table_fits(\n                hdulist,\n                hdu=hdu,\n                astropy_native=astropy_native,\n                unit_parse_strict=unit_parse_strict,\n                mask_invalid=mask_invalid,\n            )\n        finally:\n            hdulist.close()\n\n    # In the loop below we access the data using data[col.name] rather than\n    # col.array to make sure that the data is scaled correctly if needed.\n    data = table.data\n\n    columns = []\n    for col in data.columns:\n        # Check if column is masked. Here, we make a guess based on the\n        # presence of FITS mask values. For integer columns, this is simply\n        # the null header, for float and complex, the presence of NaN, and for\n        # string, empty strings.\n        # Since Multi-element columns with dtypes such as '2f8' have a subdtype,\n        # we should look up the type of column on that.\n        masked = mask = False\n        coltype = col.dtype.subdtype[0].type if col.dtype.subdtype else col.dtype.type\n        if col.null is not None:\n            mask = data[col.name] == col.null\n            # Return a MaskedColumn even if no elements are masked so\n            # we roundtrip better.\n            masked = True\n        elif mask_invalid and issubclass(coltype, np.inexact):\n            mask = np.isnan(data[col.name])\n        elif mask_invalid and issubclass(coltype, np.character):\n            mask = col.array == b\"\"\n\n        if masked or np.any(mask):\n            column = MaskedColumn(\n                data=data[col.name], name=col.name, mask=mask, copy=False\n            )\n        else:\n            column = Column(data=data[col.name], name=col.name, copy=False)\n\n        # Copy over units\n        if col.unit is not None:\n            column.unit = u.Unit(\n                col.unit, format=\"fits\", parse_strict=unit_parse_strict\n            )\n\n        # Copy over display format\n        if col.disp is not None:\n            column.format = _fortran_to_python_format(col.disp)\n\n        columns.append(column)\n\n    # Create Table object\n    t = Table(columns, copy=False)\n\n    # TODO: deal properly with unsigned integers\n\n    hdr = table.header\n    if astropy_native:\n        # Avoid circular imports, and also only import if necessary.\n        from .fitstime import fits_to_time\n\n        hdr = fits_to_time(hdr, t)\n\n    for key, value, comment in hdr.cards:\n        if key in [\"COMMENT\", \"HISTORY\"]:\n            # Convert to io.ascii format\n            if key == \"COMMENT\":\n                key = \"comments\"\n\n            if key in t.meta:\n                t.meta[key].append(value)\n            else:\n                t.meta[key] = [value]\n\n        elif key in t.meta:  # key is duplicate\n            if isinstance(t.meta[key], list):\n                t.meta[key].append(value)\n            else:\n                t.meta[key] = [t.meta[key], value]\n\n        elif is_column_keyword(key) or key in REMOVE_KEYWORDS:\n            pass\n\n        else:\n            t.meta[key] = value\n\n    # TODO: implement masking\n\n    # Decode any mixin columns that have been stored as standard Columns.\n    t = _decode_mixins(t)\n\n    return t\n\n\ndef _encode_mixins(tbl):\n    \"\"\"Encode a Table ``tbl`` that may have mixin columns to a Table with only\n    astropy Columns + appropriate meta-data to allow subsequent decoding.\n    \"\"\"\n    # Determine if information will be lost without serializing meta.  This is hardcoded\n    # to the set difference between column info attributes and what FITS can store\n    # natively (name, dtype, unit).  See _get_col_attributes() in table/meta.py for where\n    # this comes from.\n    info_lost = any(\n        any(\n            getattr(col.info, attr, None) not in (None, {})\n            for attr in (\"description\", \"meta\")\n        )\n        for col in tbl.itercols()\n    )\n\n    # Convert the table to one with no mixins, only Column objects.  This adds\n    # meta data which is extracted with meta.get_yaml_from_table.  This ignores\n    # Time-subclass columns and leave them in the table so that the downstream\n    # FITS Time handling does the right thing.\n\n    with serialize_context_as(\"fits\"):\n        encode_tbl = serialize.represent_mixins_as_columns(tbl, exclude_classes=(Time,))\n\n    # If the encoded table is unchanged then there were no mixins.  But if there\n    # is column metadata (format, description, meta) that would be lost, then\n    # still go through the serialized columns machinery.\n    if encode_tbl is tbl and not info_lost:\n        return tbl\n\n    # Copy the meta dict if it was not copied by represent_mixins_as_columns.\n    # We will modify .meta['comments'] below and we do not want to see these\n    # comments in the input table.\n    if encode_tbl is tbl:\n        meta_copy = deepcopy(tbl.meta)\n        encode_tbl = Table(tbl.columns, meta=meta_copy, copy=False)\n\n    # Get the YAML serialization of information describing the table columns.\n    # This is re-using ECSV code that combined existing table.meta with with\n    # the extra __serialized_columns__ key.  For FITS the table.meta is handled\n    # by the native FITS connect code, so don't include that in the YAML\n    # output.\n    ser_col = \"__serialized_columns__\"\n\n    # encode_tbl might not have a __serialized_columns__ key if there were no mixins,\n    # but machinery below expects it to be available, so just make an empty dict.\n    encode_tbl.meta.setdefault(ser_col, {})\n\n    tbl_meta_copy = encode_tbl.meta.copy()\n    try:\n        encode_tbl.meta = {ser_col: encode_tbl.meta[ser_col]}\n        meta_yaml_lines = meta.get_yaml_from_table(encode_tbl)\n    finally:\n        encode_tbl.meta = tbl_meta_copy\n    del encode_tbl.meta[ser_col]\n\n    if \"comments\" not in encode_tbl.meta:\n        encode_tbl.meta[\"comments\"] = []\n    encode_tbl.meta[\"comments\"].append(\"--BEGIN-ASTROPY-SERIALIZED-COLUMNS--\")\n\n    for line in meta_yaml_lines:\n        if len(line) == 0:\n            lines = [\"\"]\n        else:\n            # Split line into 70 character chunks for COMMENT cards\n            idxs = list(range(0, len(line) + 70, 70))\n            lines = [line[i0:i1] + \"\\\\\" for i0, i1 in zip(idxs[:-1], idxs[1:])]\n            lines[-1] = lines[-1][:-1]\n        encode_tbl.meta[\"comments\"].extend(lines)\n\n    encode_tbl.meta[\"comments\"].append(\"--END-ASTROPY-SERIALIZED-COLUMNS--\")\n\n    return encode_tbl\n\n\ndef write_table_fits(input, output, overwrite=False, append=False):\n    \"\"\"\n    Write a Table object to a FITS file.\n\n    Parameters\n    ----------\n    input : Table\n        The table to write out.\n    output : str\n        The filename to write the table to.\n    overwrite : bool\n        Whether to overwrite any existing file without warning.\n    append : bool\n        Whether to append the table to an existing file\n    \"\"\"\n    # Encode any mixin columns into standard Columns.\n    input = _encode_mixins(input)\n\n    table_hdu = table_to_hdu(input, character_as_bytes=True)\n\n    # Check if output file already exists\n    if isinstance(output, str) and os.path.exists(output):\n        if overwrite:\n            os.remove(output)\n        elif not append:\n            raise OSError(NOT_OVERWRITING_MSG.format(output))\n\n    if append:\n        # verify=False stops it reading and checking the existing file.\n        fits_append(output, table_hdu.data, table_hdu.header, verify=False)\n    else:\n        table_hdu.writeto(output)\n\n\nio_registry.register_reader(\"fits\", Table, read_table_fits)\nio_registry.register_writer(\"fits\", Table, write_table_fits)\nio_registry.register_identifier(\"fits\", Table, is_fits)\n"}, "action_id": "32f60b38-6c60-47e6-bcd5-13ecd0689c6e"}