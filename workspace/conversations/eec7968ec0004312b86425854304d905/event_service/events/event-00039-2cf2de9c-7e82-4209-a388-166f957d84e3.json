{"kind": "ObservationEvent", "id": "2cf2de9c-7e82-4209-a388-166f957d84e3", "timestamp": "2025-09-25T11:21:26.313354", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01EHXggzSzRwn7u1WBd3MaG2", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/tmpfe5scn8o/astropy/reproduce_issue.py", "path": "/tmp/tmpfe5scn8o/astropy/reproduce_issue.py", "prev_exist": false, "new_content": "#!/usr/bin/env python3\n\"\"\"\nScript to reproduce the SlicedLowLevelWCS world_to_pixel issue.\n\"\"\"\n\nimport numpy as np\nimport astropy.wcs\nfrom astropy.coordinates import SkyCoord\nimport astropy.units as u\n\n# Create the WCS as described in the issue\nnx = 100\nny = 25\nnz = 2\nwcs_header = {\n    'WCSAXES': 3,\n    'CRPIX1': (nx + 1)/2,\n    'CRPIX2': (ny + 1)/2,\n    'CRPIX3': 1.0,\n    'PC1_1': 0.0,\n    'PC1_2': -1.0,\n    'PC1_3': 0.0,\n    'PC2_1': 1.0,\n    'PC2_2': 0.0,\n    'PC2_3': -1.0,\n    'CDELT1': 5,\n    'CDELT2': 5,\n    'CDELT3': 0.055,\n    'CUNIT1': 'arcsec',\n    'CUNIT2': 'arcsec',\n    'CUNIT3': 'Angstrom',\n    'CTYPE1': 'HPLN-TAN',\n    'CTYPE2': 'HPLT-TAN',\n    'CTYPE3': 'WAVE',\n    'CRVAL1': 0.0,\n    'CRVAL2': 0.0,\n    'CRVAL3': 1.05,\n}\n\nprint(\"Creating WCS...\")\nfits_wcs = astropy.wcs.WCS(header=wcs_header)\n\nprint(\"WCS created successfully\")\nprint(f\"WCS pixel dimensions: {fits_wcs.pixel_n_dim}\")\nprint(f\"WCS world dimensions: {fits_wcs.world_n_dim}\")\n\n# Create the coordinate point\npt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec, frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))\n\nprint(\"\\n=== Testing unsliced WCS ===\")\nprint(\"Performing world_to_pixel on unsliced WCS...\")\nresult_unsliced = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)\nprint(f\"Unsliced result: {result_unsliced}\")\n\nprint(\"\\n=== Testing sliced WCS ===\")\nprint(\"Creating SlicedLowLevelWCS...\")\nll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)\nhl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)\n\nprint(f\"Sliced WCS pixel dimensions: {ll_sliced_wcs.pixel_n_dim}\")\nprint(f\"Sliced WCS world dimensions: {ll_sliced_wcs.world_n_dim}\")\n\nprint(\"Performing world_to_pixel on sliced WCS...\")\nresult_sliced = hl_sliced_wcs.world_to_pixel(pt)\nprint(f\"Sliced result: {result_sliced}\")\n\nprint(\"\\n=== Comparison ===\")\nprint(f\"Expected first two components from unsliced: ({result_unsliced[0]}, {result_unsliced[1]})\")\nprint(f\"Actual result from sliced: {result_sliced}\")\n\nprint(\"\\n=== Testing pixel_to_world (should work correctly) ===\")\npx, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.Angstrom)\nprint(f\"Pixel coordinates: ({px}, {py}, {pz})\")\n\nprint(\"pixel_to_world on unsliced WCS:\")\nresult_p2w_unsliced = fits_wcs.pixel_to_world(px, py, pz)\nprint(f\"Unsliced pixel_to_world: {result_p2w_unsliced}\")\n\nprint(\"pixel_to_world on sliced WCS:\")\nresult_p2w_sliced = hl_sliced_wcs.pixel_to_world(px, py)\nprint(f\"Sliced pixel_to_world: {result_p2w_sliced}\")\n\nprint(\"\\n=== Debugging information ===\")\nprint(f\"Original WCS axis correlation matrix:\\n{fits_wcs.axis_correlation_matrix}\")\nprint(f\"Sliced WCS axis correlation matrix:\\n{ll_sliced_wcs.axis_correlation_matrix}\")\nprint(f\"Sliced WCS _world_keep: {ll_sliced_wcs._world_keep}\")\nprint(f\"Sliced WCS _pixel_keep: {ll_sliced_wcs._pixel_keep}\")\nprint(f\"Sliced WCS _slices_pixel: {ll_sliced_wcs._slices_pixel}\")"}, "action_id": "fb7639a0-e74b-4237-be32-45b78f1ffcf8"}