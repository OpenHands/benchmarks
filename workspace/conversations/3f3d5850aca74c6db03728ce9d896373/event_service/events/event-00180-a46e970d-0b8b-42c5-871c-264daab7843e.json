{"kind": "ObservationEvent", "id": "a46e970d-0b8b-42c5-871c-264daab7843e", "timestamp": "2025-09-25T19:09:51.046918", "source": "environment", "tool_name": "execute_bash", "tool_call_id": "toolu_01CP4tiLFf592ZX5uxvzTt7c", "observation": {"kind": "ExecuteBashObservation", "output": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 70cbc3ba1..e820b662f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -27,7 +27,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj)\n+            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n@@ -37,6 +37,19 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         pass\n\n\n+def apply_type_aliases(annotation: str, type_aliases: Dict[str, str]) -> str:\n+    \"\"\"Apply type aliases to a stringified type annotation.\"\"\"\n+    if not type_aliases:\n+        return annotation\n+\n+    # Apply type aliases by replacing the type names\n+    result = annotation\n+    for alias, replacement in type_aliases.items():\n+        result = result.replace(alias, replacement)\n+\n+    return result\n+\n+\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n@@ -63,7 +76,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], app.config.autodoc_type_aliases)\n\n\n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -79,7 +92,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n\n\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str]) -> None:\n     arguments = {}  # type: Dict[str, Dict[str, bool]]\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -111,7 +124,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', apply_type_aliases(annotation, type_aliases)))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n@@ -122,7 +135,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', apply_type_aliases(annotations['return'], type_aliases)))\n         node += field", "command": "cd /tmp/tmpf25j40i4/sphinx && git diff sphinx/ext/autodoc/typehints.py", "error": false, "timeout": false, "metadata": {"exit_code": 0, "pid": -1, "username": "juan-all-hands", "hostname": "juan-dev", "working_dir": "/tmp/tmpf25j40i4/sphinx", "py_interpreter_path": "/home/juan-all-hands/v1/benchmarks/.venv/bin/python", "prefix": "", "suffix": "\n[The command completed with exit code 0.]"}}, "action_id": "9195b1dc-74aa-45c0-b3cd-1623e949971e"}