{"kind": "ObservationEvent", "id": "01149d0d-c0bf-4541-bb82-a9f501523272", "timestamp": "2025-09-26T01:36:13.433165", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01SanFrwUkrBbscLiBRy6Czg", "observation": {"kind": "StrReplaceEditorObservation", "command": "str_replace", "output": "The file /tmp/tmp1_6k5dg_/astropy/astropy/io/fits/tests/test_diff.py has been edited. Here's the result of running `cat -n` on a snippet of /tmp/tmp1_6k5dg_/astropy/astropy/io/fits/tests/test_diff.py:\n   592\t        assert (diff.diff_values[12][1][0] == [2, 3]).all()\n   593\t        assert (diff.diff_values[12][1][1] == [3, 4]).all()\n   594\t\n   595\t        assert diff.diff_total == 13\n   596\t        assert diff.diff_ratio == 0.65\n   597\t\n   598\t        report = diff.report()\n   599\t        assert \"Column A data differs in row 0:\\n    a> True\\n    b> False\" in report\n   600\t        assert \"...and at 1 more indices.\\n Column D data differs in row 0:\" in report\n   601\t        assert \"13 different table data element(s) found (65.00% different)\" in report\n   602\t        assert report.count(\"more indices\") == 1\n   603\t\n   604\t    def test_identical_vla_tables(self):\n   605\t        \"\"\"\n   606\t        Test that identical VLA (variable-length array) tables are correctly\n   607\t        identified as identical. This is a regression test for a bug where\n   608\t        Q format VLA columns were incorrectly reported as different when\n   609\t        comparing a file to itself.\n   610\t        \"\"\"\n   611\t        # Test Q format VLA columns (the original bug case)\n   612\t        col_qd = Column(\"QD_COL\", format=\"QD\", array=[[0.0], [0.0, 0.0]])\n   613\t        col_qi = Column(\"QI_COL\", format=\"QI\", array=[[1], [1, 2]])\n   614\t        col_qe = Column(\"QE_COL\", format=\"QE\", array=[[1.0], [1.0, 2.0]])\n   615\t        \n   616\t        # Test P format VLA columns (should continue to work)\n   617\t        col_pd = Column(\"PD_COL\", format=\"PD()\", array=[[3.0], [3.0, 4.0]])\n   618\t        \n   619\t        # Create table with VLA columns\n   620\t        hdu = BinTableHDU.from_columns([col_qd, col_qi, col_qe, col_pd])\n   621\t        \n   622\t        # Test that identical VLA data is correctly identified as identical\n   623\t        diff = TableDataDiff(hdu.data, hdu.data)\n   624\t        assert diff.identical, \"Identical VLA tables should be reported as identical\"\n   625\t        \n   626\t        # Test with file I/O (the original bug scenario)\n   627\t        hdu.writeto(self.temp(\"vla_test.fits\"))\n   628\t        file_diff = FITSDiff(self.temp(\"vla_test.fits\"), self.temp(\"vla_test.fits\"))\n   629\t        assert file_diff.identical, \"Identical VLA files should be reported as identical\"\n   630\t\n   631\t    def test_identical_files_basic(self):\n   632\t        \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n   633\t\n   634\t        a = np.arange(100).reshape(10, 10)\n   635\t        hdu = PrimaryHDU(data=a)\n   636\t\nReview the changes and make sure they are as expected. Edit the file again if necessary.", "path": "/tmp/tmp1_6k5dg_/astropy/astropy/io/fits/tests/test_diff.py", "prev_exist": true, "old_content": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\nimport numpy as np\nimport pytest\n\nfrom astropy.io import fits\nfrom astropy.io.fits.column import Column\nfrom astropy.io.fits.diff import (\n    FITSDiff,\n    HDUDiff,\n    HeaderDiff,\n    ImageDataDiff,\n    TableDataDiff,\n)\nfrom astropy.io.fits.hdu import HDUList, ImageHDU, PrimaryHDU\nfrom astropy.io.fits.hdu.base import NonstandardExtHDU\nfrom astropy.io.fits.hdu.table import BinTableHDU\nfrom astropy.io.fits.header import Header\nfrom astropy.utils.misc import _NOT_OVERWRITING_MSG_MATCH\n\nfrom .conftest import FitsTestCase\n\n\nclass DummyNonstandardExtHDU(NonstandardExtHDU):\n    def __init__(self, data=None, *args, **kwargs):\n        super().__init__(self, *args, **kwargs)\n        self._buffer = np.asarray(data).tobytes()\n        self._data_offset = 0\n\n    @property\n    def size(self):\n        return len(self._buffer)\n\n\nclass TestDiff(FitsTestCase):\n    def test_identical_headers(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        assert HeaderDiff(ha, hb).identical\n        assert HeaderDiff(ha.tostring(), hb.tostring()).identical\n\n        with pytest.raises(TypeError):\n            HeaderDiff(1, 2)\n\n    def test_slightly_different_headers(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        assert not HeaderDiff(ha, hb).identical\n\n    def test_common_keywords(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        hb[\"D\"] = (5, \"Comment\")\n        assert HeaderDiff(ha, hb).common_keywords == [\"A\", \"B\", \"C\"]\n\n    def test_different_keyword_count(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        del hb[\"B\"]\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_count == (3, 2)\n\n        # But make sure the common keywords are at least correct\n        assert diff.common_keywords == [\"A\", \"C\"]\n\n    def test_different_keywords(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        hb[\"D\"] = (5, \"Comment\")\n        ha[\"E\"] = (6, \"Comment\")\n        ha[\"F\"] = (7, \"Comment\")\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keywords == ([\"E\", \"F\"], [\"D\"])\n\n    def test_different_keyword_values(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(3, 4)]}\n\n    def test_different_keyword_comments(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3, \"comment 1\")])\n        hb = ha.copy()\n        hb.comments[\"C\"] = \"comment 2\"\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_comments == {\"C\": [(\"comment 1\", \"comment 2\")]}\n\n    def test_different_keyword_values_with_duplicate(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        ha.append((\"C\", 4))\n        hb.append((\"C\", 5))\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [None, (4, 5)]}\n\n    def test_asymmetric_duplicate_keywords(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        ha.append((\"A\", 2, \"comment 1\"))\n        ha.append((\"A\", 3, \"comment 2\"))\n        hb.append((\"B\", 4, \"comment 3\"))\n        hb.append((\"C\", 5, \"comment 4\"))\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {}\n        assert diff.diff_duplicate_keywords == {\"A\": (3, 1), \"B\": (1, 2), \"C\": (1, 2)}\n\n        report = diff.report()\n        assert (\n            \"Inconsistent duplicates of keyword 'A'     :\\n\"\n            \"  Occurs 3 time(s) in a, 1 times in (b)\" in report\n        )\n\n    def test_floating_point_rtol(self):\n        ha = Header([(\"A\", 1), (\"B\", 2.00001), (\"C\", 3.000001)])\n        hb = ha.copy()\n        hb[\"B\"] = 2.00002\n        hb[\"C\"] = 3.000002\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\n            \"B\": [(2.00001, 2.00002)],\n            \"C\": [(3.000001, 3.000002)],\n        }\n        diff = HeaderDiff(ha, hb, rtol=1e-6)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"B\": [(2.00001, 2.00002)]}\n        diff = HeaderDiff(ha, hb, rtol=1e-5)\n        assert diff.identical\n\n    def test_floating_point_atol(self):\n        ha = Header([(\"A\", 1), (\"B\", 1.0), (\"C\", 0.0)])\n        hb = ha.copy()\n        hb[\"B\"] = 1.00001\n        hb[\"C\"] = 0.000001\n        diff = HeaderDiff(ha, hb, rtol=1e-6)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\n            \"B\": [(1.0, 1.00001)],\n            \"C\": [(0.0, 0.000001)],\n        }\n        diff = HeaderDiff(ha, hb, rtol=1e-5)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(0.0, 0.000001)]}\n        diff = HeaderDiff(ha, hb, atol=1e-6)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"B\": [(1.0, 1.00001)]}\n        diff = HeaderDiff(ha, hb, atol=1e-5)  # strict inequality\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"B\": [(1.0, 1.00001)]}\n        diff = HeaderDiff(ha, hb, rtol=1e-5, atol=1e-5)\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, atol=1.1e-5)\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, rtol=1e-6, atol=1e-6)\n        assert not diff.identical\n\n    def test_ignore_blanks(self):\n        with fits.conf.set_temp(\"strip_header_whitespace\", False):\n            ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", \"A       \")])\n            hb = ha.copy()\n            hb[\"C\"] = \"A\"\n            assert ha[\"C\"] != hb[\"C\"]\n\n            diff = HeaderDiff(ha, hb)\n            # Trailing blanks are ignored by default\n            assert diff.identical\n            assert diff.diff_keyword_values == {}\n\n            # Don't ignore blanks\n            diff = HeaderDiff(ha, hb, ignore_blanks=False)\n            assert not diff.identical\n            assert diff.diff_keyword_values == {\"C\": [(\"A       \", \"A\")]}\n\n    @pytest.mark.parametrize(\"differ\", [HeaderDiff, HDUDiff, FITSDiff])\n    def test_ignore_blank_cards(self, differ):\n        \"\"\"Test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/152\n\n        Ignore blank cards.\n        \"\"\"\n\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = Header([(\"A\", 1), (\"\", \"\"), (\"B\", 2), (\"\", \"\"), (\"C\", 3)])\n        hc = ha.copy()\n        if differ is HeaderDiff:\n            hc.append()\n            hc.append()\n        else:  # Ensure blanks are not at the end as they are stripped by HDUs\n            hc.add_blank(after=-2)\n            hc.add_blank(after=-2)\n\n        if differ in (HDUDiff, FITSDiff):  # wrap it in a PrimaryHDU\n            ha, hb, hc = (PrimaryHDU(np.arange(10), h) for h in (ha, hb, hc))\n            hc_header = hc.header\n        if differ is FITSDiff:  # wrap it in a HDUList\n            ha, hb, hc = (HDUList([h]) for h in (ha, hb, hc))\n            hc_header = hc[0].header\n\n        # We now have a header with interleaved blanks, and a header with end\n        # blanks, both of which should ignore the blanks\n        assert differ(ha, hb).identical\n        assert differ(ha, hc).identical\n        assert differ(hb, hc).identical\n\n        assert not differ(ha, hb, ignore_blank_cards=False).identical\n        assert not differ(ha, hc, ignore_blank_cards=False).identical\n\n        # Both hb and hc have the same number of blank cards; since order is\n        # currently ignored, these should still be identical even if blank\n        # cards are not ignored\n        assert differ(hb, hc, ignore_blank_cards=False).identical\n\n        if differ is HeaderDiff:\n            hc.append()\n        else:  # Ensure blanks are not at the end as they are stripped by HDUs\n            hc_header.add_blank(after=-2)\n        # But now there are different numbers of blanks, so they should not be\n        # ignored:\n        assert not differ(hb, hc, ignore_blank_cards=False).identical\n\n    def test_ignore_hdus(self):\n        a = np.arange(100).reshape(10, 10)\n        b = a.copy()\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        xa = np.array([(1.0, 1), (3.0, 4)], dtype=[(\"x\", float), (\"y\", int)])\n        xb = np.array([(1.0, 2), (3.0, 5)], dtype=[(\"x\", float), (\"y\", int)])\n        phdu = PrimaryHDU(header=ha)\n        ihdua = ImageHDU(data=a, name=\"SCI\")\n        ihdub = ImageHDU(data=b, name=\"SCI\")\n        bhdu1 = BinTableHDU(data=xa, name=\"ASDF\")\n        bhdu2 = BinTableHDU(data=xb, name=\"ASDF\")\n        hdula = HDUList([phdu, ihdua, bhdu1])\n        hdulb = HDUList([phdu, ihdub, bhdu2])\n\n        # ASDF extension should be different\n        diff = FITSDiff(hdula, hdulb)\n        assert not diff.identical\n        assert diff.diff_hdus[0][0] == 2\n\n        # ASDF extension should be ignored\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"ASDF\"])\n        assert diff.identical, diff.report()\n\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"ASD*\"])\n        assert diff.identical, diff.report()\n\n        # SCI extension should be different\n        hdulb[\"SCI\"].data += 1\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"ASDF\"])\n        assert not diff.identical\n\n        # SCI and ASDF extensions should be ignored\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"SCI\", \"ASDF\"])\n        assert diff.identical, diff.report()\n\n        # All EXTVER of SCI should be ignored\n        ihduc = ImageHDU(data=a, name=\"SCI\", ver=2)\n        hdulb.append(ihduc)\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"SCI\", \"ASDF\"])\n        assert not any(diff.diff_hdus), diff.report()\n        assert any(diff.diff_hdu_count), diff.report()\n\n    def test_ignore_keyword_values(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"B\"] = 4\n        hb[\"C\"] = 5\n        diff = HeaderDiff(ha, hb, ignore_keywords=[\"*\"])\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, ignore_keywords=[\"B\"])\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(3, 5)]}\n\n        report = diff.report()\n        assert \"Keyword B        has different values\" not in report\n        assert \"Keyword C        has different values\" in report\n\n        # Test case-insensitivity\n        diff = HeaderDiff(ha, hb, ignore_keywords=[\"b\"])\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(3, 5)]}\n\n    def test_ignore_keyword_comments(self):\n        ha = Header([(\"A\", 1, \"A\"), (\"B\", 2, \"B\"), (\"C\", 3, \"C\")])\n        hb = ha.copy()\n        hb.comments[\"B\"] = \"D\"\n        hb.comments[\"C\"] = \"E\"\n        diff = HeaderDiff(ha, hb, ignore_comments=[\"*\"])\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, ignore_comments=[\"B\"])\n        assert not diff.identical\n        assert diff.diff_keyword_comments == {\"C\": [(\"C\", \"E\")]}\n\n        report = diff.report()\n        assert \"Keyword B        has different comments\" not in report\n        assert \"Keyword C        has different comments\" in report\n\n        # Test case-insensitivity\n        diff = HeaderDiff(ha, hb, ignore_comments=[\"b\"])\n        assert not diff.identical\n        assert diff.diff_keyword_comments == {\"C\": [(\"C\", \"E\")]}\n\n    def test_trivial_identical_images(self):\n        ia = np.arange(100).reshape(10, 10)\n        ib = np.arange(100).reshape(10, 10)\n        diff = ImageDataDiff(ia, ib)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_identical_within_relative_tolerance(self):\n        ia = np.ones((10, 10)) - 0.00001\n        ib = np.ones((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-4)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_identical_within_absolute_tolerance(self):\n        ia = np.zeros((10, 10)) - 0.00001\n        ib = np.zeros((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-4)\n        assert not diff.identical\n        assert diff.diff_total == 100\n        diff = ImageDataDiff(ia, ib, atol=1.0e-4)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_identical_within_rtol_and_atol(self):\n        ia = np.zeros((10, 10)) - 0.00001\n        ib = np.zeros((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-5, atol=1.0e-5)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_not_identical_within_rtol_and_atol(self):\n        ia = np.zeros((10, 10)) - 0.00001\n        ib = np.zeros((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-5, atol=1.0e-6)\n        assert not diff.identical\n        assert diff.diff_total == 100\n\n    def test_identical_comp_image_hdus(self):\n        \"\"\"Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/189\n\n        For this test we mostly just care that comparing to compressed images\n        does not crash, and returns the correct results.  Two compressed images\n        will be considered identical if the decompressed data is the same.\n        Obviously we test whether or not the same compression was used by\n        looking for (or ignoring) header differences.\n        \"\"\"\n\n        data = np.arange(100.0).reshape(10, 10)\n        hdu = fits.CompImageHDU(data=data)\n        hdu.writeto(self.temp(\"test.fits\"))\n\n        with fits.open(self.temp(\"test.fits\")) as hdula, fits.open(\n            self.temp(\"test.fits\")\n        ) as hdulb:\n            diff = FITSDiff(hdula, hdulb)\n            assert diff.identical\n\n    def test_different_dimensions(self):\n        ia = np.arange(100).reshape(10, 10)\n        ib = np.arange(100) - 1\n\n        # Although ib could be reshaped into the same dimensions, for now the\n        # data is not compared anyways\n        diff = ImageDataDiff(ia, ib)\n        assert not diff.identical\n        assert diff.diff_dimensions == ((10, 10), (100,))\n        assert diff.diff_total == 0\n\n        report = diff.report()\n        assert \"Data dimensions differ\" in report\n        assert \"a: 10 x 10\" in report\n        assert \"b: 100\" in report\n        assert \"No further data comparison performed.\"\n\n    def test_different_pixels(self):\n        ia = np.arange(100).reshape(10, 10)\n        ib = np.arange(100).reshape(10, 10)\n        ib[0, 0] = 10\n        ib[5, 5] = 20\n        diff = ImageDataDiff(ia, ib)\n        assert not diff.identical\n        assert diff.diff_dimensions == ()\n        assert diff.diff_total == 2\n        assert diff.diff_ratio == 0.02\n        assert diff.diff_pixels == [((0, 0), (0, 10)), ((5, 5), (55, 20))]\n\n    def test_identical_tables(self):\n        c1 = Column(\"A\", format=\"L\", array=[True, False])\n        c2 = Column(\"B\", format=\"X\", array=[[0], [1]])\n        c3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [4, 5, 6, 7]])\n        c4 = Column(\"D\", format=\"J\", bscale=2.0, array=[0, 1])\n        c5 = Column(\"E\", format=\"A3\", array=[\"abc\", \"def\"])\n        c6 = Column(\"F\", format=\"E\", unit=\"m\", array=[0.0, 1.0])\n        c7 = Column(\"G\", format=\"D\", bzero=-0.1, array=[0.0, 1.0])\n        c8 = Column(\"H\", format=\"C\", array=[0.0 + 1.0j, 2.0 + 3.0j])\n        c9 = Column(\"I\", format=\"M\", array=[4.0 + 5.0j, 6.0 + 7.0j])\n        c10 = Column(\"J\", format=\"PI(2)\", array=[[0, 1], [2, 3]])\n\n        columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]\n\n        ta = BinTableHDU.from_columns(columns)\n        tb = BinTableHDU.from_columns([c.copy() for c in columns])\n\n        diff = TableDataDiff(ta.data, tb.data)\n        assert diff.identical\n        assert len(diff.common_columns) == 10\n        assert diff.common_column_names == set(\"abcdefghij\")\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n    def test_diff_empty_tables(self):\n        \"\"\"\n        Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n\n        Ensure that diffing tables containing empty data doesn't crash.\n        \"\"\"\n\n        c1 = Column(\"D\", format=\"J\")\n        c2 = Column(\"E\", format=\"J\")\n        thdu = BinTableHDU.from_columns([c1, c2], nrows=0)\n\n        hdula = fits.HDUList([thdu])\n        hdulb = fits.HDUList([thdu])\n\n        diff = FITSDiff(hdula, hdulb)\n        assert diff.identical\n\n    def test_ignore_table_fields(self):\n        c1 = Column(\"A\", format=\"L\", array=[True, False])\n        c2 = Column(\"B\", format=\"X\", array=[[0], [1]])\n        c3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [4, 5, 6, 7]])\n\n        c4 = Column(\"B\", format=\"X\", array=[[1], [0]])\n        c5 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[1, 2, 3, 4], [5, 6, 7, 8]])\n\n        ta = BinTableHDU.from_columns([c1, c2, c3])\n        tb = BinTableHDU.from_columns([c1, c4, c5])\n\n        diff = TableDataDiff(ta.data, tb.data, ignore_fields=[\"B\", \"C\"])\n        assert diff.identical\n\n        # The only common column should be c1\n        assert len(diff.common_columns) == 1\n        assert diff.common_column_names == {\"a\"}\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n    def test_different_table_field_names(self):\n        ca = Column(\"A\", format=\"L\", array=[True, False])\n        cb = Column(\"B\", format=\"L\", array=[True, False])\n        cc = Column(\"C\", format=\"L\", array=[True, False])\n\n        ta = BinTableHDU.from_columns([ca, cb])\n        tb = BinTableHDU.from_columns([ca, cc])\n\n        diff = TableDataDiff(ta.data, tb.data)\n\n        assert not diff.identical\n        assert len(diff.common_columns) == 1\n        assert diff.common_column_names == {\"a\"}\n        assert diff.diff_column_names == ([\"B\"], [\"C\"])\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n        report = diff.report()\n        assert \"Extra column B of format L in a\" in report\n        assert \"Extra column C of format L in b\" in report\n\n    def test_different_table_field_counts(self):\n        \"\"\"\n        Test tables with some common columns, but different number of columns\n        overall.\n        \"\"\"\n\n        ca = Column(\"A\", format=\"L\", array=[True, False])\n        cb = Column(\"B\", format=\"L\", array=[True, False])\n        cc = Column(\"C\", format=\"L\", array=[True, False])\n\n        ta = BinTableHDU.from_columns([cb])\n        tb = BinTableHDU.from_columns([ca, cb, cc])\n\n        diff = TableDataDiff(ta.data, tb.data)\n\n        assert not diff.identical\n        assert diff.diff_column_count == (1, 3)\n        assert len(diff.common_columns) == 1\n        assert diff.common_column_names == {\"b\"}\n        assert diff.diff_column_names == ([], [\"A\", \"C\"])\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n        report = diff.report()\n        assert \" Tables have different number of columns:\" in report\n        assert \"  a: 1\\n  b: 3\" in report\n\n    def test_different_table_rows(self):\n        \"\"\"\n        Test tables that are otherwise identical but one has more rows than the\n        other.\n        \"\"\"\n\n        ca1 = Column(\"A\", format=\"L\", array=[True, False])\n        cb1 = Column(\"B\", format=\"L\", array=[True, False])\n        ca2 = Column(\"A\", format=\"L\", array=[True, False, True])\n        cb2 = Column(\"B\", format=\"L\", array=[True, False, True])\n\n        ta = BinTableHDU.from_columns([ca1, cb1])\n        tb = BinTableHDU.from_columns([ca2, cb2])\n\n        diff = TableDataDiff(ta.data, tb.data)\n\n        assert not diff.identical\n        assert diff.diff_column_count == ()\n        assert len(diff.common_columns) == 2\n        assert diff.diff_rows == (2, 3)\n        assert diff.diff_values == []\n\n        report = diff.report()\n\n        assert \"Table rows differ\" in report\n        assert \"a: 2\" in report\n        assert \"b: 3\" in report\n        assert \"No further data comparison performed.\"\n\n    def test_different_table_data(self):\n        \"\"\"\n        Test diffing table data on columns of several different data formats\n        and dimensions.\n        \"\"\"\n\n        ca1 = Column(\"A\", format=\"L\", array=[True, False])\n        ca2 = Column(\"B\", format=\"X\", array=[[0], [1]])\n        ca3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [4, 5, 6, 7]])\n        ca4 = Column(\"D\", format=\"J\", bscale=2.0, array=[0.0, 2.0])\n        ca5 = Column(\"E\", format=\"A3\", array=[\"abc\", \"def\"])\n        ca6 = Column(\"F\", format=\"E\", unit=\"m\", array=[0.0, 1.0])\n        ca7 = Column(\"G\", format=\"D\", bzero=-0.1, array=[0.0, 1.0])\n        ca8 = Column(\"H\", format=\"C\", array=[0.0 + 1.0j, 2.0 + 3.0j])\n        ca9 = Column(\"I\", format=\"M\", array=[4.0 + 5.0j, 6.0 + 7.0j])\n        ca10 = Column(\"J\", format=\"PI(2)\", array=[[0, 1], [2, 3]])\n\n        cb1 = Column(\"A\", format=\"L\", array=[False, False])\n        cb2 = Column(\"B\", format=\"X\", array=[[0], [0]])\n        cb3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [5, 6, 7, 8]])\n        cb4 = Column(\"D\", format=\"J\", bscale=2.0, array=[2.0, 2.0])\n        cb5 = Column(\"E\", format=\"A3\", array=[\"abc\", \"ghi\"])\n        cb6 = Column(\"F\", format=\"E\", unit=\"m\", array=[1.0, 2.0])\n        cb7 = Column(\"G\", format=\"D\", bzero=-0.1, array=[2.0, 3.0])\n        cb8 = Column(\"H\", format=\"C\", array=[1.0 + 1.0j, 2.0 + 3.0j])\n        cb9 = Column(\"I\", format=\"M\", array=[5.0 + 5.0j, 6.0 + 7.0j])\n        cb10 = Column(\"J\", format=\"PI(2)\", array=[[1, 2], [3, 4]])\n\n        ta = BinTableHDU.from_columns(\n            [ca1, ca2, ca3, ca4, ca5, ca6, ca7, ca8, ca9, ca10]\n        )\n        tb = BinTableHDU.from_columns(\n            [cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10]\n        )\n\n        diff = TableDataDiff(ta.data, tb.data, numdiffs=20)\n        assert not diff.identical\n        # The column definitions are the same, but not the column values\n        assert diff.diff_columns == ()\n        assert diff.diff_values[0] == ((\"A\", 0), (True, False))\n        assert diff.diff_values[1] == ((\"B\", 1), ([1], [0]))\n        assert diff.diff_values[2][0] == (\"C\", 1)\n        assert (diff.diff_values[2][1][0] == [[4, 5], [6, 7]]).all()\n        assert (diff.diff_values[2][1][1] == [[5, 6], [7, 8]]).all()\n        assert diff.diff_values[3] == ((\"D\", 0), (0, 2.0))\n        assert diff.diff_values[4] == ((\"E\", 1), (\"def\", \"ghi\"))\n        assert diff.diff_values[5] == ((\"F\", 0), (0.0, 1.0))\n        assert diff.diff_values[6] == ((\"F\", 1), (1.0, 2.0))\n        assert diff.diff_values[7] == ((\"G\", 0), (0.0, 2.0))\n        assert diff.diff_values[8] == ((\"G\", 1), (1.0, 3.0))\n        assert diff.diff_values[9] == ((\"H\", 0), (0.0 + 1.0j, 1.0 + 1.0j))\n        assert diff.diff_values[10] == ((\"I\", 0), (4.0 + 5.0j, 5.0 + 5.0j))\n        assert diff.diff_values[11][0] == (\"J\", 0)\n        assert (diff.diff_values[11][1][0] == [0, 1]).all()\n        assert (diff.diff_values[11][1][1] == [1, 2]).all()\n        assert diff.diff_values[12][0] == (\"J\", 1)\n        assert (diff.diff_values[12][1][0] == [2, 3]).all()\n        assert (diff.diff_values[12][1][1] == [3, 4]).all()\n\n        assert diff.diff_total == 13\n        assert diff.diff_ratio == 0.65\n\n        report = diff.report()\n        assert \"Column A data differs in row 0:\\n    a> True\\n    b> False\" in report\n        assert \"...and at 1 more indices.\\n Column D data differs in row 0:\" in report\n        assert \"13 different table data element(s) found (65.00% different)\" in report\n        assert report.count(\"more indices\") == 1\n\n    def test_identical_files_basic(self):\n        \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n\n        a = np.arange(100).reshape(10, 10)\n        hdu = PrimaryHDU(data=a)\n        hdu.writeto(self.temp(\"testa.fits\"))\n        hdu.writeto(self.temp(\"testb.fits\"))\n        diff = FITSDiff(self.temp(\"testa.fits\"), self.temp(\"testb.fits\"))\n        assert diff.identical\n\n        report = diff.report()\n        # Primary HDUs should contain no differences\n        assert \"Primary HDU\" not in report\n        assert \"Extension HDU\" not in report\n        assert \"No differences found.\" in report\n\n        a = np.arange(10)\n        ehdu = ImageHDU(data=a)\n        diff = HDUDiff(ehdu, ehdu)\n        assert diff.identical\n        report = diff.report()\n        assert \"No differences found.\" in report\n\n    def test_partially_identical_files1(self):\n        \"\"\"\n        Test files that have some identical HDUs but a different extension\n        count.\n        \"\"\"\n\n        a = np.arange(100).reshape(10, 10)\n        phdu = PrimaryHDU(data=a)\n        ehdu = ImageHDU(data=a)\n        hdula = HDUList([phdu, ehdu])\n        hdulb = HDUList([phdu, ehdu, ehdu])\n        diff = FITSDiff(hdula, hdulb)\n        assert not diff.identical\n        assert diff.diff_hdu_count == (2, 3)\n\n        # diff_hdus should be empty, since the third extension in hdulb\n        # has nothing to compare against\n        assert diff.diff_hdus == []\n\n        report = diff.report()\n        assert \"Files contain different numbers of HDUs\" in report\n        assert \"a: 2\\n b: 3\" in report\n        assert \"No differences found between common HDUs\" in report\n\n    def test_partially_identical_files2(self):\n        \"\"\"\n        Test files that have some identical HDUs but one different HDU.\n        \"\"\"\n\n        a = np.arange(100).reshape(10, 10)\n        phdu = PrimaryHDU(data=a)\n        ehdu = ImageHDU(data=a)\n        ehdu2 = ImageHDU(data=(a + 1))\n        hdula = HDUList([phdu, ehdu, ehdu])\n        hdulb = HDUList([phdu, ehdu2, ehdu])\n        diff = FITSDiff(hdula, hdulb)\n\n        assert not diff.identical\n        assert diff.diff_hdu_count == ()\n        assert len(diff.diff_hdus) == 1\n        assert diff.diff_hdus[0][0] == 1\n\n        hdudiff = diff.diff_hdus[0][1]\n        assert not hdudiff.identical\n        assert hdudiff.diff_extnames == ()\n        assert hdudiff.diff_extvers == ()\n        assert hdudiff.diff_extension_types == ()\n        assert hdudiff.diff_headers.identical\n        assert hdudiff.diff_data is not None\n\n        datadiff = hdudiff.diff_data\n        assert isinstance(datadiff, ImageDataDiff)\n        assert not datadiff.identical\n        assert datadiff.diff_dimensions == ()\n        assert datadiff.diff_pixels == [((0, y), (y, y + 1)) for y in range(10)]\n        assert datadiff.diff_ratio == 1.0\n        assert datadiff.diff_total == 100\n\n        report = diff.report()\n        # Primary HDU and 2nd extension HDU should have no differences\n        assert \"Primary HDU\" not in report\n        assert \"Extension HDU 2\" not in report\n        assert \"Extension HDU 1\" in report\n\n        assert \"Headers contain differences\" not in report\n        assert \"Data contains differences\" in report\n        for y in range(10):\n            assert f\"Data differs at [{y + 1}, 1]\" in report\n        assert \"100 different pixels found (100.00% different).\" in report\n\n    def test_partially_identical_files3(self):\n        \"\"\"\n        Test files that have some identical HDUs but a different extension\n        name.\n        \"\"\"\n\n        phdu = PrimaryHDU()\n        ehdu = ImageHDU(name=\"FOO\")\n        hdula = HDUList([phdu, ehdu])\n        ehdu = BinTableHDU(name=\"BAR\")\n        ehdu.header[\"EXTVER\"] = 2\n        ehdu.header[\"EXTLEVEL\"] = 3\n        hdulb = HDUList([phdu, ehdu])\n        diff = FITSDiff(hdula, hdulb)\n        assert not diff.identical\n\n        assert diff.diff_hdus[0][0] == 1\n\n        hdu_diff = diff.diff_hdus[0][1]\n        assert hdu_diff.diff_extension_types == (\"IMAGE\", \"BINTABLE\")\n        assert hdu_diff.diff_extnames == (\"FOO\", \"BAR\")\n        assert hdu_diff.diff_extvers == (1, 2)\n        assert hdu_diff.diff_extlevels == (1, 3)\n\n        report = diff.report()\n        assert \"Extension types differ\" in report\n        assert \"a: IMAGE\\n    b: BINTABLE\" in report\n        assert \"Extension names differ\" in report\n        assert \"a: FOO\\n    b: BAR\" in report\n        assert \"Extension versions differ\" in report\n        assert \"a: 1\\n    b: 2\" in report\n        assert \"Extension levels differ\" in report\n        assert \"a: 1\\n    b: 2\" in report\n\n    def test_diff_nans(self):\n        \"\"\"\n        Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/204\n        \"\"\"\n\n        # First test some arrays that should be equivalent....\n        arr = np.empty((10, 10), dtype=np.float64)\n        arr[:5] = 1.0\n        arr[5:] = np.nan\n        arr2 = arr.copy()\n\n        table = np.rec.array(\n            [(1.0, 2.0), (3.0, np.nan), (np.nan, np.nan)], names=[\"cola\", \"colb\"]\n        ).view(fits.FITS_rec)\n        table2 = table.copy()\n\n        assert ImageDataDiff(arr, arr2).identical\n        assert TableDataDiff(table, table2).identical\n\n        # Now let's introduce some differences, where there are nans and where\n        # there are not nans\n        arr2[0][0] = 2.0\n        arr2[5][0] = 2.0\n        table2[0][0] = 2.0\n        table2[1][1] = 2.0\n\n        diff = ImageDataDiff(arr, arr2)\n        assert not diff.identical\n        assert diff.diff_pixels[0] == ((0, 0), (1.0, 2.0))\n        assert diff.diff_pixels[1][0] == (5, 0)\n        assert np.isnan(diff.diff_pixels[1][1][0])\n        assert diff.diff_pixels[1][1][1] == 2.0\n\n        diff = TableDataDiff(table, table2)\n        assert not diff.identical\n        assert diff.diff_values[0] == ((\"cola\", 0), (1.0, 2.0))\n        assert diff.diff_values[1][0] == (\"colb\", 1)\n        assert np.isnan(diff.diff_values[1][1][0])\n        assert diff.diff_values[1][1][1] == 2.0\n\n    def test_file_output_from_path_string(self):\n        outpath = self.temp(\"diff_output.txt\")\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diffobj = HeaderDiff(ha, hb)\n        diffobj.report(fileobj=outpath)\n        report_as_string = diffobj.report()\n        with open(outpath) as fout:\n            assert fout.read() == report_as_string\n\n    def test_file_output_overwrite_safety(self):\n        outpath = self.temp(\"diff_output.txt\")\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diffobj = HeaderDiff(ha, hb)\n        diffobj.report(fileobj=outpath)\n\n        with pytest.raises(OSError, match=_NOT_OVERWRITING_MSG_MATCH):\n            diffobj.report(fileobj=outpath)\n\n    def test_file_output_overwrite_success(self):\n        outpath = self.temp(\"diff_output.txt\")\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diffobj = HeaderDiff(ha, hb)\n        diffobj.report(fileobj=outpath)\n        report_as_string = diffobj.report()\n        diffobj.report(fileobj=outpath, overwrite=True)\n        with open(outpath) as fout:\n            assert (\n                fout.read() == report_as_string\n            ), \"overwritten output file is not identical to report string\"\n\n    def test_rawdatadiff_nodiff(self):\n        a = np.arange(100, dtype=\"uint8\").reshape(10, 10)\n        b = a.copy()\n        hdu_a = DummyNonstandardExtHDU(data=a)\n        hdu_b = DummyNonstandardExtHDU(data=b)\n        diff = HDUDiff(hdu_a, hdu_b)\n        assert diff.identical\n        report = diff.report()\n        assert \"No differences found.\" in report\n\n    def test_rawdatadiff_dimsdiff(self):\n        a = np.arange(100, dtype=\"uint8\") + 10\n        b = a[:80].copy()\n        hdu_a = DummyNonstandardExtHDU(data=a)\n        hdu_b = DummyNonstandardExtHDU(data=b)\n        diff = HDUDiff(hdu_a, hdu_b)\n        assert not diff.identical\n        report = diff.report()\n        assert \"Data sizes differ:\" in report\n        assert \"a: 100 bytes\" in report\n        assert \"b: 80 bytes\" in report\n        assert \"No further data comparison performed.\" in report\n\n    def test_rawdatadiff_bytesdiff(self):\n        a = np.arange(100, dtype=\"uint8\") + 10\n        b = a.copy()\n        changes = [(30, 200), (89, 170)]\n        for i, v in changes:\n            b[i] = v\n\n        hdu_a = DummyNonstandardExtHDU(data=a)\n        hdu_b = DummyNonstandardExtHDU(data=b)\n        diff = HDUDiff(hdu_a, hdu_b)\n\n        assert not diff.identical\n\n        diff_bytes = diff.diff_data.diff_bytes\n        assert len(changes) == len(diff_bytes)\n        for j, (i, v) in enumerate(changes):\n            assert diff_bytes[j] == (i, (i + 10, v))\n\n        report = diff.report()\n        assert \"Data contains differences:\" in report\n        for i, _ in changes:\n            assert f\"Data differs at byte {i}:\" in report\n        assert \"2 different bytes found (2.00% different).\" in report\n\n\ndef test_fitsdiff_hdu_name(tmp_path):\n    \"\"\"Make sure diff report reports HDU name and ver if same in files\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n\n    hdulist = HDUList([PrimaryHDU(), ImageHDU(data=np.zeros(5), name=\"SCI\")])\n    hdulist.writeto(path1)\n    hdulist[1].data[0] = 1\n    hdulist.writeto(path2)\n\n    diff = FITSDiff(path1, path2)\n    assert \"Extension HDU 1 (SCI, 1):\" in diff.report()\n\n\ndef test_fitsdiff_no_hdu_name(tmp_path):\n    \"\"\"Make sure diff report doesn't report HDU name if not in files\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n\n    hdulist = HDUList([PrimaryHDU(), ImageHDU(data=np.zeros(5))])\n    hdulist.writeto(path1)\n    hdulist[1].data[0] = 1\n    hdulist.writeto(path2)\n\n    diff = FITSDiff(path1, path2)\n    assert \"Extension HDU 1:\" in diff.report()\n\n\ndef test_fitsdiff_with_names(tmp_path):\n    \"\"\"Make sure diff report doesn't report HDU name if not same in files\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n\n    hdulist = HDUList([PrimaryHDU(), ImageHDU(data=np.zeros(5), name=\"SCI\", ver=1)])\n    hdulist.writeto(path1)\n    hdulist[1].name = \"ERR\"\n    hdulist.writeto(path2)\n\n    diff = FITSDiff(path1, path2)\n    assert \"Extension HDU 1:\" in diff.report()\n\n\ndef test_rawdatadiff_diff_with_rtol(tmp_path):\n    \"\"\"Regression test for https://github.com/astropy/astropy/issues/13330\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n    a = np.zeros((10, 2), dtype=\"float32\")\n    a[:, 0] = np.arange(10, dtype=\"float32\") + 10\n    a[:, 1] = np.arange(10, dtype=\"float32\") + 20\n    b = a.copy()\n    changes = [(3, 13.1, 23.1), (8, 20.5, 30.5)]\n    for i, v, w in changes:\n        b[i, 0] = v\n        b[i, 1] = w\n\n    ca = Column(\"A\", format=\"20E\", array=[a])\n    cb = Column(\"A\", format=\"20E\", array=[b])\n    hdu_a = BinTableHDU.from_columns([ca])\n    hdu_a.writeto(path1, overwrite=True)\n    hdu_b = BinTableHDU.from_columns([cb])\n    hdu_b.writeto(path2, overwrite=True)\n    with fits.open(path1) as fits1:\n        with fits.open(path2) as fits2:\n            diff = FITSDiff(fits1, fits2, atol=0, rtol=0.001)\n            str1 = diff.report(fileobj=None, indent=0)\n\n            diff = FITSDiff(fits1, fits2, atol=0, rtol=0.01)\n            str2 = diff.report(fileobj=None, indent=0)\n\n    assert \"...and at 1 more indices.\" in str1\n    assert \"...and at 1 more indices.\" not in str2\n", "new_content": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\nimport numpy as np\nimport pytest\n\nfrom astropy.io import fits\nfrom astropy.io.fits.column import Column\nfrom astropy.io.fits.diff import (\n    FITSDiff,\n    HDUDiff,\n    HeaderDiff,\n    ImageDataDiff,\n    TableDataDiff,\n)\nfrom astropy.io.fits.hdu import HDUList, ImageHDU, PrimaryHDU\nfrom astropy.io.fits.hdu.base import NonstandardExtHDU\nfrom astropy.io.fits.hdu.table import BinTableHDU\nfrom astropy.io.fits.header import Header\nfrom astropy.utils.misc import _NOT_OVERWRITING_MSG_MATCH\n\nfrom .conftest import FitsTestCase\n\n\nclass DummyNonstandardExtHDU(NonstandardExtHDU):\n    def __init__(self, data=None, *args, **kwargs):\n        super().__init__(self, *args, **kwargs)\n        self._buffer = np.asarray(data).tobytes()\n        self._data_offset = 0\n\n    @property\n    def size(self):\n        return len(self._buffer)\n\n\nclass TestDiff(FitsTestCase):\n    def test_identical_headers(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        assert HeaderDiff(ha, hb).identical\n        assert HeaderDiff(ha.tostring(), hb.tostring()).identical\n\n        with pytest.raises(TypeError):\n            HeaderDiff(1, 2)\n\n    def test_slightly_different_headers(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        assert not HeaderDiff(ha, hb).identical\n\n    def test_common_keywords(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        hb[\"D\"] = (5, \"Comment\")\n        assert HeaderDiff(ha, hb).common_keywords == [\"A\", \"B\", \"C\"]\n\n    def test_different_keyword_count(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        del hb[\"B\"]\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_count == (3, 2)\n\n        # But make sure the common keywords are at least correct\n        assert diff.common_keywords == [\"A\", \"C\"]\n\n    def test_different_keywords(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        hb[\"D\"] = (5, \"Comment\")\n        ha[\"E\"] = (6, \"Comment\")\n        ha[\"F\"] = (7, \"Comment\")\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keywords == ([\"E\", \"F\"], [\"D\"])\n\n    def test_different_keyword_values(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(3, 4)]}\n\n    def test_different_keyword_comments(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3, \"comment 1\")])\n        hb = ha.copy()\n        hb.comments[\"C\"] = \"comment 2\"\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_comments == {\"C\": [(\"comment 1\", \"comment 2\")]}\n\n    def test_different_keyword_values_with_duplicate(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        ha.append((\"C\", 4))\n        hb.append((\"C\", 5))\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [None, (4, 5)]}\n\n    def test_asymmetric_duplicate_keywords(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        ha.append((\"A\", 2, \"comment 1\"))\n        ha.append((\"A\", 3, \"comment 2\"))\n        hb.append((\"B\", 4, \"comment 3\"))\n        hb.append((\"C\", 5, \"comment 4\"))\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {}\n        assert diff.diff_duplicate_keywords == {\"A\": (3, 1), \"B\": (1, 2), \"C\": (1, 2)}\n\n        report = diff.report()\n        assert (\n            \"Inconsistent duplicates of keyword 'A'     :\\n\"\n            \"  Occurs 3 time(s) in a, 1 times in (b)\" in report\n        )\n\n    def test_floating_point_rtol(self):\n        ha = Header([(\"A\", 1), (\"B\", 2.00001), (\"C\", 3.000001)])\n        hb = ha.copy()\n        hb[\"B\"] = 2.00002\n        hb[\"C\"] = 3.000002\n        diff = HeaderDiff(ha, hb)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\n            \"B\": [(2.00001, 2.00002)],\n            \"C\": [(3.000001, 3.000002)],\n        }\n        diff = HeaderDiff(ha, hb, rtol=1e-6)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"B\": [(2.00001, 2.00002)]}\n        diff = HeaderDiff(ha, hb, rtol=1e-5)\n        assert diff.identical\n\n    def test_floating_point_atol(self):\n        ha = Header([(\"A\", 1), (\"B\", 1.0), (\"C\", 0.0)])\n        hb = ha.copy()\n        hb[\"B\"] = 1.00001\n        hb[\"C\"] = 0.000001\n        diff = HeaderDiff(ha, hb, rtol=1e-6)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\n            \"B\": [(1.0, 1.00001)],\n            \"C\": [(0.0, 0.000001)],\n        }\n        diff = HeaderDiff(ha, hb, rtol=1e-5)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(0.0, 0.000001)]}\n        diff = HeaderDiff(ha, hb, atol=1e-6)\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"B\": [(1.0, 1.00001)]}\n        diff = HeaderDiff(ha, hb, atol=1e-5)  # strict inequality\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"B\": [(1.0, 1.00001)]}\n        diff = HeaderDiff(ha, hb, rtol=1e-5, atol=1e-5)\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, atol=1.1e-5)\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, rtol=1e-6, atol=1e-6)\n        assert not diff.identical\n\n    def test_ignore_blanks(self):\n        with fits.conf.set_temp(\"strip_header_whitespace\", False):\n            ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", \"A       \")])\n            hb = ha.copy()\n            hb[\"C\"] = \"A\"\n            assert ha[\"C\"] != hb[\"C\"]\n\n            diff = HeaderDiff(ha, hb)\n            # Trailing blanks are ignored by default\n            assert diff.identical\n            assert diff.diff_keyword_values == {}\n\n            # Don't ignore blanks\n            diff = HeaderDiff(ha, hb, ignore_blanks=False)\n            assert not diff.identical\n            assert diff.diff_keyword_values == {\"C\": [(\"A       \", \"A\")]}\n\n    @pytest.mark.parametrize(\"differ\", [HeaderDiff, HDUDiff, FITSDiff])\n    def test_ignore_blank_cards(self, differ):\n        \"\"\"Test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/152\n\n        Ignore blank cards.\n        \"\"\"\n\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = Header([(\"A\", 1), (\"\", \"\"), (\"B\", 2), (\"\", \"\"), (\"C\", 3)])\n        hc = ha.copy()\n        if differ is HeaderDiff:\n            hc.append()\n            hc.append()\n        else:  # Ensure blanks are not at the end as they are stripped by HDUs\n            hc.add_blank(after=-2)\n            hc.add_blank(after=-2)\n\n        if differ in (HDUDiff, FITSDiff):  # wrap it in a PrimaryHDU\n            ha, hb, hc = (PrimaryHDU(np.arange(10), h) for h in (ha, hb, hc))\n            hc_header = hc.header\n        if differ is FITSDiff:  # wrap it in a HDUList\n            ha, hb, hc = (HDUList([h]) for h in (ha, hb, hc))\n            hc_header = hc[0].header\n\n        # We now have a header with interleaved blanks, and a header with end\n        # blanks, both of which should ignore the blanks\n        assert differ(ha, hb).identical\n        assert differ(ha, hc).identical\n        assert differ(hb, hc).identical\n\n        assert not differ(ha, hb, ignore_blank_cards=False).identical\n        assert not differ(ha, hc, ignore_blank_cards=False).identical\n\n        # Both hb and hc have the same number of blank cards; since order is\n        # currently ignored, these should still be identical even if blank\n        # cards are not ignored\n        assert differ(hb, hc, ignore_blank_cards=False).identical\n\n        if differ is HeaderDiff:\n            hc.append()\n        else:  # Ensure blanks are not at the end as they are stripped by HDUs\n            hc_header.add_blank(after=-2)\n        # But now there are different numbers of blanks, so they should not be\n        # ignored:\n        assert not differ(hb, hc, ignore_blank_cards=False).identical\n\n    def test_ignore_hdus(self):\n        a = np.arange(100).reshape(10, 10)\n        b = a.copy()\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        xa = np.array([(1.0, 1), (3.0, 4)], dtype=[(\"x\", float), (\"y\", int)])\n        xb = np.array([(1.0, 2), (3.0, 5)], dtype=[(\"x\", float), (\"y\", int)])\n        phdu = PrimaryHDU(header=ha)\n        ihdua = ImageHDU(data=a, name=\"SCI\")\n        ihdub = ImageHDU(data=b, name=\"SCI\")\n        bhdu1 = BinTableHDU(data=xa, name=\"ASDF\")\n        bhdu2 = BinTableHDU(data=xb, name=\"ASDF\")\n        hdula = HDUList([phdu, ihdua, bhdu1])\n        hdulb = HDUList([phdu, ihdub, bhdu2])\n\n        # ASDF extension should be different\n        diff = FITSDiff(hdula, hdulb)\n        assert not diff.identical\n        assert diff.diff_hdus[0][0] == 2\n\n        # ASDF extension should be ignored\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"ASDF\"])\n        assert diff.identical, diff.report()\n\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"ASD*\"])\n        assert diff.identical, diff.report()\n\n        # SCI extension should be different\n        hdulb[\"SCI\"].data += 1\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"ASDF\"])\n        assert not diff.identical\n\n        # SCI and ASDF extensions should be ignored\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"SCI\", \"ASDF\"])\n        assert diff.identical, diff.report()\n\n        # All EXTVER of SCI should be ignored\n        ihduc = ImageHDU(data=a, name=\"SCI\", ver=2)\n        hdulb.append(ihduc)\n        diff = FITSDiff(hdula, hdulb, ignore_hdus=[\"SCI\", \"ASDF\"])\n        assert not any(diff.diff_hdus), diff.report()\n        assert any(diff.diff_hdu_count), diff.report()\n\n    def test_ignore_keyword_values(self):\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"B\"] = 4\n        hb[\"C\"] = 5\n        diff = HeaderDiff(ha, hb, ignore_keywords=[\"*\"])\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, ignore_keywords=[\"B\"])\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(3, 5)]}\n\n        report = diff.report()\n        assert \"Keyword B        has different values\" not in report\n        assert \"Keyword C        has different values\" in report\n\n        # Test case-insensitivity\n        diff = HeaderDiff(ha, hb, ignore_keywords=[\"b\"])\n        assert not diff.identical\n        assert diff.diff_keyword_values == {\"C\": [(3, 5)]}\n\n    def test_ignore_keyword_comments(self):\n        ha = Header([(\"A\", 1, \"A\"), (\"B\", 2, \"B\"), (\"C\", 3, \"C\")])\n        hb = ha.copy()\n        hb.comments[\"B\"] = \"D\"\n        hb.comments[\"C\"] = \"E\"\n        diff = HeaderDiff(ha, hb, ignore_comments=[\"*\"])\n        assert diff.identical\n        diff = HeaderDiff(ha, hb, ignore_comments=[\"B\"])\n        assert not diff.identical\n        assert diff.diff_keyword_comments == {\"C\": [(\"C\", \"E\")]}\n\n        report = diff.report()\n        assert \"Keyword B        has different comments\" not in report\n        assert \"Keyword C        has different comments\" in report\n\n        # Test case-insensitivity\n        diff = HeaderDiff(ha, hb, ignore_comments=[\"b\"])\n        assert not diff.identical\n        assert diff.diff_keyword_comments == {\"C\": [(\"C\", \"E\")]}\n\n    def test_trivial_identical_images(self):\n        ia = np.arange(100).reshape(10, 10)\n        ib = np.arange(100).reshape(10, 10)\n        diff = ImageDataDiff(ia, ib)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_identical_within_relative_tolerance(self):\n        ia = np.ones((10, 10)) - 0.00001\n        ib = np.ones((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-4)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_identical_within_absolute_tolerance(self):\n        ia = np.zeros((10, 10)) - 0.00001\n        ib = np.zeros((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-4)\n        assert not diff.identical\n        assert diff.diff_total == 100\n        diff = ImageDataDiff(ia, ib, atol=1.0e-4)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_identical_within_rtol_and_atol(self):\n        ia = np.zeros((10, 10)) - 0.00001\n        ib = np.zeros((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-5, atol=1.0e-5)\n        assert diff.identical\n        assert diff.diff_total == 0\n\n    def test_not_identical_within_rtol_and_atol(self):\n        ia = np.zeros((10, 10)) - 0.00001\n        ib = np.zeros((10, 10)) - 0.00002\n        diff = ImageDataDiff(ia, ib, rtol=1.0e-5, atol=1.0e-6)\n        assert not diff.identical\n        assert diff.diff_total == 100\n\n    def test_identical_comp_image_hdus(self):\n        \"\"\"Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/189\n\n        For this test we mostly just care that comparing to compressed images\n        does not crash, and returns the correct results.  Two compressed images\n        will be considered identical if the decompressed data is the same.\n        Obviously we test whether or not the same compression was used by\n        looking for (or ignoring) header differences.\n        \"\"\"\n\n        data = np.arange(100.0).reshape(10, 10)\n        hdu = fits.CompImageHDU(data=data)\n        hdu.writeto(self.temp(\"test.fits\"))\n\n        with fits.open(self.temp(\"test.fits\")) as hdula, fits.open(\n            self.temp(\"test.fits\")\n        ) as hdulb:\n            diff = FITSDiff(hdula, hdulb)\n            assert diff.identical\n\n    def test_different_dimensions(self):\n        ia = np.arange(100).reshape(10, 10)\n        ib = np.arange(100) - 1\n\n        # Although ib could be reshaped into the same dimensions, for now the\n        # data is not compared anyways\n        diff = ImageDataDiff(ia, ib)\n        assert not diff.identical\n        assert diff.diff_dimensions == ((10, 10), (100,))\n        assert diff.diff_total == 0\n\n        report = diff.report()\n        assert \"Data dimensions differ\" in report\n        assert \"a: 10 x 10\" in report\n        assert \"b: 100\" in report\n        assert \"No further data comparison performed.\"\n\n    def test_different_pixels(self):\n        ia = np.arange(100).reshape(10, 10)\n        ib = np.arange(100).reshape(10, 10)\n        ib[0, 0] = 10\n        ib[5, 5] = 20\n        diff = ImageDataDiff(ia, ib)\n        assert not diff.identical\n        assert diff.diff_dimensions == ()\n        assert diff.diff_total == 2\n        assert diff.diff_ratio == 0.02\n        assert diff.diff_pixels == [((0, 0), (0, 10)), ((5, 5), (55, 20))]\n\n    def test_identical_tables(self):\n        c1 = Column(\"A\", format=\"L\", array=[True, False])\n        c2 = Column(\"B\", format=\"X\", array=[[0], [1]])\n        c3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [4, 5, 6, 7]])\n        c4 = Column(\"D\", format=\"J\", bscale=2.0, array=[0, 1])\n        c5 = Column(\"E\", format=\"A3\", array=[\"abc\", \"def\"])\n        c6 = Column(\"F\", format=\"E\", unit=\"m\", array=[0.0, 1.0])\n        c7 = Column(\"G\", format=\"D\", bzero=-0.1, array=[0.0, 1.0])\n        c8 = Column(\"H\", format=\"C\", array=[0.0 + 1.0j, 2.0 + 3.0j])\n        c9 = Column(\"I\", format=\"M\", array=[4.0 + 5.0j, 6.0 + 7.0j])\n        c10 = Column(\"J\", format=\"PI(2)\", array=[[0, 1], [2, 3]])\n\n        columns = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10]\n\n        ta = BinTableHDU.from_columns(columns)\n        tb = BinTableHDU.from_columns([c.copy() for c in columns])\n\n        diff = TableDataDiff(ta.data, tb.data)\n        assert diff.identical\n        assert len(diff.common_columns) == 10\n        assert diff.common_column_names == set(\"abcdefghij\")\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n    def test_diff_empty_tables(self):\n        \"\"\"\n        Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/178\n\n        Ensure that diffing tables containing empty data doesn't crash.\n        \"\"\"\n\n        c1 = Column(\"D\", format=\"J\")\n        c2 = Column(\"E\", format=\"J\")\n        thdu = BinTableHDU.from_columns([c1, c2], nrows=0)\n\n        hdula = fits.HDUList([thdu])\n        hdulb = fits.HDUList([thdu])\n\n        diff = FITSDiff(hdula, hdulb)\n        assert diff.identical\n\n    def test_ignore_table_fields(self):\n        c1 = Column(\"A\", format=\"L\", array=[True, False])\n        c2 = Column(\"B\", format=\"X\", array=[[0], [1]])\n        c3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [4, 5, 6, 7]])\n\n        c4 = Column(\"B\", format=\"X\", array=[[1], [0]])\n        c5 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[1, 2, 3, 4], [5, 6, 7, 8]])\n\n        ta = BinTableHDU.from_columns([c1, c2, c3])\n        tb = BinTableHDU.from_columns([c1, c4, c5])\n\n        diff = TableDataDiff(ta.data, tb.data, ignore_fields=[\"B\", \"C\"])\n        assert diff.identical\n\n        # The only common column should be c1\n        assert len(diff.common_columns) == 1\n        assert diff.common_column_names == {\"a\"}\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n    def test_different_table_field_names(self):\n        ca = Column(\"A\", format=\"L\", array=[True, False])\n        cb = Column(\"B\", format=\"L\", array=[True, False])\n        cc = Column(\"C\", format=\"L\", array=[True, False])\n\n        ta = BinTableHDU.from_columns([ca, cb])\n        tb = BinTableHDU.from_columns([ca, cc])\n\n        diff = TableDataDiff(ta.data, tb.data)\n\n        assert not diff.identical\n        assert len(diff.common_columns) == 1\n        assert diff.common_column_names == {\"a\"}\n        assert diff.diff_column_names == ([\"B\"], [\"C\"])\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n        report = diff.report()\n        assert \"Extra column B of format L in a\" in report\n        assert \"Extra column C of format L in b\" in report\n\n    def test_different_table_field_counts(self):\n        \"\"\"\n        Test tables with some common columns, but different number of columns\n        overall.\n        \"\"\"\n\n        ca = Column(\"A\", format=\"L\", array=[True, False])\n        cb = Column(\"B\", format=\"L\", array=[True, False])\n        cc = Column(\"C\", format=\"L\", array=[True, False])\n\n        ta = BinTableHDU.from_columns([cb])\n        tb = BinTableHDU.from_columns([ca, cb, cc])\n\n        diff = TableDataDiff(ta.data, tb.data)\n\n        assert not diff.identical\n        assert diff.diff_column_count == (1, 3)\n        assert len(diff.common_columns) == 1\n        assert diff.common_column_names == {\"b\"}\n        assert diff.diff_column_names == ([], [\"A\", \"C\"])\n        assert diff.diff_ratio == 0\n        assert diff.diff_total == 0\n\n        report = diff.report()\n        assert \" Tables have different number of columns:\" in report\n        assert \"  a: 1\\n  b: 3\" in report\n\n    def test_different_table_rows(self):\n        \"\"\"\n        Test tables that are otherwise identical but one has more rows than the\n        other.\n        \"\"\"\n\n        ca1 = Column(\"A\", format=\"L\", array=[True, False])\n        cb1 = Column(\"B\", format=\"L\", array=[True, False])\n        ca2 = Column(\"A\", format=\"L\", array=[True, False, True])\n        cb2 = Column(\"B\", format=\"L\", array=[True, False, True])\n\n        ta = BinTableHDU.from_columns([ca1, cb1])\n        tb = BinTableHDU.from_columns([ca2, cb2])\n\n        diff = TableDataDiff(ta.data, tb.data)\n\n        assert not diff.identical\n        assert diff.diff_column_count == ()\n        assert len(diff.common_columns) == 2\n        assert diff.diff_rows == (2, 3)\n        assert diff.diff_values == []\n\n        report = diff.report()\n\n        assert \"Table rows differ\" in report\n        assert \"a: 2\" in report\n        assert \"b: 3\" in report\n        assert \"No further data comparison performed.\"\n\n    def test_different_table_data(self):\n        \"\"\"\n        Test diffing table data on columns of several different data formats\n        and dimensions.\n        \"\"\"\n\n        ca1 = Column(\"A\", format=\"L\", array=[True, False])\n        ca2 = Column(\"B\", format=\"X\", array=[[0], [1]])\n        ca3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [4, 5, 6, 7]])\n        ca4 = Column(\"D\", format=\"J\", bscale=2.0, array=[0.0, 2.0])\n        ca5 = Column(\"E\", format=\"A3\", array=[\"abc\", \"def\"])\n        ca6 = Column(\"F\", format=\"E\", unit=\"m\", array=[0.0, 1.0])\n        ca7 = Column(\"G\", format=\"D\", bzero=-0.1, array=[0.0, 1.0])\n        ca8 = Column(\"H\", format=\"C\", array=[0.0 + 1.0j, 2.0 + 3.0j])\n        ca9 = Column(\"I\", format=\"M\", array=[4.0 + 5.0j, 6.0 + 7.0j])\n        ca10 = Column(\"J\", format=\"PI(2)\", array=[[0, 1], [2, 3]])\n\n        cb1 = Column(\"A\", format=\"L\", array=[False, False])\n        cb2 = Column(\"B\", format=\"X\", array=[[0], [0]])\n        cb3 = Column(\"C\", format=\"4I\", dim=\"(2, 2)\", array=[[0, 1, 2, 3], [5, 6, 7, 8]])\n        cb4 = Column(\"D\", format=\"J\", bscale=2.0, array=[2.0, 2.0])\n        cb5 = Column(\"E\", format=\"A3\", array=[\"abc\", \"ghi\"])\n        cb6 = Column(\"F\", format=\"E\", unit=\"m\", array=[1.0, 2.0])\n        cb7 = Column(\"G\", format=\"D\", bzero=-0.1, array=[2.0, 3.0])\n        cb8 = Column(\"H\", format=\"C\", array=[1.0 + 1.0j, 2.0 + 3.0j])\n        cb9 = Column(\"I\", format=\"M\", array=[5.0 + 5.0j, 6.0 + 7.0j])\n        cb10 = Column(\"J\", format=\"PI(2)\", array=[[1, 2], [3, 4]])\n\n        ta = BinTableHDU.from_columns(\n            [ca1, ca2, ca3, ca4, ca5, ca6, ca7, ca8, ca9, ca10]\n        )\n        tb = BinTableHDU.from_columns(\n            [cb1, cb2, cb3, cb4, cb5, cb6, cb7, cb8, cb9, cb10]\n        )\n\n        diff = TableDataDiff(ta.data, tb.data, numdiffs=20)\n        assert not diff.identical\n        # The column definitions are the same, but not the column values\n        assert diff.diff_columns == ()\n        assert diff.diff_values[0] == ((\"A\", 0), (True, False))\n        assert diff.diff_values[1] == ((\"B\", 1), ([1], [0]))\n        assert diff.diff_values[2][0] == (\"C\", 1)\n        assert (diff.diff_values[2][1][0] == [[4, 5], [6, 7]]).all()\n        assert (diff.diff_values[2][1][1] == [[5, 6], [7, 8]]).all()\n        assert diff.diff_values[3] == ((\"D\", 0), (0, 2.0))\n        assert diff.diff_values[4] == ((\"E\", 1), (\"def\", \"ghi\"))\n        assert diff.diff_values[5] == ((\"F\", 0), (0.0, 1.0))\n        assert diff.diff_values[6] == ((\"F\", 1), (1.0, 2.0))\n        assert diff.diff_values[7] == ((\"G\", 0), (0.0, 2.0))\n        assert diff.diff_values[8] == ((\"G\", 1), (1.0, 3.0))\n        assert diff.diff_values[9] == ((\"H\", 0), (0.0 + 1.0j, 1.0 + 1.0j))\n        assert diff.diff_values[10] == ((\"I\", 0), (4.0 + 5.0j, 5.0 + 5.0j))\n        assert diff.diff_values[11][0] == (\"J\", 0)\n        assert (diff.diff_values[11][1][0] == [0, 1]).all()\n        assert (diff.diff_values[11][1][1] == [1, 2]).all()\n        assert diff.diff_values[12][0] == (\"J\", 1)\n        assert (diff.diff_values[12][1][0] == [2, 3]).all()\n        assert (diff.diff_values[12][1][1] == [3, 4]).all()\n\n        assert diff.diff_total == 13\n        assert diff.diff_ratio == 0.65\n\n        report = diff.report()\n        assert \"Column A data differs in row 0:\\n    a> True\\n    b> False\" in report\n        assert \"...and at 1 more indices.\\n Column D data differs in row 0:\" in report\n        assert \"13 different table data element(s) found (65.00% different)\" in report\n        assert report.count(\"more indices\") == 1\n\n    def test_identical_vla_tables(self):\n        \"\"\"\n        Test that identical VLA (variable-length array) tables are correctly\n        identified as identical. This is a regression test for a bug where\n        Q format VLA columns were incorrectly reported as different when\n        comparing a file to itself.\n        \"\"\"\n        # Test Q format VLA columns (the original bug case)\n        col_qd = Column(\"QD_COL\", format=\"QD\", array=[[0.0], [0.0, 0.0]])\n        col_qi = Column(\"QI_COL\", format=\"QI\", array=[[1], [1, 2]])\n        col_qe = Column(\"QE_COL\", format=\"QE\", array=[[1.0], [1.0, 2.0]])\n        \n        # Test P format VLA columns (should continue to work)\n        col_pd = Column(\"PD_COL\", format=\"PD()\", array=[[3.0], [3.0, 4.0]])\n        \n        # Create table with VLA columns\n        hdu = BinTableHDU.from_columns([col_qd, col_qi, col_qe, col_pd])\n        \n        # Test that identical VLA data is correctly identified as identical\n        diff = TableDataDiff(hdu.data, hdu.data)\n        assert diff.identical, \"Identical VLA tables should be reported as identical\"\n        \n        # Test with file I/O (the original bug scenario)\n        hdu.writeto(self.temp(\"vla_test.fits\"))\n        file_diff = FITSDiff(self.temp(\"vla_test.fits\"), self.temp(\"vla_test.fits\"))\n        assert file_diff.identical, \"Identical VLA files should be reported as identical\"\n\n    def test_identical_files_basic(self):\n        \"\"\"Test identicality of two simple, extensionless files.\"\"\"\n\n        a = np.arange(100).reshape(10, 10)\n        hdu = PrimaryHDU(data=a)\n        hdu.writeto(self.temp(\"testa.fits\"))\n        hdu.writeto(self.temp(\"testb.fits\"))\n        diff = FITSDiff(self.temp(\"testa.fits\"), self.temp(\"testb.fits\"))\n        assert diff.identical\n\n        report = diff.report()\n        # Primary HDUs should contain no differences\n        assert \"Primary HDU\" not in report\n        assert \"Extension HDU\" not in report\n        assert \"No differences found.\" in report\n\n        a = np.arange(10)\n        ehdu = ImageHDU(data=a)\n        diff = HDUDiff(ehdu, ehdu)\n        assert diff.identical\n        report = diff.report()\n        assert \"No differences found.\" in report\n\n    def test_partially_identical_files1(self):\n        \"\"\"\n        Test files that have some identical HDUs but a different extension\n        count.\n        \"\"\"\n\n        a = np.arange(100).reshape(10, 10)\n        phdu = PrimaryHDU(data=a)\n        ehdu = ImageHDU(data=a)\n        hdula = HDUList([phdu, ehdu])\n        hdulb = HDUList([phdu, ehdu, ehdu])\n        diff = FITSDiff(hdula, hdulb)\n        assert not diff.identical\n        assert diff.diff_hdu_count == (2, 3)\n\n        # diff_hdus should be empty, since the third extension in hdulb\n        # has nothing to compare against\n        assert diff.diff_hdus == []\n\n        report = diff.report()\n        assert \"Files contain different numbers of HDUs\" in report\n        assert \"a: 2\\n b: 3\" in report\n        assert \"No differences found between common HDUs\" in report\n\n    def test_partially_identical_files2(self):\n        \"\"\"\n        Test files that have some identical HDUs but one different HDU.\n        \"\"\"\n\n        a = np.arange(100).reshape(10, 10)\n        phdu = PrimaryHDU(data=a)\n        ehdu = ImageHDU(data=a)\n        ehdu2 = ImageHDU(data=(a + 1))\n        hdula = HDUList([phdu, ehdu, ehdu])\n        hdulb = HDUList([phdu, ehdu2, ehdu])\n        diff = FITSDiff(hdula, hdulb)\n\n        assert not diff.identical\n        assert diff.diff_hdu_count == ()\n        assert len(diff.diff_hdus) == 1\n        assert diff.diff_hdus[0][0] == 1\n\n        hdudiff = diff.diff_hdus[0][1]\n        assert not hdudiff.identical\n        assert hdudiff.diff_extnames == ()\n        assert hdudiff.diff_extvers == ()\n        assert hdudiff.diff_extension_types == ()\n        assert hdudiff.diff_headers.identical\n        assert hdudiff.diff_data is not None\n\n        datadiff = hdudiff.diff_data\n        assert isinstance(datadiff, ImageDataDiff)\n        assert not datadiff.identical\n        assert datadiff.diff_dimensions == ()\n        assert datadiff.diff_pixels == [((0, y), (y, y + 1)) for y in range(10)]\n        assert datadiff.diff_ratio == 1.0\n        assert datadiff.diff_total == 100\n\n        report = diff.report()\n        # Primary HDU and 2nd extension HDU should have no differences\n        assert \"Primary HDU\" not in report\n        assert \"Extension HDU 2\" not in report\n        assert \"Extension HDU 1\" in report\n\n        assert \"Headers contain differences\" not in report\n        assert \"Data contains differences\" in report\n        for y in range(10):\n            assert f\"Data differs at [{y + 1}, 1]\" in report\n        assert \"100 different pixels found (100.00% different).\" in report\n\n    def test_partially_identical_files3(self):\n        \"\"\"\n        Test files that have some identical HDUs but a different extension\n        name.\n        \"\"\"\n\n        phdu = PrimaryHDU()\n        ehdu = ImageHDU(name=\"FOO\")\n        hdula = HDUList([phdu, ehdu])\n        ehdu = BinTableHDU(name=\"BAR\")\n        ehdu.header[\"EXTVER\"] = 2\n        ehdu.header[\"EXTLEVEL\"] = 3\n        hdulb = HDUList([phdu, ehdu])\n        diff = FITSDiff(hdula, hdulb)\n        assert not diff.identical\n\n        assert diff.diff_hdus[0][0] == 1\n\n        hdu_diff = diff.diff_hdus[0][1]\n        assert hdu_diff.diff_extension_types == (\"IMAGE\", \"BINTABLE\")\n        assert hdu_diff.diff_extnames == (\"FOO\", \"BAR\")\n        assert hdu_diff.diff_extvers == (1, 2)\n        assert hdu_diff.diff_extlevels == (1, 3)\n\n        report = diff.report()\n        assert \"Extension types differ\" in report\n        assert \"a: IMAGE\\n    b: BINTABLE\" in report\n        assert \"Extension names differ\" in report\n        assert \"a: FOO\\n    b: BAR\" in report\n        assert \"Extension versions differ\" in report\n        assert \"a: 1\\n    b: 2\" in report\n        assert \"Extension levels differ\" in report\n        assert \"a: 1\\n    b: 2\" in report\n\n    def test_diff_nans(self):\n        \"\"\"\n        Regression test for https://aeon.stsci.edu/ssb/trac/pyfits/ticket/204\n        \"\"\"\n\n        # First test some arrays that should be equivalent....\n        arr = np.empty((10, 10), dtype=np.float64)\n        arr[:5] = 1.0\n        arr[5:] = np.nan\n        arr2 = arr.copy()\n\n        table = np.rec.array(\n            [(1.0, 2.0), (3.0, np.nan), (np.nan, np.nan)], names=[\"cola\", \"colb\"]\n        ).view(fits.FITS_rec)\n        table2 = table.copy()\n\n        assert ImageDataDiff(arr, arr2).identical\n        assert TableDataDiff(table, table2).identical\n\n        # Now let's introduce some differences, where there are nans and where\n        # there are not nans\n        arr2[0][0] = 2.0\n        arr2[5][0] = 2.0\n        table2[0][0] = 2.0\n        table2[1][1] = 2.0\n\n        diff = ImageDataDiff(arr, arr2)\n        assert not diff.identical\n        assert diff.diff_pixels[0] == ((0, 0), (1.0, 2.0))\n        assert diff.diff_pixels[1][0] == (5, 0)\n        assert np.isnan(diff.diff_pixels[1][1][0])\n        assert diff.diff_pixels[1][1][1] == 2.0\n\n        diff = TableDataDiff(table, table2)\n        assert not diff.identical\n        assert diff.diff_values[0] == ((\"cola\", 0), (1.0, 2.0))\n        assert diff.diff_values[1][0] == (\"colb\", 1)\n        assert np.isnan(diff.diff_values[1][1][0])\n        assert diff.diff_values[1][1][1] == 2.0\n\n    def test_file_output_from_path_string(self):\n        outpath = self.temp(\"diff_output.txt\")\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diffobj = HeaderDiff(ha, hb)\n        diffobj.report(fileobj=outpath)\n        report_as_string = diffobj.report()\n        with open(outpath) as fout:\n            assert fout.read() == report_as_string\n\n    def test_file_output_overwrite_safety(self):\n        outpath = self.temp(\"diff_output.txt\")\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diffobj = HeaderDiff(ha, hb)\n        diffobj.report(fileobj=outpath)\n\n        with pytest.raises(OSError, match=_NOT_OVERWRITING_MSG_MATCH):\n            diffobj.report(fileobj=outpath)\n\n    def test_file_output_overwrite_success(self):\n        outpath = self.temp(\"diff_output.txt\")\n        ha = Header([(\"A\", 1), (\"B\", 2), (\"C\", 3)])\n        hb = ha.copy()\n        hb[\"C\"] = 4\n        diffobj = HeaderDiff(ha, hb)\n        diffobj.report(fileobj=outpath)\n        report_as_string = diffobj.report()\n        diffobj.report(fileobj=outpath, overwrite=True)\n        with open(outpath) as fout:\n            assert (\n                fout.read() == report_as_string\n            ), \"overwritten output file is not identical to report string\"\n\n    def test_rawdatadiff_nodiff(self):\n        a = np.arange(100, dtype=\"uint8\").reshape(10, 10)\n        b = a.copy()\n        hdu_a = DummyNonstandardExtHDU(data=a)\n        hdu_b = DummyNonstandardExtHDU(data=b)\n        diff = HDUDiff(hdu_a, hdu_b)\n        assert diff.identical\n        report = diff.report()\n        assert \"No differences found.\" in report\n\n    def test_rawdatadiff_dimsdiff(self):\n        a = np.arange(100, dtype=\"uint8\") + 10\n        b = a[:80].copy()\n        hdu_a = DummyNonstandardExtHDU(data=a)\n        hdu_b = DummyNonstandardExtHDU(data=b)\n        diff = HDUDiff(hdu_a, hdu_b)\n        assert not diff.identical\n        report = diff.report()\n        assert \"Data sizes differ:\" in report\n        assert \"a: 100 bytes\" in report\n        assert \"b: 80 bytes\" in report\n        assert \"No further data comparison performed.\" in report\n\n    def test_rawdatadiff_bytesdiff(self):\n        a = np.arange(100, dtype=\"uint8\") + 10\n        b = a.copy()\n        changes = [(30, 200), (89, 170)]\n        for i, v in changes:\n            b[i] = v\n\n        hdu_a = DummyNonstandardExtHDU(data=a)\n        hdu_b = DummyNonstandardExtHDU(data=b)\n        diff = HDUDiff(hdu_a, hdu_b)\n\n        assert not diff.identical\n\n        diff_bytes = diff.diff_data.diff_bytes\n        assert len(changes) == len(diff_bytes)\n        for j, (i, v) in enumerate(changes):\n            assert diff_bytes[j] == (i, (i + 10, v))\n\n        report = diff.report()\n        assert \"Data contains differences:\" in report\n        for i, _ in changes:\n            assert f\"Data differs at byte {i}:\" in report\n        assert \"2 different bytes found (2.00% different).\" in report\n\n\ndef test_fitsdiff_hdu_name(tmp_path):\n    \"\"\"Make sure diff report reports HDU name and ver if same in files\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n\n    hdulist = HDUList([PrimaryHDU(), ImageHDU(data=np.zeros(5), name=\"SCI\")])\n    hdulist.writeto(path1)\n    hdulist[1].data[0] = 1\n    hdulist.writeto(path2)\n\n    diff = FITSDiff(path1, path2)\n    assert \"Extension HDU 1 (SCI, 1):\" in diff.report()\n\n\ndef test_fitsdiff_no_hdu_name(tmp_path):\n    \"\"\"Make sure diff report doesn't report HDU name if not in files\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n\n    hdulist = HDUList([PrimaryHDU(), ImageHDU(data=np.zeros(5))])\n    hdulist.writeto(path1)\n    hdulist[1].data[0] = 1\n    hdulist.writeto(path2)\n\n    diff = FITSDiff(path1, path2)\n    assert \"Extension HDU 1:\" in diff.report()\n\n\ndef test_fitsdiff_with_names(tmp_path):\n    \"\"\"Make sure diff report doesn't report HDU name if not same in files\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n\n    hdulist = HDUList([PrimaryHDU(), ImageHDU(data=np.zeros(5), name=\"SCI\", ver=1)])\n    hdulist.writeto(path1)\n    hdulist[1].name = \"ERR\"\n    hdulist.writeto(path2)\n\n    diff = FITSDiff(path1, path2)\n    assert \"Extension HDU 1:\" in diff.report()\n\n\ndef test_rawdatadiff_diff_with_rtol(tmp_path):\n    \"\"\"Regression test for https://github.com/astropy/astropy/issues/13330\"\"\"\n    path1 = tmp_path / \"test1.fits\"\n    path2 = tmp_path / \"test2.fits\"\n    a = np.zeros((10, 2), dtype=\"float32\")\n    a[:, 0] = np.arange(10, dtype=\"float32\") + 10\n    a[:, 1] = np.arange(10, dtype=\"float32\") + 20\n    b = a.copy()\n    changes = [(3, 13.1, 23.1), (8, 20.5, 30.5)]\n    for i, v, w in changes:\n        b[i, 0] = v\n        b[i, 1] = w\n\n    ca = Column(\"A\", format=\"20E\", array=[a])\n    cb = Column(\"A\", format=\"20E\", array=[b])\n    hdu_a = BinTableHDU.from_columns([ca])\n    hdu_a.writeto(path1, overwrite=True)\n    hdu_b = BinTableHDU.from_columns([cb])\n    hdu_b.writeto(path2, overwrite=True)\n    with fits.open(path1) as fits1:\n        with fits.open(path2) as fits2:\n            diff = FITSDiff(fits1, fits2, atol=0, rtol=0.001)\n            str1 = diff.report(fileobj=None, indent=0)\n\n            diff = FITSDiff(fits1, fits2, atol=0, rtol=0.01)\n            str2 = diff.report(fileobj=None, indent=0)\n\n    assert \"...and at 1 more indices.\" in str1\n    assert \"...and at 1 more indices.\" not in str2\n"}, "action_id": "34c83c7e-170a-47db-abca-674ad72583e1"}