{"kind": "ObservationEvent", "id": "b16e2dca-16d3-487b-ad8b-b6b9882b75a0", "timestamp": "2025-09-25T11:30:51.355018", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_015ziy1wmWcusfpZqW1P8fyD", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmpq_7m_4ya/astropy/tox.ini:\n     1\t[tox]\n     2\tenvlist =\n     3\t    py{38,39,310,dev}-test{,-image,-recdeps,-alldeps,-oldestdeps,-devdeps,-numpy118,-numpy119,-numpy120,-numpy121,-mpl311}{,-cov}{,-clocale}\n     4\t    build_docs\n     5\t    linkcheck\n     6\t    codestyle\n     7\trequires =\n     8\t    setuptools >= 30.3.0\n     9\t    pip >= 19.3.1\n    10\t    tox-pypi-filter >= 0.12\n    11\tisolated_build = true\n    12\t\n    13\t[testenv]\n    14\t\n    15\t# The following option combined with the use of the tox-pypi-filter above allows\n    16\t# project-wide pinning of dependencies, e.g. if new versions of pytest do not\n    17\t# work correctly with pytest-astropy plugins. Most of the time the pinnings file\n    18\t# should be empty.\n    19\tpypi_filter = https://raw.githubusercontent.com/astropy/ci-helpers/main/pip_pinnings.txt\n    20\t\n    21\t# Pass through the following environment variables which are needed for the CI\n    22\tpassenv = HOME WINDIR LC_ALL LC_CTYPE CC CI IS_CRON ARCH_ON_CI TEST_READ_HUGE_FILE\n    23\t\n    24\t# For coverage, we need to pass extra options to the C compiler\n    25\tsetenv =\n    26\t    cov: CFLAGS = --coverage -fno-inline-functions -O0\n    27\t    image: MPLFLAGS = --mpl\n    28\t    !image: MPLFLAGS =\n    29\t    clocale: LC_CTYPE = C.ascii\n    30\t    clocale: LC_ALL = C\n    31\t\n    32\t# Run the tests in a temporary directory to make sure that we don't import\n    33\t# astropy from the source tree\n    34\tchangedir = .tmp/{envname}\n    35\t\n    36\t# tox environments are constructed with so-called 'factors' (or terms)\n    37\t# separated by hyphens, e.g. test-devdeps-cov. Lines below starting with factor:\n    38\t# will only take effect if that factor is included in the environment name. To\n    39\t# see a list of example environments that can be run, along with a description,\n    40\t# run:\n    41\t#\n    42\t#     tox -l -v\n    43\t#\n    44\tdescription =\n    45\t    run tests\n    46\t    recdeps: with recommended optional dependencies\n    47\t    alldeps: with all optional and test dependencies\n    48\t    devdeps: with the latest developer version of key dependencies\n    49\t    oldestdeps: with the oldest supported version of key dependencies\n    50\t    cov: and test coverage\n    51\t    numpy118: with numpy 1.18.*\n    52\t    numpy119: with numpy 1.19.*\n    53\t    numpy120: with numpy 1.20.*\n    54\t    numpy121: with numpy 1.21.*\n    55\t    image: with image tests\n    56\t    mpl311: with matplotlib 3.1.1\n    57\t    mpldev: with the latest developer version of matplotlib\n    58\t    double: twice in a row to check for global state changes\n    59\t\n    60\tdeps =\n    61\t    numpy118: numpy==1.18.*\n    62\t    numpy119: numpy==1.19.*\n    63\t    numpy120: numpy==1.20.*\n    64\t    numpy121: numpy==1.21.*\n    65\t\n    66\t    mpl311: matplotlib==3.1.1\n    67\t\n    68\t    image: latex\n    69\t    image: scipy\n    70\t    image: pytest-mpl\n    71\t\n    72\t    # Temporary pin pytest-astropy-header\n    73\t    test: pytest-astropy-header==0.1.2\n    74\t\n    75\t    # The oldestdeps factor is intended to be used to install the oldest versions of all\n    76\t    # dependencies that have a minimum version.\n    77\t    oldestdeps: numpy==1.18.*\n    78\t    oldestdeps: matplotlib==3.1.*\n    79\t    oldestdeps: asdf==2.9.2\n    80\t    oldestdeps: scipy==1.3.*\n    81\t    oldestdeps: pyyaml==3.13\n    82\t    oldestdeps: ipython==4.2.*\n    83\t    # ipython did not pin traitlets, so we have to\n    84\t    oldestdeps: traitlets<4.1\n    85\t\n    86\t    # pytest-openfiles pinned because of https://github.com/astropy/astropy/issues/10160 (takes too long)\n    87\t    alldeps: pytest-openfiles==0.4.0\n    88\t\n    89\t    # The devdeps factor is intended to be used to install the latest developer version\n    90\t    # or nightly wheel of key dependencies.\n    91\t    devdeps,mpldev: git+https://github.com/matplotlib/matplotlib.git#egg=matplotlib\n    92\t    devdeps: git+https://github.com/asdf-format/asdf.git#egg=asdf\n    93\t    devdeps: git+https://github.com/liberfa/pyerfa.git#egg=pyerfa\n    94\t\n    95\t# The following indicates which extras_require from setup.cfg will be installed\n    96\textras =\n    97\t    test: test\n    98\t    recdeps: recommended\n    99\t    alldeps: all\n   100\t    alldeps: test_all\n   101\t\n   102\tcommands =\n   103\t    devdeps: pip install -U --pre -i https://pypi.anaconda.org/scipy-wheels-nightly/simple numpy\n   104\t    pip freeze\n   105\t    !cov-!double: pytest --pyargs astropy {toxinidir}/docs {env:MPLFLAGS} {posargs}\n   106\t    cov-!double: pytest --pyargs astropy {toxinidir}/docs {env:MPLFLAGS} --cov astropy --cov-config={toxinidir}/setup.cfg {posargs}\n   107\t    double: python -c 'import sys; from astropy import test; test(); sys.exit(test())'\n   108\t    cov: coverage xml -o {toxinidir}/coverage.xml\n   109\t\n   110\t# This lets developers to use tox to build docs and ignores warnings.\n   111\t# This is not used in CI; For that, we have RTD PR builder.\n   112\t[testenv:build_docs]\n   113\tchangedir = docs\n   114\tdescription = invoke sphinx-build to build the HTML docs\n   115\textras = docs\n   116\tcommands =\n   117\t    pip freeze\n   118\t    sphinx-build -b html . _build/html {posargs:-j auto}\n   119\t\n   120\t[testenv:linkcheck]\n   121\tchangedir = docs\n   122\tdescription = check the links in the HTML docs\n   123\textras = docs\n   124\tcommands =\n   125\t    pip freeze\n   126\t    sphinx-build -b linkcheck . _build/html {posargs:-W}\n   127\t\n   128\t[testenv:codestyle]\n   129\tskip_install = true\n   130\tdescription = Run all style and file checks with pre-commit\n   131\tdeps =\n   132\t    pre-commit\n   133\tcommands =\n   134\t    pre-commit install-hooks\n   135\t    pre-commit run {posargs:--color always --all-files --show-diff-on-failure}\n   136\t\n   137\t[testenv:pyinstaller]\n   138\t# Check that astropy can be included in a PyInstaller bundle without any issues. This\n   139\t# also serves as a test that tests do not import anything from outside the tests\n   140\t# directories with relative imports, since we copy the tests out to a separate directory\n   141\t# to run them.\n   142\tdescription = check that astropy can be included in a pyinstaller bundle\n   143\tchangedir = .pyinstaller\n   144\tdeps =\n   145\t    pyinstaller\n   146\t    pytest-mpl\n   147\t    matplotlib\n   148\textras = test\n   149\tcommands =\n   150\t    pyinstaller --onefile run_astropy_tests.py \\\n   151\t                --distpath . \\\n   152\t                --additional-hooks-dir hooks \\\n   153\t                --exclude-module tkinter \\\n   154\t                --collect-submodules=py \\\n   155\t                --hidden-import pytest \\\n   156\t                --hidden-import pytest_openfiles.plugin \\\n   157\t                --hidden-import pytest_remotedata.plugin \\\n   158\t                --hidden-import pytest_doctestplus.plugin \\\n   159\t                --hidden-import pytest_mpl.plugin\n   160\t    ./run_astropy_tests --astropy-root {toxinidir}\n   161\t\n", "path": "/tmp/tmpq_7m_4ya/astropy/tox.ini", "prev_exist": true}, "action_id": "cdcdbbd2-5297-482c-b7bc-f9cd08ab21e7"}