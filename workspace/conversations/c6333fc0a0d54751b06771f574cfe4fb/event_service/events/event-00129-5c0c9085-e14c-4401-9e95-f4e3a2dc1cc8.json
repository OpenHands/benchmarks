{"kind": "ObservationEvent", "id": "5c0c9085-e14c-4401-9e95-f4e3a2dc1cc8", "timestamp": "2025-09-25T11:28:32.360986", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_018rbrPaaEfd6y1ahj5TNawj", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/tmp_qu0p03y/astropy/SOLUTION_SUMMARY.md", "path": "/tmp/tmp_qu0p03y/astropy/SOLUTION_SUMMARY.md", "prev_exist": false, "new_content": "# Fix for Misleading AttributeError Messages in Subclassed SkyCoord\n\n## Problem Description\n\nWhen subclassing `SkyCoord` and creating properties that access non-existent attributes, the error message was misleading. Instead of showing that the attribute accessed within the property doesn't exist, it would show that the property itself doesn't exist.\n\n### Example Issue\n```python\nclass custom_coord(coord.SkyCoord):\n    @property\n    def prop(self):\n        return self.random_attr  # random_attr doesn't exist\n\nc = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\nc.prop  # Should say \"random_attr\" doesn't exist, but said \"prop\" doesn't exist\n```\n\n## Root Cause\n\nThe issue occurred because Python's attribute access mechanism calls `__getattr__` twice when a property raises an `AttributeError`:\n\n1. First call: When `self.random_attr` fails inside the property\n2. Second call: When the property itself fails due to the AttributeError\n\nThe `SkyCoord.__getattr__` method was catching both calls and always returning its generic error message, masking the original error from within the property.\n\n## Solution\n\nModified the `__getattr__` method in `/tmp/tmp_qu0p03y/astropy/astropy/coordinates/sky_coordinate.py` (lines 897-906) to:\n\n1. **Detect properties/descriptors**: Before raising the generic AttributeError, check if the requested attribute exists as a property, staticmethod, classmethod, or descriptor in the class hierarchy.\n\n2. **Re-execute properties**: If the attribute is found to be a property/descriptor, call `super().__getattribute__(attr)` to re-execute it and get the original error message.\n\n3. **Preserve existing behavior**: For truly non-existent attributes, continue to raise the generic AttributeError as before.\n\n### Code Changes\n\n```python\n# Check if the attribute exists as a property or descriptor in the class hierarchy.\n# If it does, then the AttributeError we're handling likely came from within\n# that property/descriptor, and we should not mask it with our own generic message.\nfor cls in type(self).__mro__:\n    if attr in cls.__dict__:\n        class_attr = cls.__dict__[attr]\n        if isinstance(class_attr, (property, staticmethod, classmethod)) or hasattr(class_attr, '__get__'):\n            # This attribute exists as a property/descriptor but raised AttributeError.\n            # Re-access it to get the original error message instead of masking it.\n            return super().__getattribute__(attr)\n```\n\n## Testing\n\nThe fix was thoroughly tested with:\n\n1. **Original issue case**: Property accessing non-existent attribute now shows correct error\n2. **Working properties**: Properties that work correctly continue to work\n3. **Direct attribute access**: Non-existent attributes still show appropriate errors\n4. **Frame attributes**: Existing SkyCoord functionality preserved\n5. **Frame transformations**: Existing SkyCoord functionality preserved\n6. **Static/class methods**: Error messages from these are preserved\n7. **Multiple inheritance**: Works correctly with complex inheritance hierarchies\n8. **Edge cases**: Nested attribute access, descriptors, etc.\n\n## Result\n\n- \u2705 **Before fix**: `'custom_coord' object has no attribute 'prop'` (misleading)\n- \u2705 **After fix**: `'custom_coord' object has no attribute 'random_attr'` (correct)\n\nThe fix is minimal, focused, and preserves all existing SkyCoord functionality while providing accurate error messages for subclassed properties."}, "action_id": "cf2a4703-0cf5-4eec-a90b-d1c6e1d7921b"}