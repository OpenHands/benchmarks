{"kind": "ObservationEvent", "id": "81f1a304-51bd-4f6b-8462-1d964de32bc9", "timestamp": "2025-09-25T11:21:06.571977", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_018pjmfpyS4enxA7vSGVXK97", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmpr5a8owwj/astropy/astropy/timeseries/tests/test_common.py:\n     1\t# Licensed under a 3-clause BSD style license - see LICENSE.rst\n     2\t\n     3\timport pytest\n     4\t\n     5\tfrom numpy.testing import assert_equal\n     6\t\n     7\tfrom astropy import units as u\n     8\tfrom astropy.table import Table, QTable, vstack, join\n     9\tfrom astropy.time import Time\n    10\t\n    11\tfrom astropy.timeseries.sampled import TimeSeries\n    12\tfrom astropy.timeseries.binned import BinnedTimeSeries\n    13\t\n    14\t\n    15\tINPUT_TIME = Time(['2016-03-22T12:30:31', '2015-01-21T12:30:32', '2016-03-22T12:30:40'])\n    16\tPLAIN_TABLE = Table([[1., 2., 11.], [3, 4, 1], ['x', 'y', 'z']], names=['a', 'b', 'c'])\n    17\t\n    18\t\n    19\tclass CommonTimeSeriesTests:\n    20\t\n    21\t    def test_stacking(self):\n    22\t        ts = vstack([self.series, self.series])\n    23\t        assert isinstance(ts, self.series.__class__)\n    24\t\n    25\t    def test_row_slicing(self):\n    26\t        ts = self.series[:2]\n    27\t        assert isinstance(ts, self.series.__class__)\n    28\t\n    29\t    def test_row_indexing(self):\n    30\t        self.series[0][self.time_attr] == Time('2015-01-21T12:30:32')\n    31\t        self.series[self.time_attr][0] == Time('2015-01-21T12:30:32')\n    32\t\n    33\t    def test_column_indexing(self):\n    34\t        assert_equal(self.series['a'], [1, 2, 11])\n    35\t\n    36\t    def test_column_slicing_notime(self):\n    37\t        tab = self.series['a', 'b']\n    38\t        assert not isinstance(tab, self.series.__class__)\n    39\t        assert isinstance(tab, QTable)\n    40\t\n    41\t    def test_add_column(self):\n    42\t        self.series['d'] = [1, 2, 3]\n    43\t\n    44\t    def test_add_row(self):\n    45\t        self.series.add_row(self._row)\n    46\t\n    47\t    def test_set_unit(self):\n    48\t        self.series['d'] = [1, 2, 3]\n    49\t        self.series['d'].unit = 's'\n    50\t\n    51\t    def test_replace_column(self):\n    52\t        self.series.replace_column('c', [1, 3, 4])\n    53\t\n    54\t    def test_required_after_stacking(self):\n    55\t        # When stacking, we have to temporarily relax the checking of the\n    56\t        # columns in the time series, but we need to make sure that the\n    57\t        # checking works again afterwards\n    58\t        ts = vstack([self.series, self.series])\n    59\t        with pytest.raises(ValueError) as exc:\n    60\t            ts.remove_columns(ts.colnames)\n    61\t        assert 'TimeSeries object is invalid' in exc.value.args[0]\n    62\t\n    63\t    def test_join(self):\n    64\t        ts_other = self.series.copy()\n    65\t        ts_other.add_row(self._row)\n    66\t        ts_other['d'] = [11, 22, 33, 44]\n    67\t        ts_other.remove_columns(['a', 'b'])\n    68\t        ts = join(self.series, ts_other)\n    69\t        assert len(ts) == len(self.series)\n    70\t        ts = join(self.series, ts_other, join_type='outer')\n    71\t        assert len(ts) == len(ts_other)\n    72\t\n    73\t\n    74\tclass TestTimeSeries(CommonTimeSeriesTests):\n    75\t\n    76\t    _row = {'time': '2016-03-23T12:30:40', 'a': 1., 'b': 2, 'c': 'a'}\n    77\t\n    78\t    def setup_method(self, method):\n    79\t        self.series = TimeSeries(time=INPUT_TIME, data=PLAIN_TABLE)\n    80\t        self.time_attr = 'time'\n    81\t\n    82\t    def test_column_slicing(self):\n    83\t        ts = self.series['time', 'a']\n    84\t        assert isinstance(ts, TimeSeries)\n    85\t\n    86\t\n    87\tclass TestBinnedTimeSeries(CommonTimeSeriesTests):\n    88\t\n    89\t    _row = {'time_bin_start': '2016-03-23T12:30:40',\n    90\t            'time_bin_size': 2 * u.s, 'a': 1., 'b': 2, 'c': 'a'}\n    91\t\n    92\t    def setup_method(self, method):\n    93\t        self.series = BinnedTimeSeries(time_bin_start=INPUT_TIME,\n    94\t                                       time_bin_size=3 * u.s,\n    95\t                                       data=PLAIN_TABLE)\n    96\t        self.time_attr = 'time_bin_start'\n    97\t\n    98\t    def test_column_slicing(self):\n    99\t        ts = self.series['time_bin_start', 'time_bin_size', 'a']\n   100\t        assert isinstance(ts, BinnedTimeSeries)\n   101\t\n", "path": "/tmp/tmpr5a8owwj/astropy/astropy/timeseries/tests/test_common.py", "prev_exist": true}, "action_id": "bb8bda16-9563-4504-83f1-556f36cda747"}