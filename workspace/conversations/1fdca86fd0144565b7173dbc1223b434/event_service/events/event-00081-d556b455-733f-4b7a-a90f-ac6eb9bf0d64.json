{"kind": "ObservationEvent", "id": "d556b455-733f-4b7a-a90f-ac6eb9bf0d64", "timestamp": "2025-09-26T01:21:21.777125", "source": "environment", "tool_name": "execute_bash", "tool_call_id": "toolu_01RYAnQBjdLopAZHNZCDsaps", "observation": {"kind": "ExecuteBashObservation", "output": "commit edc68a0ac899785cd89a726e3da258e880d641dd\nAuthor: Alex Khomchenko <akhomchenko@gmail.com>\nDate:   Fri Oct 23 15:22:36 2015 +0300\n\n    fix issue #2844\n\ndiff --git a/requests/models.py b/requests/models.py\nindex 2727bee9..639565cf 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -81,7 +81,7 @@ class RequestEncodingMixin(object):\n         \"\"\"\n\n         if isinstance(data, (str, bytes)):\n-            return data\n+            return to_native_string(data)\n         elif hasattr(data, 'read'):\n             return data\n         elif hasattr(data, '__iter__'):\ndiff --git a/test_requests.py b/test_requests.py\nindex c5ac4f8d..7b23e594 100755\n--- a/test_requests.py\n+++ b/test_requests.py\n@@ -139,6 +139,11 @@ class RequestsTestCase(unittest.TestCase):\n         prep = session.prepare_request(request)\n         assert prep.url == 'http://example.com/?z=1&a=1&k=1&d=1'\n\n+    def test_params_bytes_are_encoded(self):\n+        request = requests.Request('GET', 'http://example.com',\n+                                   params=b'test=foo').prepare()\n+        assert request.url == 'http://example.com/?test=foo'\n+\n     def test_mixed_case_scheme_acceptable(self):\n         s = requests.Session()\n         s.proxies = getproxies()", "command": "cd /tmp/tmpuhqdhen5/requests && git show edc68a0a", "error": false, "timeout": false, "metadata": {"exit_code": 0, "pid": -1, "username": "juan-all-hands", "hostname": "juan-dev", "working_dir": "/tmp/tmpuhqdhen5/requests", "py_interpreter_path": "/home/juan-all-hands/v1/benchmarks/.venv/bin/python", "prefix": "", "suffix": "\n[The command completed with exit code 0.]"}}, "action_id": "806b7fdc-9a7c-45bb-b6ce-fc75bd877b79"}