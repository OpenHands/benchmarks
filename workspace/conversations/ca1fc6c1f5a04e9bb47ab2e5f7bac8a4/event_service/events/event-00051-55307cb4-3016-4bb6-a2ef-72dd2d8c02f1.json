{"kind": "ObservationEvent", "id": "55307cb4-3016-4bb6-a2ef-72dd2d8c02f1", "timestamp": "2025-09-26T01:20:26.602272", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01VoF7afgFkYWqnfTTM5VuxU", "observation": {"kind": "StrReplaceEditorObservation", "command": "str_replace", "output": "The file /tmp/tmplyv4866r/sympy/sympy/plotting/plot.py has been edited. Here's the result of running `cat -n` on a snippet of /tmp/tmplyv4866r/sympy/sympy/plotting/plot.py:\n    25\tfrom __future__ import print_function, division\n    26\t\n    27\timport inspect\n    28\ttry:\n    29\t    from collections.abc import Callable\n    30\texcept ImportError:\n    31\t    from collections import Callable\n    32\timport warnings\n    33\timport sys\n    34\t\n    35\tfrom sympy import sympify, Expr, Tuple, Dummy, Symbol\n    36\t\nReview the changes and make sure they are as expected. Edit the file again if necessary.", "path": "/tmp/tmplyv4866r/sympy/sympy/plotting/plot.py", "prev_exist": true, "old_content": "\"\"\"Plotting module for Sympy.\n\nA plot is represented by the ``Plot`` class that contains a reference to the\nbackend and a list of the data series to be plotted. The data series are\ninstances of classes meant to simplify getting points and meshes from sympy\nexpressions. ``plot_backends`` is a dictionary with all the backends.\n\nThis module gives only the essential. For all the fancy stuff use directly\nthe backend. You can get the backend wrapper for every plot from the\n``_backend`` attribute. Moreover the data series classes have various useful\nmethods like ``get_points``, ``get_segments``, ``get_meshes``, etc, that may\nbe useful if you wish to use another plotting library.\n\nEspecially if you need publication ready graphs and this module is not enough\nfor you - just get the ``_backend`` attribute and add whatever you want\ndirectly to it. In the case of matplotlib (the common way to graph data in\npython) just copy ``_backend.fig`` which is the figure and ``_backend.ax``\nwhich is the axis and work on them as you would on any other matplotlib object.\n\nSimplicity of code takes much greater importance than performance. Don't use it\nif you care at all about performance. A new backend instance is initialized\nevery time you call ``show()`` and the old one is left to the garbage collector.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nimport inspect\nfrom collections import Callable\nimport warnings\nimport sys\n\nfrom sympy import sympify, Expr, Tuple, Dummy, Symbol\nfrom sympy.external import import_module\nfrom sympy.core.compatibility import range\nfrom sympy.utilities.decorator import doctest_depends_on\nfrom sympy.utilities.iterables import is_sequence\nfrom .experimental_lambdify import (vectorized_lambdify, lambdify)\n\n# N.B.\n# When changing the minimum module version for matplotlib, please change\n# the same in the `SymPyDocTestFinder`` in `sympy/utilities/runtests.py`\n\n# Backend specific imports - textplot\nfrom sympy.plotting.textplot import textplot\n\n# Global variable\n# Set to False when running tests / doctests so that the plots don't show.\n_show = True\n\n\ndef unset_show():\n    global _show\n    _show = False\n\n##############################################################################\n# The public interface\n##############################################################################\n\ndef _arity(f):\n    \"\"\"\n    Python 2 and 3 compatible version that do not raise a Deprecation warning.\n    \"\"\"\n    if sys.version_info < (3,):\n        return len(inspect.getargspec(f)[0])\n    else:\n       param = inspect.signature(f).parameters.values()\n       return len([p for p in param if p.kind == p.POSITIONAL_OR_KEYWORD])\n\n\nclass Plot(object):\n    \"\"\"The central class of the plotting module.\n\n    For interactive work the function ``plot`` is better suited.\n\n    This class permits the plotting of sympy expressions using numerous\n    backends (matplotlib, textplot, the old pyglet module for sympy, Google\n    charts api, etc).\n\n    The figure can contain an arbitrary number of plots of sympy expressions,\n    lists of coordinates of points, etc. Plot has a private attribute _series that\n    contains all data series to be plotted (expressions for lines or surfaces,\n    lists of points, etc (all subclasses of BaseSeries)). Those data series are\n    instances of classes not imported by ``from sympy import *``.\n\n    The customization of the figure is on two levels. Global options that\n    concern the figure as a whole (eg title, xlabel, scale, etc) and\n    per-data series options (eg name) and aesthetics (eg. color, point shape,\n    line type, etc.).\n\n    The difference between options and aesthetics is that an aesthetic can be\n    a function of the coordinates (or parameters in a parametric plot). The\n    supported values for an aesthetic are:\n    - None (the backend uses default values)\n    - a constant\n    - a function of one variable (the first coordinate or parameter)\n    - a function of two variables (the first and second coordinate or\n    parameters)\n    - a function of three variables (only in nonparametric 3D plots)\n    Their implementation depends on the backend so they may not work in some\n    backends.\n\n    If the plot is parametric and the arity of the aesthetic function permits\n    it the aesthetic is calculated over parameters and not over coordinates.\n    If the arity does not permit calculation over parameters the calculation is\n    done over coordinates.\n\n    Only cartesian coordinates are supported for the moment, but you can use\n    the parametric plots to plot in polar, spherical and cylindrical\n    coordinates.\n\n    The arguments for the constructor Plot must be subclasses of BaseSeries.\n\n    Any global option can be specified as a keyword argument.\n\n    The global options for a figure are:\n\n    - title : str\n    - xlabel : str\n    - ylabel : str\n    - legend : bool\n    - xscale : {'linear', 'log'}\n    - yscale : {'linear', 'log'}\n    - axis : bool\n    - axis_center : tuple of two floats or {'center', 'auto'}\n    - xlim : tuple of two floats\n    - ylim : tuple of two floats\n    - aspect_ratio : tuple of two floats or {'auto'}\n    - autoscale : bool\n    - margin : float in [0, 1]\n\n    The per data series options and aesthetics are:\n    There are none in the base series. See below for options for subclasses.\n\n    Some data series support additional aesthetics or options:\n\n    ListSeries, LineOver1DRangeSeries, Parametric2DLineSeries,\n    Parametric3DLineSeries support the following:\n\n    Aesthetics:\n\n    - line_color : function which returns a float.\n\n    options:\n\n    - label : str\n    - steps : bool\n    - integers_only : bool\n\n    SurfaceOver2DRangeSeries, ParametricSurfaceSeries support the following:\n\n    aesthetics:\n\n    - surface_color : function which returns a float.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(Plot, self).__init__()\n\n        #  Options for the graph as a whole.\n        #  The possible values for each option are described in the docstring of\n        # Plot. They are based purely on convention, no checking is done.\n        self.title = None\n        self.xlabel = None\n        self.ylabel = None\n        self.aspect_ratio = 'auto'\n        self.xlim = None\n        self.ylim = None\n        self.axis_center = 'auto'\n        self.axis = True\n        self.xscale = 'linear'\n        self.yscale = 'linear'\n        self.legend = False\n        self.autoscale = True\n        self.margin = 0\n\n        # Contains the data objects to be plotted. The backend should be smart\n        # enough to iterate over this list.\n        self._series = []\n        self._series.extend(args)\n\n        # The backend type. On every show() a new backend instance is created\n        # in self._backend which is tightly coupled to the Plot instance\n        # (thanks to the parent attribute of the backend).\n        self.backend = DefaultBackend\n\n        # The keyword arguments should only contain options for the plot.\n        for key, val in kwargs.items():\n            if hasattr(self, key):\n                setattr(self, key, val)\n\n    def show(self):\n        # TODO move this to the backend (also for save)\n        if hasattr(self, '_backend'):\n            self._backend.close()\n        self._backend = self.backend(self)\n        self._backend.show()\n\n    def save(self, path):\n        if hasattr(self, '_backend'):\n            self._backend.close()\n        self._backend = self.backend(self)\n        self._backend.save(path)\n\n    def __str__(self):\n        series_strs = [('[%d]: ' % i) + str(s)\n                       for i, s in enumerate(self._series)]\n        return 'Plot object containing:\\n' + '\\n'.join(series_strs)\n\n    def __getitem__(self, index):\n        return self._series[index]\n\n    def __setitem__(self, index, *args):\n        if len(args) == 1 and isinstance(args[0], BaseSeries):\n            self._series[index] = args\n\n    def __delitem__(self, index):\n        del self._series[index]\n\n    @doctest_depends_on(modules=('numpy', 'matplotlib',))\n    def append(self, arg):\n        \"\"\"Adds an element from a plot's series to an existing plot.\n\n        Examples\n        ========\n\n        Consider two ``Plot`` objects, ``p1`` and ``p2``. To add the\n        second plot's first series object to the first, use the\n        ``append`` method, like so:\n\n        >>> from sympy import symbols\n        >>> from sympy.plotting import plot\n        >>> x = symbols('x')\n        >>> p1 = plot(x*x)\n        >>> p2 = plot(x)\n        >>> p1.append(p2[0])\n        >>> p1\n        Plot object containing:\n        [0]: cartesian line: x**2 for x over (-10.0, 10.0)\n        [1]: cartesian line: x for x over (-10.0, 10.0)\n\n        See Also\n        ========\n        extend\n\n        \"\"\"\n        if isinstance(arg, BaseSeries):\n            self._series.append(arg)\n        else:\n            raise TypeError('Must specify element of plot to append.')\n\n    @doctest_depends_on(modules=('numpy', 'matplotlib',))\n    def extend(self, arg):\n        \"\"\"Adds all series from another plot.\n\n        Examples\n        ========\n\n        Consider two ``Plot`` objects, ``p1`` and ``p2``. To add the\n        second plot to the first, use the ``extend`` method, like so:\n\n        >>> from sympy import symbols\n        >>> from sympy.plotting import plot\n        >>> x = symbols('x')\n        >>> p1 = plot(x*x)\n        >>> p2 = plot(x)\n        >>> p1.extend(p2)\n        >>> p1\n        Plot object containing:\n        [0]: cartesian line: x**2 for x over (-10.0, 10.0)\n        [1]: cartesian line: x for x over (-10.0, 10.0)\n\n        \"\"\"\n        if isinstance(arg, Plot):\n            self._series.extend(arg._series)\n        elif is_sequence(arg):\n            self._series.extend(arg)\n        else:\n            raise TypeError('Expecting Plot or sequence of BaseSeries')\n\n\n##############################################################################\n# Data Series\n##############################################################################\n#TODO more general way to calculate aesthetics (see get_color_array)\n\n### The base class for all series\nclass BaseSeries(object):\n    \"\"\"Base class for the data objects containing stuff to be plotted.\n\n    The backend should check if it supports the data series that it's given.\n    (eg TextBackend supports only LineOver1DRange).\n    It's the backend responsibility to know how to use the class of\n    data series that it's given.\n\n    Some data series classes are grouped (using a class attribute like is_2Dline)\n    according to the api they present (based only on convention). The backend is\n    not obliged to use that api (eg. The LineOver1DRange belongs to the\n    is_2Dline group and presents the get_points method, but the\n    TextBackend does not use the get_points method).\n    \"\"\"\n\n    # Some flags follow. The rationale for using flags instead of checking base\n    # classes is that setting multiple flags is simpler than multiple\n    # inheritance.\n\n    is_2Dline = False\n    # Some of the backends expect:\n    #  - get_points returning 1D np.arrays list_x, list_y\n    #  - get_segments returning np.array (done in Line2DBaseSeries)\n    #  - get_color_array returning 1D np.array (done in Line2DBaseSeries)\n    # with the colors calculated at the points from get_points\n\n    is_3Dline = False\n    # Some of the backends expect:\n    #  - get_points returning 1D np.arrays list_x, list_y, list_y\n    #  - get_segments returning np.array (done in Line2DBaseSeries)\n    #  - get_color_array returning 1D np.array (done in Line2DBaseSeries)\n    # with the colors calculated at the points from get_points\n\n    is_3Dsurface = False\n    # Some of the backends expect:\n    #   - get_meshes returning mesh_x, mesh_y, mesh_z (2D np.arrays)\n    #   - get_points an alias for get_meshes\n\n    is_contour = False\n    # Some of the backends expect:\n    #   - get_meshes returning mesh_x, mesh_y, mesh_z (2D np.arrays)\n    #   - get_points an alias for get_meshes\n\n    is_implicit = False\n    # Some of the backends expect:\n    #   - get_meshes returning mesh_x (1D array), mesh_y(1D array,\n    #     mesh_z (2D np.arrays)\n    #   - get_points an alias for get_meshes\n    #Different from is_contour as the colormap in backend will be\n    #different\n\n    is_parametric = False\n    # The calculation of aesthetics expects:\n    #   - get_parameter_points returning one or two np.arrays (1D or 2D)\n    # used for calculation aesthetics\n\n    def __init__(self):\n        super(BaseSeries, self).__init__()\n\n    @property\n    def is_3D(self):\n        flags3D = [\n            self.is_3Dline,\n            self.is_3Dsurface\n        ]\n        return any(flags3D)\n\n    @property\n    def is_line(self):\n        flagslines = [\n            self.is_2Dline,\n            self.is_3Dline\n        ]\n        return any(flagslines)\n\n\n### 2D lines\nclass Line2DBaseSeries(BaseSeries):\n    \"\"\"A base class for 2D lines.\n\n    - adding the label, steps and only_integers options\n    - making is_2Dline true\n    - defining get_segments and get_color_array\n    \"\"\"\n\n    is_2Dline = True\n\n    _dim = 2\n\n    def __init__(self):\n        super(Line2DBaseSeries, self).__init__()\n        self.label = None\n        self.steps = False\n        self.only_integers = False\n        self.line_color = None\n\n    def get_segments(self):\n        np = import_module('numpy')\n        points = self.get_points()\n        if self.steps is True:\n            x = np.array((points[0], points[0])).T.flatten()[1:]\n            y = np.array((points[1], points[1])).T.flatten()[:-1]\n            points = (x, y)\n        points = np.ma.array(points).T.reshape(-1, 1, self._dim)\n        return np.ma.concatenate([points[:-1], points[1:]], axis=1)\n\n    def get_color_array(self):\n        np = import_module('numpy')\n        c = self.line_color\n        if hasattr(c, '__call__'):\n            f = np.vectorize(c)\n            arity = _arity(c)\n            if arity == 1 and self.is_parametric:\n                x = self.get_parameter_points()\n                return f(centers_of_segments(x))\n            else:\n                variables = list(map(centers_of_segments, self.get_points()))\n                if arity == 1:\n                    return f(variables[0])\n                elif arity == 2:\n                    return f(*variables[:2])\n                else:  # only if the line is 3D (otherwise raises an error)\n                    return f(*variables)\n        else:\n            return c*np.ones(self.nb_of_points)\n\n\nclass List2DSeries(Line2DBaseSeries):\n    \"\"\"Representation for a line consisting of list of points.\"\"\"\n\n    def __init__(self, list_x, list_y):\n        np = import_module('numpy')\n        super(List2DSeries, self).__init__()\n        self.list_x = np.array(list_x)\n        self.list_y = np.array(list_y)\n        self.label = 'list'\n\n    def __str__(self):\n        return 'list plot'\n\n    def get_points(self):\n        return (self.list_x, self.list_y)\n\n\nclass LineOver1DRangeSeries(Line2DBaseSeries):\n    \"\"\"Representation for a line consisting of a SymPy expression over a range.\"\"\"\n\n    def __init__(self, expr, var_start_end, **kwargs):\n        super(LineOver1DRangeSeries, self).__init__()\n        self.expr = sympify(expr)\n        self.label = str(self.expr)\n        self.var = sympify(var_start_end[0])\n        self.start = float(var_start_end[1])\n        self.end = float(var_start_end[2])\n        self.nb_of_points = kwargs.get('nb_of_points', 300)\n        self.adaptive = kwargs.get('adaptive', True)\n        self.depth = kwargs.get('depth', 12)\n        self.line_color = kwargs.get('line_color', None)\n\n    def __str__(self):\n        return 'cartesian line: %s for %s over %s' % (\n            str(self.expr), str(self.var), str((self.start, self.end)))\n\n    def get_segments(self):\n        \"\"\"\n        Adaptively gets segments for plotting.\n\n        The adaptive sampling is done by recursively checking if three\n        points are almost collinear. If they are not collinear, then more\n        points are added between those points.\n\n        References\n        ==========\n        [1] Adaptive polygonal approximation of parametric curves,\n            Luiz Henrique de Figueiredo.\n\n        \"\"\"\n        if self.only_integers or not self.adaptive:\n            return super(LineOver1DRangeSeries, self).get_segments()\n        else:\n            f = lambdify([self.var], self.expr)\n            list_segments = []\n\n            def sample(p, q, depth):\n                \"\"\" Samples recursively if three points are almost collinear.\n                For depth < 6, points are added irrespective of whether they\n                satisfy the collinearity condition or not. The maximum depth\n                allowed is 12.\n                \"\"\"\n                np = import_module('numpy')\n                #Randomly sample to avoid aliasing.\n                random = 0.45 + np.random.rand() * 0.1\n                xnew = p[0] + random * (q[0] - p[0])\n                ynew = f(xnew)\n                new_point = np.array([xnew, ynew])\n\n                #Maximum depth\n                if depth > self.depth:\n                    list_segments.append([p, q])\n\n                #Sample irrespective of whether the line is flat till the\n                #depth of 6. We are not using linspace to avoid aliasing.\n                elif depth < 6:\n                    sample(p, new_point, depth + 1)\n                    sample(new_point, q, depth + 1)\n\n                #Sample ten points if complex values are encountered\n                #at both ends. If there is a real value in between, then\n                #sample those points further.\n                elif p[1] is None and q[1] is None:\n                    xarray = np.linspace(p[0], q[0], 10)\n                    yarray = list(map(f, xarray))\n                    if any(y is not None for y in yarray):\n                        for i in range(len(yarray) - 1):\n                            if yarray[i] is not None or yarray[i + 1] is not None:\n                                sample([xarray[i], yarray[i]],\n                                    [xarray[i + 1], yarray[i + 1]], depth + 1)\n\n                #Sample further if one of the end points in None( i.e. a complex\n                #value) or the three points are not almost collinear.\n                elif (p[1] is None or q[1] is None or new_point[1] is None\n                        or not flat(p, new_point, q)):\n                    sample(p, new_point, depth + 1)\n                    sample(new_point, q, depth + 1)\n                else:\n                    list_segments.append([p, q])\n\n            f_start = f(self.start)\n            f_end = f(self.end)\n            sample([self.start, f_start], [self.end, f_end], 0)\n            return list_segments\n\n    def get_points(self):\n        np = import_module('numpy')\n        if self.only_integers is True:\n            list_x = np.linspace(int(self.start), int(self.end),\n                    num=int(self.end) - int(self.start) + 1)\n        else:\n            list_x = np.linspace(self.start, self.end, num=self.nb_of_points)\n        f = vectorized_lambdify([self.var], self.expr)\n        list_y = f(list_x)\n        return (list_x, list_y)\n\n\nclass Parametric2DLineSeries(Line2DBaseSeries):\n    \"\"\"Representation for a line consisting of two parametric sympy expressions\n    over a range.\"\"\"\n\n    is_parametric = True\n\n    def __init__(self, expr_x, expr_y, var_start_end, **kwargs):\n        super(Parametric2DLineSeries, self).__init__()\n        self.expr_x = sympify(expr_x)\n        self.expr_y = sympify(expr_y)\n        self.label = \"(%s, %s)\" % (str(self.expr_x), str(self.expr_y))\n        self.var = sympify(var_start_end[0])\n        self.start = float(var_start_end[1])\n        self.end = float(var_start_end[2])\n        self.nb_of_points = kwargs.get('nb_of_points', 300)\n        self.adaptive = kwargs.get('adaptive', True)\n        self.depth = kwargs.get('depth', 12)\n        self.line_color = kwargs.get('line_color', None)\n\n    def __str__(self):\n        return 'parametric cartesian line: (%s, %s) for %s over %s' % (\n            str(self.expr_x), str(self.expr_y), str(self.var),\n            str((self.start, self.end)))\n\n    def get_parameter_points(self):\n        np = import_module('numpy')\n        return np.linspace(self.start, self.end, num=self.nb_of_points)\n\n    def get_points(self):\n        param = self.get_parameter_points()\n        fx = vectorized_lambdify([self.var], self.expr_x)\n        fy = vectorized_lambdify([self.var], self.expr_y)\n        list_x = fx(param)\n        list_y = fy(param)\n        return (list_x, list_y)\n\n    def get_segments(self):\n        \"\"\"\n        Adaptively gets segments for plotting.\n\n        The adaptive sampling is done by recursively checking if three\n        points are almost collinear. If they are not collinear, then more\n        points are added between those points.\n\n        References\n        ==========\n        [1] Adaptive polygonal approximation of parametric curves,\n            Luiz Henrique de Figueiredo.\n\n        \"\"\"\n        if not self.adaptive:\n            return super(Parametric2DLineSeries, self).get_segments()\n\n        f_x = lambdify([self.var], self.expr_x)\n        f_y = lambdify([self.var], self.expr_y)\n        list_segments = []\n\n        def sample(param_p, param_q, p, q, depth):\n            \"\"\" Samples recursively if three points are almost collinear.\n            For depth < 6, points are added irrespective of whether they\n            satisfy the collinearity condition or not. The maximum depth\n            allowed is 12.\n            \"\"\"\n            #Randomly sample to avoid aliasing.\n            np = import_module('numpy')\n            random = 0.45 + np.random.rand() * 0.1\n            param_new = param_p + random * (param_q - param_p)\n            xnew = f_x(param_new)\n            ynew = f_y(param_new)\n            new_point = np.array([xnew, ynew])\n\n            #Maximum depth\n            if depth > self.depth:\n                list_segments.append([p, q])\n\n            #Sample irrespective of whether the line is flat till the\n            #depth of 6. We are not using linspace to avoid aliasing.\n            elif depth < 6:\n                sample(param_p, param_new, p, new_point, depth + 1)\n                sample(param_new, param_q, new_point, q, depth + 1)\n\n            #Sample ten points if complex values are encountered\n            #at both ends. If there is a real value in between, then\n            #sample those points further.\n            elif ((p[0] is None and q[1] is None) or\n                    (p[1] is None and q[1] is None)):\n                param_array = np.linspace(param_p, param_q, 10)\n                x_array = list(map(f_x, param_array))\n                y_array = list(map(f_y, param_array))\n                if any(x is not None and y is not None\n                        for x, y in zip(x_array, y_array)):\n                    for i in range(len(y_array) - 1):\n                        if ((x_array[i] is not None and y_array[i] is not None) or\n                                (x_array[i + 1] is not None and y_array[i + 1] is not None)):\n                            point_a = [x_array[i], y_array[i]]\n                            point_b = [x_array[i + 1], y_array[i + 1]]\n                            sample(param_array[i], param_array[i], point_a,\n                                   point_b, depth + 1)\n\n            #Sample further if one of the end points in None( ie a complex\n            #value) or the three points are not almost collinear.\n            elif (p[0] is None or p[1] is None\n                    or q[1] is None or q[0] is None\n                    or not flat(p, new_point, q)):\n                sample(param_p, param_new, p, new_point, depth + 1)\n                sample(param_new, param_q, new_point, q, depth + 1)\n            else:\n                list_segments.append([p, q])\n\n        f_start_x = f_x(self.start)\n        f_start_y = f_y(self.start)\n        start = [f_start_x, f_start_y]\n        f_end_x = f_x(self.end)\n        f_end_y = f_y(self.end)\n        end = [f_end_x, f_end_y]\n        sample(self.start, self.end, start, end, 0)\n        return list_segments\n\n\n### 3D lines\nclass Line3DBaseSeries(Line2DBaseSeries):\n    \"\"\"A base class for 3D lines.\n\n    Most of the stuff is derived from Line2DBaseSeries.\"\"\"\n\n    is_2Dline = False\n    is_3Dline = True\n    _dim = 3\n\n    def __init__(self):\n        super(Line3DBaseSeries, self).__init__()\n\n\nclass Parametric3DLineSeries(Line3DBaseSeries):\n    \"\"\"Representation for a 3D line consisting of two parametric sympy\n    expressions and a range.\"\"\"\n\n    def __init__(self, expr_x, expr_y, expr_z, var_start_end, **kwargs):\n        super(Parametric3DLineSeries, self).__init__()\n        self.expr_x = sympify(expr_x)\n        self.expr_y = sympify(expr_y)\n        self.expr_z = sympify(expr_z)\n        self.label = \"(%s, %s)\" % (str(self.expr_x), str(self.expr_y))\n        self.var = sympify(var_start_end[0])\n        self.start = float(var_start_end[1])\n        self.end = float(var_start_end[2])\n        self.nb_of_points = kwargs.get('nb_of_points', 300)\n        self.line_color = kwargs.get('line_color', None)\n\n    def __str__(self):\n        return '3D parametric cartesian line: (%s, %s, %s) for %s over %s' % (\n            str(self.expr_x), str(self.expr_y), str(self.expr_z),\n            str(self.var), str((self.start, self.end)))\n\n    def get_parameter_points(self):\n        np = import_module('numpy')\n        return np.linspace(self.start, self.end, num=self.nb_of_points)\n\n    def get_points(self):\n        param = self.get_parameter_points()\n        fx = vectorized_lambdify([self.var], self.expr_x)\n        fy = vectorized_lambdify([self.var], self.expr_y)\n        fz = vectorized_lambdify([self.var], self.expr_z)\n        list_x = fx(param)\n        list_y = fy(param)\n        list_z = fz(param)\n        return (list_x, list_y, list_z)\n\n\n### Surfaces\nclass SurfaceBaseSeries(BaseSeries):\n    \"\"\"A base class for 3D surfaces.\"\"\"\n\n    is_3Dsurface = True\n\n    def __init__(self):\n        super(SurfaceBaseSeries, self).__init__()\n        self.surface_color = None\n\n    def get_color_array(self):\n        np = import_module('numpy')\n        c = self.surface_color\n        if isinstance(c, Callable):\n            f = np.vectorize(c)\n            arity = _arity(c)\n            if self.is_parametric:\n                variables = list(map(centers_of_faces, self.get_parameter_meshes()))\n                if arity == 1:\n                    return f(variables[0])\n                elif arity == 2:\n                    return f(*variables)\n            variables = list(map(centers_of_faces, self.get_meshes()))\n            if arity == 1:\n                return f(variables[0])\n            elif arity == 2:\n                return f(*variables[:2])\n            else:\n                return f(*variables)\n        else:\n            return c*np.ones(self.nb_of_points)\n\n\nclass SurfaceOver2DRangeSeries(SurfaceBaseSeries):\n    \"\"\"Representation for a 3D surface consisting of a sympy expression and 2D\n    range.\"\"\"\n    def __init__(self, expr, var_start_end_x, var_start_end_y, **kwargs):\n        super(SurfaceOver2DRangeSeries, self).__init__()\n        self.expr = sympify(expr)\n        self.var_x = sympify(var_start_end_x[0])\n        self.start_x = float(var_start_end_x[1])\n        self.end_x = float(var_start_end_x[2])\n        self.var_y = sympify(var_start_end_y[0])\n        self.start_y = float(var_start_end_y[1])\n        self.end_y = float(var_start_end_y[2])\n        self.nb_of_points_x = kwargs.get('nb_of_points_x', 50)\n        self.nb_of_points_y = kwargs.get('nb_of_points_y', 50)\n        self.surface_color = kwargs.get('surface_color', None)\n\n    def __str__(self):\n        return ('cartesian surface: %s for'\n                ' %s over %s and %s over %s') % (\n                    str(self.expr),\n                    str(self.var_x),\n                    str((self.start_x, self.end_x)),\n                    str(self.var_y),\n                    str((self.start_y, self.end_y)))\n\n    def get_meshes(self):\n        np = import_module('numpy')\n        mesh_x, mesh_y = np.meshgrid(np.linspace(self.start_x, self.end_x,\n                                                 num=self.nb_of_points_x),\n                                     np.linspace(self.start_y, self.end_y,\n                                                 num=self.nb_of_points_y))\n        f = vectorized_lambdify((self.var_x, self.var_y), self.expr)\n        return (mesh_x, mesh_y, f(mesh_x, mesh_y))\n\n\nclass ParametricSurfaceSeries(SurfaceBaseSeries):\n    \"\"\"Representation for a 3D surface consisting of three parametric sympy\n    expressions and a range.\"\"\"\n\n    is_parametric = True\n\n    def __init__(\n        self, expr_x, expr_y, expr_z, var_start_end_u, var_start_end_v,\n            **kwargs):\n        super(ParametricSurfaceSeries, self).__init__()\n        self.expr_x = sympify(expr_x)\n        self.expr_y = sympify(expr_y)\n        self.expr_z = sympify(expr_z)\n        self.var_u = sympify(var_start_end_u[0])\n        self.start_u = float(var_start_end_u[1])\n        self.end_u = float(var_start_end_u[2])\n        self.var_v = sympify(var_start_end_v[0])\n        self.start_v = float(var_start_end_v[1])\n        self.end_v = float(var_start_end_v[2])\n        self.nb_of_points_u = kwargs.get('nb_of_points_u', 50)\n        self.nb_of_points_v = kwargs.get('nb_of_points_v', 50)\n        self.surface_color = kwargs.get('surface_color', None)\n\n    def __str__(self):\n        return ('parametric cartesian surface: (%s, %s, %s) for'\n                ' %s over %s and %s over %s') % (\n                    str(self.expr_x),\n                    str(self.expr_y),\n                    str(self.expr_z),\n                    str(self.var_u),\n                    str((self.start_u, self.end_u)),\n                    str(self.var_v),\n                    str((self.start_v, self.end_v)))\n\n    def get_parameter_meshes(self):\n        np = import_module('numpy')\n        return np.meshgrid(np.linspace(self.start_u, self.end_u,\n                                       num=self.nb_of_points_u),\n                           np.linspace(self.start_v, self.end_v,\n                                       num=self.nb_of_points_v))\n\n    def get_meshes(self):\n        mesh_u, mesh_v = self.get_parameter_meshes()\n        fx = vectorized_lambdify((self.var_u, self.var_v), self.expr_x)\n        fy = vectorized_lambdify((self.var_u, self.var_v), self.expr_y)\n        fz = vectorized_lambdify((self.var_u, self.var_v), self.expr_z)\n        return (fx(mesh_u, mesh_v), fy(mesh_u, mesh_v), fz(mesh_u, mesh_v))\n\n\n### Contours\nclass ContourSeries(BaseSeries):\n    \"\"\"Representation for a contour plot.\"\"\"\n    #The code is mostly repetition of SurfaceOver2DRange.\n    #XXX: Presently not used in any of those functions.\n    #XXX: Add contour plot and use this seties.\n\n    is_contour = True\n\n    def __init__(self, expr, var_start_end_x, var_start_end_y):\n        super(ContourSeries, self).__init__()\n        self.nb_of_points_x = 50\n        self.nb_of_points_y = 50\n        self.expr = sympify(expr)\n        self.var_x = sympify(var_start_end_x[0])\n        self.start_x = float(var_start_end_x[1])\n        self.end_x = float(var_start_end_x[2])\n        self.var_y = sympify(var_start_end_y[0])\n        self.start_y = float(var_start_end_y[1])\n        self.end_y = float(var_start_end_y[2])\n\n        self.get_points = self.get_meshes\n\n    def __str__(self):\n        return ('contour: %s for '\n                '%s over %s and %s over %s') % (\n                    str(self.expr),\n                    str(self.var_x),\n                    str((self.start_x, self.end_x)),\n                    str(self.var_y),\n                    str((self.start_y, self.end_y)))\n\n    def get_meshes(self):\n        np = import_module('numpy')\n        mesh_x, mesh_y = np.meshgrid(np.linspace(self.start_x, self.end_x,\n                                                 num=self.nb_of_points_x),\n                                     np.linspace(self.start_y, self.end_y,\n                                                 num=self.nb_of_points_y))\n        f = vectorized_lambdify((self.var_x, self.var_y), self.expr)\n        return (mesh_x, mesh_y, f(mesh_x, mesh_y))\n\n\n##############################################################################\n# Backends\n##############################################################################\n\nclass BaseBackend(object):\n    def __init__(self, parent):\n        super(BaseBackend, self).__init__()\n        self.parent = parent\n\n\n## don't have to check for the success of importing matplotlib in each case;\n## we will only be using this backend if we can successfully import matploblib\nclass MatplotlibBackend(BaseBackend):\n    def __init__(self, parent):\n        super(MatplotlibBackend, self).__init__(parent)\n        are_3D = [s.is_3D for s in self.parent._series]\n        self.matplotlib = import_module('matplotlib',\n            __import__kwargs={'fromlist': ['pyplot', 'cm', 'collections']},\n            min_module_version='1.1.0', catch=(RuntimeError,))\n        self.plt = self.matplotlib.pyplot\n        self.cm = self.matplotlib.cm\n        self.LineCollection = self.matplotlib.collections.LineCollection\n        if any(are_3D) and not all(are_3D):\n            raise ValueError('The matplotlib backend can not mix 2D and 3D.')\n        elif not any(are_3D):\n            self.fig = self.plt.figure()\n            self.ax = self.fig.add_subplot(111)\n            self.ax.spines['left'].set_position('zero')\n            self.ax.spines['right'].set_color('none')\n            self.ax.spines['bottom'].set_position('zero')\n            self.ax.spines['top'].set_color('none')\n            self.ax.spines['left'].set_smart_bounds(True)\n            self.ax.spines['bottom'].set_smart_bounds(False)\n            self.ax.xaxis.set_ticks_position('bottom')\n            self.ax.yaxis.set_ticks_position('left')\n        elif all(are_3D):\n            ## mpl_toolkits.mplot3d is necessary for\n            ##      projection='3d'\n            mpl_toolkits = import_module('mpl_toolkits',\n                                     __import__kwargs={'fromlist': ['mplot3d']})\n            self.fig = self.plt.figure()\n            self.ax = self.fig.add_subplot(111, projection='3d')\n\n    def process_series(self):\n        parent = self.parent\n\n        for s in self.parent._series:\n            # Create the collections\n            if s.is_2Dline:\n                collection = self.LineCollection(s.get_segments())\n                self.ax.add_collection(collection)\n            elif s.is_contour:\n                self.ax.contour(*s.get_meshes())\n            elif s.is_3Dline:\n                # TODO too complicated, I blame matplotlib\n                mpl_toolkits = import_module('mpl_toolkits',\n                    __import__kwargs={'fromlist': ['mplot3d']})\n                art3d = mpl_toolkits.mplot3d.art3d\n                collection = art3d.Line3DCollection(s.get_segments())\n                self.ax.add_collection(collection)\n                x, y, z = s.get_points()\n                self.ax.set_xlim((min(x), max(x)))\n                self.ax.set_ylim((min(y), max(y)))\n                self.ax.set_zlim((min(z), max(z)))\n            elif s.is_3Dsurface:\n                x, y, z = s.get_meshes()\n                collection = self.ax.plot_surface(x, y, z,\n                    cmap=getattr(self.cm, 'viridis', self.cm.jet),\n                    rstride=1, cstride=1, linewidth=0.1)\n            elif s.is_implicit:\n                #Smart bounds have to be set to False for implicit plots.\n                self.ax.spines['left'].set_smart_bounds(False)\n                self.ax.spines['bottom'].set_smart_bounds(False)\n                points = s.get_raster()\n                if len(points) == 2:\n                    #interval math plotting\n                    x, y = _matplotlib_list(points[0])\n                    self.ax.fill(x, y, facecolor=s.line_color, edgecolor='None')\n                else:\n                    # use contourf or contour depending on whether it is\n                    # an inequality or equality.\n                    #XXX: ``contour`` plots multiple lines. Should be fixed.\n                    ListedColormap = self.matplotlib.colors.ListedColormap\n                    colormap = ListedColormap([\"white\", s.line_color])\n                    xarray, yarray, zarray, plot_type = points\n                    if plot_type == 'contour':\n                        self.ax.contour(xarray, yarray, zarray, cmap=colormap)\n                    else:\n                        self.ax.contourf(xarray, yarray, zarray, cmap=colormap)\n            else:\n                raise ValueError('The matplotlib backend supports only '\n                                 'is_2Dline, is_3Dline, is_3Dsurface and '\n                                 'is_contour objects.')\n\n            # Customise the collections with the corresponding per-series\n            # options.\n            if hasattr(s, 'label'):\n                collection.set_label(s.label)\n            if s.is_line and s.line_color:\n                if isinstance(s.line_color, (float, int)) or isinstance(s.line_color, Callable):\n                    color_array = s.get_color_array()\n                    collection.set_array(color_array)\n                else:\n                    collection.set_color(s.line_color)\n            if s.is_3Dsurface and s.surface_color:\n                if self.matplotlib.__version__ < \"1.2.0\":  # TODO in the distant future remove this check\n                    warnings.warn('The version of matplotlib is too old to use surface coloring.')\n                elif isinstance(s.surface_color, (float, int)) or isinstance(s.surface_color, Callable):\n                    color_array = s.get_color_array()\n                    color_array = color_array.reshape(color_array.size)\n                    collection.set_array(color_array)\n                else:\n                    collection.set_color(s.surface_color)\n\n        # Set global options.\n        # TODO The 3D stuff\n        # XXX The order of those is important.\n\n        mpl_toolkits = import_module('mpl_toolkits',\n            __import__kwargs={'fromlist': ['mplot3d']})\n        Axes3D = mpl_toolkits.mplot3d.Axes3D\n        if parent.xscale and not isinstance(self.ax, Axes3D):\n            self.ax.set_xscale(parent.xscale)\n        if parent.yscale and not isinstance(self.ax, Axes3D):\n            self.ax.set_yscale(parent.yscale)\n        if parent.xlim:\n            self.ax.set_xlim(parent.xlim)\n        else:\n            if all(isinstance(s, LineOver1DRangeSeries) for s in parent._series):\n                starts = [s.start for s in parent._series]\n                ends = [s.end for s in parent._series]\n                self.ax.set_xlim(min(starts), max(ends))\n        if parent.ylim:\n            self.ax.set_ylim(parent.ylim)\n        if not isinstance(self.ax, Axes3D) or self.matplotlib.__version__ >= '1.2.0':  # XXX in the distant future remove this check\n            self.ax.set_autoscale_on(parent.autoscale)\n        if parent.axis_center:\n            val = parent.axis_center\n            if isinstance(self.ax, Axes3D):\n                pass\n            elif val == 'center':\n                self.ax.spines['left'].set_position('center')\n                self.ax.spines['bottom'].set_position('center')\n            elif val == 'auto':\n                xl, xh = self.ax.get_xlim()\n                yl, yh = self.ax.get_ylim()\n                pos_left = ('data', 0) if xl*xh <= 0 else 'center'\n                pos_bottom = ('data', 0) if yl*yh <= 0 else 'center'\n                self.ax.spines['left'].set_position(pos_left)\n                self.ax.spines['bottom'].set_position(pos_bottom)\n            else:\n                self.ax.spines['left'].set_position(('data', val[0]))\n                self.ax.spines['bottom'].set_position(('data', val[1]))\n        if not parent.axis:\n            self.ax.set_axis_off()\n        if parent.legend:\n            if self.ax.legend():\n                self.ax.legend_.set_visible(parent.legend)\n        if parent.margin:\n            self.ax.set_xmargin(parent.margin)\n            self.ax.set_ymargin(parent.margin)\n        if parent.title:\n            self.ax.set_title(parent.title)\n        if parent.xlabel:\n            self.ax.set_xlabel(parent.xlabel, position=(1, 0))\n        if parent.ylabel:\n            self.ax.set_ylabel(parent.ylabel, position=(0, 1))\n\n    def show(self):\n        self.process_series()\n        #TODO after fixing https://github.com/ipython/ipython/issues/1255\n        # you can uncomment the next line and remove the pyplot.show() call\n        #self.fig.show()\n        if _show:\n            self.plt.show()\n\n    def save(self, path):\n        self.process_series()\n        self.fig.savefig(path)\n\n    def close(self):\n        self.plt.close(self.fig)\n\n\nclass TextBackend(BaseBackend):\n    def __init__(self, parent):\n        super(TextBackend, self).__init__(parent)\n\n    def show(self):\n        if len(self.parent._series) != 1:\n            raise ValueError(\n                'The TextBackend supports only one graph per Plot.')\n        elif not isinstance(self.parent._series[0], LineOver1DRangeSeries):\n            raise ValueError(\n                'The TextBackend supports only expressions over a 1D range')\n        else:\n            ser = self.parent._series[0]\n            textplot(ser.expr, ser.start, ser.end)\n\n    def close(self):\n        pass\n\n\nclass DefaultBackend(BaseBackend):\n    def __new__(cls, parent):\n        matplotlib = import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))\n        if matplotlib:\n            return MatplotlibBackend(parent)\n        else:\n            return TextBackend(parent)\n\n\nplot_backends = {\n    'matplotlib': MatplotlibBackend,\n    'text': TextBackend,\n    'default': DefaultBackend\n}\n\n\n##############################################################################\n# Finding the centers of line segments or mesh faces\n##############################################################################\n\ndef centers_of_segments(array):\n    np = import_module('numpy')\n    return np.mean(np.vstack((array[:-1], array[1:])), 0)\n\n\ndef centers_of_faces(array):\n    np = import_module('numpy')\n    return np.mean(np.dstack((array[:-1, :-1],\n                                 array[1:, :-1],\n                                 array[:-1, 1: ],\n                                 array[:-1, :-1],\n                                 )), 2)\n\n\ndef flat(x, y, z, eps=1e-3):\n    \"\"\"Checks whether three points are almost collinear\"\"\"\n    np = import_module('numpy')\n    # Workaround plotting piecewise (#8577):\n    #   workaround for `lambdify` in `.experimental_lambdify` fails\n    #   to return numerical values in some cases. Lower-level fix\n    #   in `lambdify` is possible.\n    vector_a = (x - y).astype(np.float)\n    vector_b = (z - y).astype(np.float)\n    dot_product = np.dot(vector_a, vector_b)\n    vector_a_norm = np.linalg.norm(vector_a)\n    vector_b_norm = np.linalg.norm(vector_b)\n    cos_theta = dot_product / (vector_a_norm * vector_b_norm)\n    return abs(cos_theta + 1) < eps\n\n\ndef _matplotlib_list(interval_list):\n    \"\"\"\n    Returns lists for matplotlib ``fill`` command from a list of bounding\n    rectangular intervals\n    \"\"\"\n    xlist = []\n    ylist = []\n    if len(interval_list):\n        for intervals in interval_list:\n            intervalx = intervals[0]\n            intervaly = intervals[1]\n            xlist.extend([intervalx.start, intervalx.start,\n                          intervalx.end, intervalx.end, None])\n            ylist.extend([intervaly.start, intervaly.end,\n                          intervaly.end, intervaly.start, None])\n    else:\n        #XXX Ugly hack. Matplotlib does not accept empty lists for ``fill``\n        xlist.extend([None, None, None, None])\n        ylist.extend([None, None, None, None])\n    return xlist, ylist\n\n\n####New API for plotting module ####\n\n# TODO: Add color arrays for plots.\n# TODO: Add more plotting options for 3d plots.\n# TODO: Adaptive sampling for 3D plots.\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot(*args, **kwargs):\n    \"\"\"\n    Plots a function of a single variable and returns an instance of\n    the ``Plot`` class (also, see the description of the\n    ``show`` keyword argument below).\n\n    The plotting uses an adaptive algorithm which samples recursively to\n    accurately plot the plot. The adaptive algorithm uses a random point near\n    the midpoint of two points that has to be further sampled. Hence the same\n    plots can appear slightly different.\n\n    Usage\n    =====\n\n    Single Plot\n\n    ``plot(expr, range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with same range.\n\n    ``plot(expr1, expr2, ..., range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with different ranges.\n\n    ``plot((expr1, range), (expr2, range), ..., **kwargs)``\n\n    Range has to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr`` : Expression representing the function of single variable\n\n    ``range``: (x, 0, 5), A 3-tuple denoting the range of the free variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``plot`` function:\n\n    ``show``: Boolean. The default value is set to ``True``. Set show to\n    ``False`` and the function will not display the plot. The returned\n    instance of the ``Plot`` class can then be used to save or display\n    the plot by calling the ``save()`` and ``show()`` methods\n    respectively.\n\n    Arguments for ``LineOver1DRangeSeries`` class:\n\n    ``adaptive``: Boolean. The default value is set to True. Set adaptive to False and\n    specify ``nb_of_points`` if uniform sampling is required.\n\n    ``depth``: int Recursion depth of the adaptive algorithm. A depth of value ``n``\n    samples a maximum of `2^{n}` points.\n\n    ``nb_of_points``: int. Used when the ``adaptive`` is set to False. The function\n    is uniformly sampled at ``nb_of_points`` number of points.\n\n    Aesthetics options:\n\n    ``line_color``: float. Specifies the color for the plot.\n    See ``Plot`` to see how to set color for the plots.\n\n    If there are multiple plots, then the same series series are applied to\n    all the plots. If you want to set these options separately, you can index\n    the ``Plot`` object returned and set it.\n\n    Arguments for ``Plot`` class:\n\n    ``title`` : str. Title of the plot. It is set to the latex representation of\n    the expression, if the plot has only one expression.\n\n    ``xlabel`` : str. Label for the x-axis.\n\n    ``ylabel`` : str. Label for the y-axis.\n\n    ``xscale``: {'linear', 'log'} Sets the scaling of the x-axis.\n\n    ``yscale``: {'linear', 'log'} Sets the scaling if the y-axis.\n\n    ``axis_center``: tuple of two floats denoting the coordinates of the center or\n    {'center', 'auto'}\n\n    ``xlim`` : tuple of two floats, denoting the x-axis limits.\n\n    ``ylim`` : tuple of two floats, denoting the y-axis limits.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols\n    >>> from sympy.plotting import plot\n    >>> x = symbols('x')\n\n    Single Plot\n\n    >>> plot(x**2, (x, -5, 5))\n    Plot object containing:\n    [0]: cartesian line: x**2 for x over (-5.0, 5.0)\n\n    Multiple plots with single range.\n\n    >>> plot(x, x**2, x**3, (x, -5, 5))\n    Plot object containing:\n    [0]: cartesian line: x for x over (-5.0, 5.0)\n    [1]: cartesian line: x**2 for x over (-5.0, 5.0)\n    [2]: cartesian line: x**3 for x over (-5.0, 5.0)\n\n\n    Multiple plots with different ranges.\n\n    >>> plot((x**2, (x, -6, 6)), (x, (x, -5, 5)))\n    Plot object containing:\n    [0]: cartesian line: x**2 for x over (-6.0, 6.0)\n    [1]: cartesian line: x for x over (-5.0, 5.0)\n\n    No adaptive sampling.\n\n    >>> plot(x**2, adaptive=False, nb_of_points=400)\n    Plot object containing:\n    [0]: cartesian line: x**2 for x over (-10.0, 10.0)\n\n    See Also\n    ========\n\n    Plot, LineOver1DRangeSeries.\n\n    \"\"\"\n    args = list(map(sympify, args))\n    free = set()\n    for a in args:\n        if isinstance(a, Expr):\n            free |= a.free_symbols\n            if len(free) > 1:\n                raise ValueError(\n                    'The same variable should be used in all '\n                    'univariate expressions being plotted.')\n    x = free.pop() if free else Symbol('x')\n    kwargs.setdefault('xlabel', x.name)\n    kwargs.setdefault('ylabel', 'f(%s)' % x.name)\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 1, 1)\n    series = [LineOver1DRangeSeries(*arg, **kwargs) for arg in plot_expr]\n\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot_parametric(*args, **kwargs):\n    \"\"\"\n    Plots a 2D parametric plot.\n\n    The plotting uses an adaptive algorithm which samples recursively to\n    accurately plot the plot. The adaptive algorithm uses a random point near\n    the midpoint of two points that has to be further sampled. Hence the same\n    plots can appear slightly different.\n\n    Usage\n    =====\n\n    Single plot.\n\n    ``plot_parametric(expr_x, expr_y, range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with same range.\n\n    ``plot_parametric((expr1_x, expr1_y), (expr2_x, expr2_y), range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with different ranges.\n\n    ``plot_parametric((expr_x, expr_y, range), ..., **kwargs)``\n\n    Range has to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr_x`` : Expression representing the function along x.\n\n    ``expr_y`` : Expression representing the function along y.\n\n    ``range``: (u, 0, 5), A 3-tuple denoting the range of the parameter\n    variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``Parametric2DLineSeries`` class:\n\n    ``adaptive``: Boolean. The default value is set to True. Set adaptive to\n    False and specify ``nb_of_points`` if uniform sampling is required.\n\n    ``depth``: int Recursion depth of the adaptive algorithm. A depth of\n    value ``n`` samples a maximum of `2^{n}` points.\n\n    ``nb_of_points``: int. Used when the ``adaptive`` is set to False. The\n    function is uniformly sampled at ``nb_of_points`` number of points.\n\n    Aesthetics\n    ----------\n\n    ``line_color``: function which returns a float. Specifies the color for the\n    plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same Series arguments are applied to\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n    Arguments for ``Plot`` class:\n\n    ``xlabel`` : str. Label for the x-axis.\n\n    ``ylabel`` : str. Label for the y-axis.\n\n    ``xscale``: {'linear', 'log'} Sets the scaling of the x-axis.\n\n    ``yscale``: {'linear', 'log'} Sets the scaling if the y-axis.\n\n    ``axis_center``: tuple of two floats denoting the coordinates of the center\n    or {'center', 'auto'}\n\n    ``xlim`` : tuple of two floats, denoting the x-axis limits.\n\n    ``ylim`` : tuple of two floats, denoting the y-axis limits.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, cos, sin\n    >>> from sympy.plotting import plot_parametric\n    >>> u = symbols('u')\n\n    Single Parametric plot\n\n    >>> plot_parametric(cos(u), sin(u), (u, -5, 5))\n    Plot object containing:\n    [0]: parametric cartesian line: (cos(u), sin(u)) for u over (-5.0, 5.0)\n\n\n    Multiple parametric plot with single range.\n\n    >>> plot_parametric((cos(u), sin(u)), (u, cos(u)))\n    Plot object containing:\n    [0]: parametric cartesian line: (cos(u), sin(u)) for u over (-10.0, 10.0)\n    [1]: parametric cartesian line: (u, cos(u)) for u over (-10.0, 10.0)\n\n    Multiple parametric plots.\n\n    >>> plot_parametric((cos(u), sin(u), (u, -5, 5)),\n    ...     (cos(u), u, (u, -5, 5)))\n    Plot object containing:\n    [0]: parametric cartesian line: (cos(u), sin(u)) for u over (-5.0, 5.0)\n    [1]: parametric cartesian line: (cos(u), u) for u over (-5.0, 5.0)\n\n\n    See Also\n    ========\n    Plot, Parametric2DLineSeries\n\n    \"\"\"\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 2, 1)\n    series = [Parametric2DLineSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot3d_parametric_line(*args, **kwargs):\n    \"\"\"\n    Plots a 3D parametric line plot.\n\n    Usage\n    =====\n\n    Single plot:\n\n    ``plot3d_parametric_line(expr_x, expr_y, expr_z, range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots.\n\n    ``plot3d_parametric_line((expr_x, expr_y, expr_z, range), ..., **kwargs)``\n\n    Ranges have to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr_x`` : Expression representing the function along x.\n\n    ``expr_y`` : Expression representing the function along y.\n\n    ``expr_z`` : Expression representing the function along z.\n\n    ``range``: ``(u, 0, 5)``, A 3-tuple denoting the range of the parameter\n    variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``Parametric3DLineSeries`` class.\n\n    ``nb_of_points``: The range is uniformly sampled at ``nb_of_points``\n    number of points.\n\n    Aesthetics:\n\n    ``line_color``: function which returns a float. Specifies the color for the\n    plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same series arguments are applied to\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n    Arguments for ``Plot`` class.\n\n    ``title`` : str. Title of the plot.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, cos, sin\n    >>> from sympy.plotting import plot3d_parametric_line\n    >>> u = symbols('u')\n\n    Single plot.\n\n    >>> plot3d_parametric_line(cos(u), sin(u), u, (u, -5, 5))\n    Plot object containing:\n    [0]: 3D parametric cartesian line: (cos(u), sin(u), u) for u over (-5.0, 5.0)\n\n\n    Multiple plots.\n\n    >>> plot3d_parametric_line((cos(u), sin(u), u, (u, -5, 5)),\n    ...     (sin(u), u**2, u, (u, -5, 5)))\n    Plot object containing:\n    [0]: 3D parametric cartesian line: (cos(u), sin(u), u) for u over (-5.0, 5.0)\n    [1]: 3D parametric cartesian line: (sin(u), u**2, u) for u over (-5.0, 5.0)\n\n\n    See Also\n    ========\n\n    Plot, Parametric3DLineSeries\n\n    \"\"\"\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 3, 1)\n    series = [Parametric3DLineSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot3d(*args, **kwargs):\n    \"\"\"\n    Plots a 3D surface plot.\n\n    Usage\n    =====\n\n    Single plot\n\n    ``plot3d(expr, range_x, range_y, **kwargs)``\n\n    If the ranges are not specified, then a default range of (-10, 10) is used.\n\n    Multiple plot with the same range.\n\n    ``plot3d(expr1, expr2, range_x, range_y, **kwargs)``\n\n    If the ranges are not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with different ranges.\n\n    ``plot3d((expr1, range_x, range_y), (expr2, range_x, range_y), ..., **kwargs)``\n\n    Ranges have to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr`` : Expression representing the function along x.\n\n    ``range_x``: (x, 0, 5), A 3-tuple denoting the range of the x\n    variable.\n\n    ``range_y``: (y, 0, 5), A 3-tuple denoting the range of the y\n     variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``SurfaceOver2DRangeSeries`` class:\n\n    ``nb_of_points_x``: int. The x range is sampled uniformly at\n    ``nb_of_points_x`` of points.\n\n    ``nb_of_points_y``: int. The y range is sampled uniformly at\n    ``nb_of_points_y`` of points.\n\n    Aesthetics:\n\n    ``surface_color``: Function which returns a float. Specifies the color for\n    the surface of the plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same series arguments are applied to\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n    Arguments for ``Plot`` class:\n\n    ``title`` : str. Title of the plot.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols\n    >>> from sympy.plotting import plot3d\n    >>> x, y = symbols('x y')\n\n    Single plot\n\n    >>> plot3d(x*y, (x, -5, 5), (y, -5, 5))\n    Plot object containing:\n    [0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n\n\n    Multiple plots with same range\n\n    >>> plot3d(x*y, -x*y, (x, -5, 5), (y, -5, 5))\n    Plot object containing:\n    [0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n    [1]: cartesian surface: -x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n\n\n    Multiple plots with different ranges.\n\n    >>> plot3d((x**2 + y**2, (x, -5, 5), (y, -5, 5)),\n    ...     (x*y, (x, -3, 3), (y, -3, 3)))\n    Plot object containing:\n    [0]: cartesian surface: x**2 + y**2 for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n    [1]: cartesian surface: x*y for x over (-3.0, 3.0) and y over (-3.0, 3.0)\n\n\n    See Also\n    ========\n    Plot, SurfaceOver2DRangeSeries\n\n    \"\"\"\n\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 1, 2)\n    series = [SurfaceOver2DRangeSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot3d_parametric_surface(*args, **kwargs):\n    \"\"\"\n    Plots a 3D parametric surface plot.\n\n    Usage\n    =====\n\n    Single plot.\n\n    ``plot3d_parametric_surface(expr_x, expr_y, expr_z, range_u, range_v, **kwargs)``\n\n    If the ranges is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots.\n\n    ``plot3d_parametric_surface((expr_x, expr_y, expr_z, range_u, range_v), ..., **kwargs)``\n\n    Ranges have to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr_x``: Expression representing the function along ``x``.\n\n    ``expr_y``: Expression representing the function along ``y``.\n\n    ``expr_z``: Expression representing the function along ``z``.\n\n    ``range_u``: ``(u, 0, 5)``,  A 3-tuple denoting the range of the ``u``\n    variable.\n\n    ``range_v``: ``(v, 0, 5)``,  A 3-tuple denoting the range of the v\n    variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``ParametricSurfaceSeries`` class:\n\n    ``nb_of_points_u``: int. The ``u`` range is sampled uniformly at\n    ``nb_of_points_v`` of points\n\n    ``nb_of_points_y``: int. The ``v`` range is sampled uniformly at\n    ``nb_of_points_y`` of points\n\n    Aesthetics:\n\n    ``surface_color``: Function which returns a float. Specifies the color for\n    the surface of the plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same series arguments are applied for\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n\n    Arguments for ``Plot`` class:\n\n    ``title`` : str. Title of the plot.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, cos, sin\n    >>> from sympy.plotting import plot3d_parametric_surface\n    >>> u, v = symbols('u v')\n\n    Single plot.\n\n    >>> plot3d_parametric_surface(cos(u + v), sin(u - v), u - v,\n    ...     (u, -5, 5), (v, -5, 5))\n    Plot object containing:\n    [0]: parametric cartesian surface: (cos(u + v), sin(u - v), u - v) for u over (-5.0, 5.0) and v over (-5.0, 5.0)\n\n\n    See Also\n    ========\n    Plot, ParametricSurfaceSeries\n\n    \"\"\"\n\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 3, 2)\n    series = [ParametricSurfaceSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\ndef check_arguments(args, expr_len, nb_of_free_symbols):\n    \"\"\"\n    Checks the arguments and converts into tuples of the\n    form (exprs, ranges)\n\n    Examples\n    ========\n\n    >>> from sympy import plot, cos, sin, symbols\n    >>> from sympy.plotting.plot import check_arguments\n    >>> x = symbols('x')\n    >>> check_arguments([cos(x), sin(x)], 2, 1)\n        [(cos(x), sin(x), (x, -10, 10))]\n\n    >>> check_arguments([x, x**2], 1, 1)\n        [(x, (x, -10, 10)), (x**2, (x, -10, 10))]\n    \"\"\"\n    if expr_len > 1 and isinstance(args[0], Expr):\n        # Multiple expressions same range.\n        # The arguments are tuples when the expression length is\n        # greater than 1.\n        if len(args) < expr_len:\n            raise ValueError(\"len(args) should not be less than expr_len\")\n        for i in range(len(args)):\n            if isinstance(args[i], Tuple):\n                break\n        else:\n            i = len(args) + 1\n\n        exprs = Tuple(*args[:i])\n        free_symbols = list(set().union(*[e.free_symbols for e in exprs]))\n        if len(args) == expr_len + nb_of_free_symbols:\n            #Ranges given\n            plots = [exprs + Tuple(*args[expr_len:])]\n        else:\n            default_range = Tuple(-10, 10)\n            ranges = []\n            for symbol in free_symbols:\n                ranges.append(Tuple(symbol) + default_range)\n\n            for i in range(len(free_symbols) - nb_of_free_symbols):\n                ranges.append(Tuple(Dummy()) + default_range)\n            plots = [exprs + Tuple(*ranges)]\n        return plots\n\n    if isinstance(args[0], Expr) or (isinstance(args[0], Tuple) and\n                                     len(args[0]) == expr_len and\n                                     expr_len != 3):\n        # Cannot handle expressions with number of expression = 3. It is\n        # not possible to differentiate between expressions and ranges.\n        #Series of plots with same range\n        for i in range(len(args)):\n            if isinstance(args[i], Tuple) and len(args[i]) != expr_len:\n                break\n            if not isinstance(args[i], Tuple):\n                args[i] = Tuple(args[i])\n        else:\n            i = len(args) + 1\n\n        exprs = args[:i]\n        assert all(isinstance(e, Expr) for expr in exprs for e in expr)\n        free_symbols = list(set().union(*[e.free_symbols for expr in exprs\n                                        for e in expr]))\n\n        if len(free_symbols) > nb_of_free_symbols:\n            raise ValueError(\"The number of free_symbols in the expression \"\n                             \"is greater than %d\" % nb_of_free_symbols)\n        if len(args) == i + nb_of_free_symbols and isinstance(args[i], Tuple):\n            ranges = Tuple(*[range_expr for range_expr in args[\n                           i:i + nb_of_free_symbols]])\n            plots = [expr + ranges for expr in exprs]\n            return plots\n        else:\n            #Use default ranges.\n            default_range = Tuple(-10, 10)\n            ranges = []\n            for symbol in free_symbols:\n                ranges.append(Tuple(symbol) + default_range)\n\n            for i in range(nb_of_free_symbols - len(free_symbols)):\n                ranges.append(Tuple(Dummy()) + default_range)\n            ranges = Tuple(*ranges)\n            plots = [expr + ranges for expr in exprs]\n            return plots\n\n    elif isinstance(args[0], Tuple) and len(args[0]) == expr_len + nb_of_free_symbols:\n        #Multiple plots with different ranges.\n        for arg in args:\n            for i in range(expr_len):\n                if not isinstance(arg[i], Expr):\n                    raise ValueError(\"Expected an expression, given %s\" %\n                                     str(arg[i]))\n            for i in range(nb_of_free_symbols):\n                if not len(arg[i + expr_len]) == 3:\n                    raise ValueError(\"The ranges should be a tuple of \"\n                                     \"length 3, got %s\" % str(arg[i + expr_len]))\n        return args\n", "new_content": "\"\"\"Plotting module for Sympy.\n\nA plot is represented by the ``Plot`` class that contains a reference to the\nbackend and a list of the data series to be plotted. The data series are\ninstances of classes meant to simplify getting points and meshes from sympy\nexpressions. ``plot_backends`` is a dictionary with all the backends.\n\nThis module gives only the essential. For all the fancy stuff use directly\nthe backend. You can get the backend wrapper for every plot from the\n``_backend`` attribute. Moreover the data series classes have various useful\nmethods like ``get_points``, ``get_segments``, ``get_meshes``, etc, that may\nbe useful if you wish to use another plotting library.\n\nEspecially if you need publication ready graphs and this module is not enough\nfor you - just get the ``_backend`` attribute and add whatever you want\ndirectly to it. In the case of matplotlib (the common way to graph data in\npython) just copy ``_backend.fig`` which is the figure and ``_backend.ax``\nwhich is the axis and work on them as you would on any other matplotlib object.\n\nSimplicity of code takes much greater importance than performance. Don't use it\nif you care at all about performance. A new backend instance is initialized\nevery time you call ``show()`` and the old one is left to the garbage collector.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nimport inspect\ntry:\n    from collections.abc import Callable\nexcept ImportError:\n    from collections import Callable\nimport warnings\nimport sys\n\nfrom sympy import sympify, Expr, Tuple, Dummy, Symbol\nfrom sympy.external import import_module\nfrom sympy.core.compatibility import range\nfrom sympy.utilities.decorator import doctest_depends_on\nfrom sympy.utilities.iterables import is_sequence\nfrom .experimental_lambdify import (vectorized_lambdify, lambdify)\n\n# N.B.\n# When changing the minimum module version for matplotlib, please change\n# the same in the `SymPyDocTestFinder`` in `sympy/utilities/runtests.py`\n\n# Backend specific imports - textplot\nfrom sympy.plotting.textplot import textplot\n\n# Global variable\n# Set to False when running tests / doctests so that the plots don't show.\n_show = True\n\n\ndef unset_show():\n    global _show\n    _show = False\n\n##############################################################################\n# The public interface\n##############################################################################\n\ndef _arity(f):\n    \"\"\"\n    Python 2 and 3 compatible version that do not raise a Deprecation warning.\n    \"\"\"\n    if sys.version_info < (3,):\n        return len(inspect.getargspec(f)[0])\n    else:\n       param = inspect.signature(f).parameters.values()\n       return len([p for p in param if p.kind == p.POSITIONAL_OR_KEYWORD])\n\n\nclass Plot(object):\n    \"\"\"The central class of the plotting module.\n\n    For interactive work the function ``plot`` is better suited.\n\n    This class permits the plotting of sympy expressions using numerous\n    backends (matplotlib, textplot, the old pyglet module for sympy, Google\n    charts api, etc).\n\n    The figure can contain an arbitrary number of plots of sympy expressions,\n    lists of coordinates of points, etc. Plot has a private attribute _series that\n    contains all data series to be plotted (expressions for lines or surfaces,\n    lists of points, etc (all subclasses of BaseSeries)). Those data series are\n    instances of classes not imported by ``from sympy import *``.\n\n    The customization of the figure is on two levels. Global options that\n    concern the figure as a whole (eg title, xlabel, scale, etc) and\n    per-data series options (eg name) and aesthetics (eg. color, point shape,\n    line type, etc.).\n\n    The difference between options and aesthetics is that an aesthetic can be\n    a function of the coordinates (or parameters in a parametric plot). The\n    supported values for an aesthetic are:\n    - None (the backend uses default values)\n    - a constant\n    - a function of one variable (the first coordinate or parameter)\n    - a function of two variables (the first and second coordinate or\n    parameters)\n    - a function of three variables (only in nonparametric 3D plots)\n    Their implementation depends on the backend so they may not work in some\n    backends.\n\n    If the plot is parametric and the arity of the aesthetic function permits\n    it the aesthetic is calculated over parameters and not over coordinates.\n    If the arity does not permit calculation over parameters the calculation is\n    done over coordinates.\n\n    Only cartesian coordinates are supported for the moment, but you can use\n    the parametric plots to plot in polar, spherical and cylindrical\n    coordinates.\n\n    The arguments for the constructor Plot must be subclasses of BaseSeries.\n\n    Any global option can be specified as a keyword argument.\n\n    The global options for a figure are:\n\n    - title : str\n    - xlabel : str\n    - ylabel : str\n    - legend : bool\n    - xscale : {'linear', 'log'}\n    - yscale : {'linear', 'log'}\n    - axis : bool\n    - axis_center : tuple of two floats or {'center', 'auto'}\n    - xlim : tuple of two floats\n    - ylim : tuple of two floats\n    - aspect_ratio : tuple of two floats or {'auto'}\n    - autoscale : bool\n    - margin : float in [0, 1]\n\n    The per data series options and aesthetics are:\n    There are none in the base series. See below for options for subclasses.\n\n    Some data series support additional aesthetics or options:\n\n    ListSeries, LineOver1DRangeSeries, Parametric2DLineSeries,\n    Parametric3DLineSeries support the following:\n\n    Aesthetics:\n\n    - line_color : function which returns a float.\n\n    options:\n\n    - label : str\n    - steps : bool\n    - integers_only : bool\n\n    SurfaceOver2DRangeSeries, ParametricSurfaceSeries support the following:\n\n    aesthetics:\n\n    - surface_color : function which returns a float.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(Plot, self).__init__()\n\n        #  Options for the graph as a whole.\n        #  The possible values for each option are described in the docstring of\n        # Plot. They are based purely on convention, no checking is done.\n        self.title = None\n        self.xlabel = None\n        self.ylabel = None\n        self.aspect_ratio = 'auto'\n        self.xlim = None\n        self.ylim = None\n        self.axis_center = 'auto'\n        self.axis = True\n        self.xscale = 'linear'\n        self.yscale = 'linear'\n        self.legend = False\n        self.autoscale = True\n        self.margin = 0\n\n        # Contains the data objects to be plotted. The backend should be smart\n        # enough to iterate over this list.\n        self._series = []\n        self._series.extend(args)\n\n        # The backend type. On every show() a new backend instance is created\n        # in self._backend which is tightly coupled to the Plot instance\n        # (thanks to the parent attribute of the backend).\n        self.backend = DefaultBackend\n\n        # The keyword arguments should only contain options for the plot.\n        for key, val in kwargs.items():\n            if hasattr(self, key):\n                setattr(self, key, val)\n\n    def show(self):\n        # TODO move this to the backend (also for save)\n        if hasattr(self, '_backend'):\n            self._backend.close()\n        self._backend = self.backend(self)\n        self._backend.show()\n\n    def save(self, path):\n        if hasattr(self, '_backend'):\n            self._backend.close()\n        self._backend = self.backend(self)\n        self._backend.save(path)\n\n    def __str__(self):\n        series_strs = [('[%d]: ' % i) + str(s)\n                       for i, s in enumerate(self._series)]\n        return 'Plot object containing:\\n' + '\\n'.join(series_strs)\n\n    def __getitem__(self, index):\n        return self._series[index]\n\n    def __setitem__(self, index, *args):\n        if len(args) == 1 and isinstance(args[0], BaseSeries):\n            self._series[index] = args\n\n    def __delitem__(self, index):\n        del self._series[index]\n\n    @doctest_depends_on(modules=('numpy', 'matplotlib',))\n    def append(self, arg):\n        \"\"\"Adds an element from a plot's series to an existing plot.\n\n        Examples\n        ========\n\n        Consider two ``Plot`` objects, ``p1`` and ``p2``. To add the\n        second plot's first series object to the first, use the\n        ``append`` method, like so:\n\n        >>> from sympy import symbols\n        >>> from sympy.plotting import plot\n        >>> x = symbols('x')\n        >>> p1 = plot(x*x)\n        >>> p2 = plot(x)\n        >>> p1.append(p2[0])\n        >>> p1\n        Plot object containing:\n        [0]: cartesian line: x**2 for x over (-10.0, 10.0)\n        [1]: cartesian line: x for x over (-10.0, 10.0)\n\n        See Also\n        ========\n        extend\n\n        \"\"\"\n        if isinstance(arg, BaseSeries):\n            self._series.append(arg)\n        else:\n            raise TypeError('Must specify element of plot to append.')\n\n    @doctest_depends_on(modules=('numpy', 'matplotlib',))\n    def extend(self, arg):\n        \"\"\"Adds all series from another plot.\n\n        Examples\n        ========\n\n        Consider two ``Plot`` objects, ``p1`` and ``p2``. To add the\n        second plot to the first, use the ``extend`` method, like so:\n\n        >>> from sympy import symbols\n        >>> from sympy.plotting import plot\n        >>> x = symbols('x')\n        >>> p1 = plot(x*x)\n        >>> p2 = plot(x)\n        >>> p1.extend(p2)\n        >>> p1\n        Plot object containing:\n        [0]: cartesian line: x**2 for x over (-10.0, 10.0)\n        [1]: cartesian line: x for x over (-10.0, 10.0)\n\n        \"\"\"\n        if isinstance(arg, Plot):\n            self._series.extend(arg._series)\n        elif is_sequence(arg):\n            self._series.extend(arg)\n        else:\n            raise TypeError('Expecting Plot or sequence of BaseSeries')\n\n\n##############################################################################\n# Data Series\n##############################################################################\n#TODO more general way to calculate aesthetics (see get_color_array)\n\n### The base class for all series\nclass BaseSeries(object):\n    \"\"\"Base class for the data objects containing stuff to be plotted.\n\n    The backend should check if it supports the data series that it's given.\n    (eg TextBackend supports only LineOver1DRange).\n    It's the backend responsibility to know how to use the class of\n    data series that it's given.\n\n    Some data series classes are grouped (using a class attribute like is_2Dline)\n    according to the api they present (based only on convention). The backend is\n    not obliged to use that api (eg. The LineOver1DRange belongs to the\n    is_2Dline group and presents the get_points method, but the\n    TextBackend does not use the get_points method).\n    \"\"\"\n\n    # Some flags follow. The rationale for using flags instead of checking base\n    # classes is that setting multiple flags is simpler than multiple\n    # inheritance.\n\n    is_2Dline = False\n    # Some of the backends expect:\n    #  - get_points returning 1D np.arrays list_x, list_y\n    #  - get_segments returning np.array (done in Line2DBaseSeries)\n    #  - get_color_array returning 1D np.array (done in Line2DBaseSeries)\n    # with the colors calculated at the points from get_points\n\n    is_3Dline = False\n    # Some of the backends expect:\n    #  - get_points returning 1D np.arrays list_x, list_y, list_y\n    #  - get_segments returning np.array (done in Line2DBaseSeries)\n    #  - get_color_array returning 1D np.array (done in Line2DBaseSeries)\n    # with the colors calculated at the points from get_points\n\n    is_3Dsurface = False\n    # Some of the backends expect:\n    #   - get_meshes returning mesh_x, mesh_y, mesh_z (2D np.arrays)\n    #   - get_points an alias for get_meshes\n\n    is_contour = False\n    # Some of the backends expect:\n    #   - get_meshes returning mesh_x, mesh_y, mesh_z (2D np.arrays)\n    #   - get_points an alias for get_meshes\n\n    is_implicit = False\n    # Some of the backends expect:\n    #   - get_meshes returning mesh_x (1D array), mesh_y(1D array,\n    #     mesh_z (2D np.arrays)\n    #   - get_points an alias for get_meshes\n    #Different from is_contour as the colormap in backend will be\n    #different\n\n    is_parametric = False\n    # The calculation of aesthetics expects:\n    #   - get_parameter_points returning one or two np.arrays (1D or 2D)\n    # used for calculation aesthetics\n\n    def __init__(self):\n        super(BaseSeries, self).__init__()\n\n    @property\n    def is_3D(self):\n        flags3D = [\n            self.is_3Dline,\n            self.is_3Dsurface\n        ]\n        return any(flags3D)\n\n    @property\n    def is_line(self):\n        flagslines = [\n            self.is_2Dline,\n            self.is_3Dline\n        ]\n        return any(flagslines)\n\n\n### 2D lines\nclass Line2DBaseSeries(BaseSeries):\n    \"\"\"A base class for 2D lines.\n\n    - adding the label, steps and only_integers options\n    - making is_2Dline true\n    - defining get_segments and get_color_array\n    \"\"\"\n\n    is_2Dline = True\n\n    _dim = 2\n\n    def __init__(self):\n        super(Line2DBaseSeries, self).__init__()\n        self.label = None\n        self.steps = False\n        self.only_integers = False\n        self.line_color = None\n\n    def get_segments(self):\n        np = import_module('numpy')\n        points = self.get_points()\n        if self.steps is True:\n            x = np.array((points[0], points[0])).T.flatten()[1:]\n            y = np.array((points[1], points[1])).T.flatten()[:-1]\n            points = (x, y)\n        points = np.ma.array(points).T.reshape(-1, 1, self._dim)\n        return np.ma.concatenate([points[:-1], points[1:]], axis=1)\n\n    def get_color_array(self):\n        np = import_module('numpy')\n        c = self.line_color\n        if hasattr(c, '__call__'):\n            f = np.vectorize(c)\n            arity = _arity(c)\n            if arity == 1 and self.is_parametric:\n                x = self.get_parameter_points()\n                return f(centers_of_segments(x))\n            else:\n                variables = list(map(centers_of_segments, self.get_points()))\n                if arity == 1:\n                    return f(variables[0])\n                elif arity == 2:\n                    return f(*variables[:2])\n                else:  # only if the line is 3D (otherwise raises an error)\n                    return f(*variables)\n        else:\n            return c*np.ones(self.nb_of_points)\n\n\nclass List2DSeries(Line2DBaseSeries):\n    \"\"\"Representation for a line consisting of list of points.\"\"\"\n\n    def __init__(self, list_x, list_y):\n        np = import_module('numpy')\n        super(List2DSeries, self).__init__()\n        self.list_x = np.array(list_x)\n        self.list_y = np.array(list_y)\n        self.label = 'list'\n\n    def __str__(self):\n        return 'list plot'\n\n    def get_points(self):\n        return (self.list_x, self.list_y)\n\n\nclass LineOver1DRangeSeries(Line2DBaseSeries):\n    \"\"\"Representation for a line consisting of a SymPy expression over a range.\"\"\"\n\n    def __init__(self, expr, var_start_end, **kwargs):\n        super(LineOver1DRangeSeries, self).__init__()\n        self.expr = sympify(expr)\n        self.label = str(self.expr)\n        self.var = sympify(var_start_end[0])\n        self.start = float(var_start_end[1])\n        self.end = float(var_start_end[2])\n        self.nb_of_points = kwargs.get('nb_of_points', 300)\n        self.adaptive = kwargs.get('adaptive', True)\n        self.depth = kwargs.get('depth', 12)\n        self.line_color = kwargs.get('line_color', None)\n\n    def __str__(self):\n        return 'cartesian line: %s for %s over %s' % (\n            str(self.expr), str(self.var), str((self.start, self.end)))\n\n    def get_segments(self):\n        \"\"\"\n        Adaptively gets segments for plotting.\n\n        The adaptive sampling is done by recursively checking if three\n        points are almost collinear. If they are not collinear, then more\n        points are added between those points.\n\n        References\n        ==========\n        [1] Adaptive polygonal approximation of parametric curves,\n            Luiz Henrique de Figueiredo.\n\n        \"\"\"\n        if self.only_integers or not self.adaptive:\n            return super(LineOver1DRangeSeries, self).get_segments()\n        else:\n            f = lambdify([self.var], self.expr)\n            list_segments = []\n\n            def sample(p, q, depth):\n                \"\"\" Samples recursively if three points are almost collinear.\n                For depth < 6, points are added irrespective of whether they\n                satisfy the collinearity condition or not. The maximum depth\n                allowed is 12.\n                \"\"\"\n                np = import_module('numpy')\n                #Randomly sample to avoid aliasing.\n                random = 0.45 + np.random.rand() * 0.1\n                xnew = p[0] + random * (q[0] - p[0])\n                ynew = f(xnew)\n                new_point = np.array([xnew, ynew])\n\n                #Maximum depth\n                if depth > self.depth:\n                    list_segments.append([p, q])\n\n                #Sample irrespective of whether the line is flat till the\n                #depth of 6. We are not using linspace to avoid aliasing.\n                elif depth < 6:\n                    sample(p, new_point, depth + 1)\n                    sample(new_point, q, depth + 1)\n\n                #Sample ten points if complex values are encountered\n                #at both ends. If there is a real value in between, then\n                #sample those points further.\n                elif p[1] is None and q[1] is None:\n                    xarray = np.linspace(p[0], q[0], 10)\n                    yarray = list(map(f, xarray))\n                    if any(y is not None for y in yarray):\n                        for i in range(len(yarray) - 1):\n                            if yarray[i] is not None or yarray[i + 1] is not None:\n                                sample([xarray[i], yarray[i]],\n                                    [xarray[i + 1], yarray[i + 1]], depth + 1)\n\n                #Sample further if one of the end points in None( i.e. a complex\n                #value) or the three points are not almost collinear.\n                elif (p[1] is None or q[1] is None or new_point[1] is None\n                        or not flat(p, new_point, q)):\n                    sample(p, new_point, depth + 1)\n                    sample(new_point, q, depth + 1)\n                else:\n                    list_segments.append([p, q])\n\n            f_start = f(self.start)\n            f_end = f(self.end)\n            sample([self.start, f_start], [self.end, f_end], 0)\n            return list_segments\n\n    def get_points(self):\n        np = import_module('numpy')\n        if self.only_integers is True:\n            list_x = np.linspace(int(self.start), int(self.end),\n                    num=int(self.end) - int(self.start) + 1)\n        else:\n            list_x = np.linspace(self.start, self.end, num=self.nb_of_points)\n        f = vectorized_lambdify([self.var], self.expr)\n        list_y = f(list_x)\n        return (list_x, list_y)\n\n\nclass Parametric2DLineSeries(Line2DBaseSeries):\n    \"\"\"Representation for a line consisting of two parametric sympy expressions\n    over a range.\"\"\"\n\n    is_parametric = True\n\n    def __init__(self, expr_x, expr_y, var_start_end, **kwargs):\n        super(Parametric2DLineSeries, self).__init__()\n        self.expr_x = sympify(expr_x)\n        self.expr_y = sympify(expr_y)\n        self.label = \"(%s, %s)\" % (str(self.expr_x), str(self.expr_y))\n        self.var = sympify(var_start_end[0])\n        self.start = float(var_start_end[1])\n        self.end = float(var_start_end[2])\n        self.nb_of_points = kwargs.get('nb_of_points', 300)\n        self.adaptive = kwargs.get('adaptive', True)\n        self.depth = kwargs.get('depth', 12)\n        self.line_color = kwargs.get('line_color', None)\n\n    def __str__(self):\n        return 'parametric cartesian line: (%s, %s) for %s over %s' % (\n            str(self.expr_x), str(self.expr_y), str(self.var),\n            str((self.start, self.end)))\n\n    def get_parameter_points(self):\n        np = import_module('numpy')\n        return np.linspace(self.start, self.end, num=self.nb_of_points)\n\n    def get_points(self):\n        param = self.get_parameter_points()\n        fx = vectorized_lambdify([self.var], self.expr_x)\n        fy = vectorized_lambdify([self.var], self.expr_y)\n        list_x = fx(param)\n        list_y = fy(param)\n        return (list_x, list_y)\n\n    def get_segments(self):\n        \"\"\"\n        Adaptively gets segments for plotting.\n\n        The adaptive sampling is done by recursively checking if three\n        points are almost collinear. If they are not collinear, then more\n        points are added between those points.\n\n        References\n        ==========\n        [1] Adaptive polygonal approximation of parametric curves,\n            Luiz Henrique de Figueiredo.\n\n        \"\"\"\n        if not self.adaptive:\n            return super(Parametric2DLineSeries, self).get_segments()\n\n        f_x = lambdify([self.var], self.expr_x)\n        f_y = lambdify([self.var], self.expr_y)\n        list_segments = []\n\n        def sample(param_p, param_q, p, q, depth):\n            \"\"\" Samples recursively if three points are almost collinear.\n            For depth < 6, points are added irrespective of whether they\n            satisfy the collinearity condition or not. The maximum depth\n            allowed is 12.\n            \"\"\"\n            #Randomly sample to avoid aliasing.\n            np = import_module('numpy')\n            random = 0.45 + np.random.rand() * 0.1\n            param_new = param_p + random * (param_q - param_p)\n            xnew = f_x(param_new)\n            ynew = f_y(param_new)\n            new_point = np.array([xnew, ynew])\n\n            #Maximum depth\n            if depth > self.depth:\n                list_segments.append([p, q])\n\n            #Sample irrespective of whether the line is flat till the\n            #depth of 6. We are not using linspace to avoid aliasing.\n            elif depth < 6:\n                sample(param_p, param_new, p, new_point, depth + 1)\n                sample(param_new, param_q, new_point, q, depth + 1)\n\n            #Sample ten points if complex values are encountered\n            #at both ends. If there is a real value in between, then\n            #sample those points further.\n            elif ((p[0] is None and q[1] is None) or\n                    (p[1] is None and q[1] is None)):\n                param_array = np.linspace(param_p, param_q, 10)\n                x_array = list(map(f_x, param_array))\n                y_array = list(map(f_y, param_array))\n                if any(x is not None and y is not None\n                        for x, y in zip(x_array, y_array)):\n                    for i in range(len(y_array) - 1):\n                        if ((x_array[i] is not None and y_array[i] is not None) or\n                                (x_array[i + 1] is not None and y_array[i + 1] is not None)):\n                            point_a = [x_array[i], y_array[i]]\n                            point_b = [x_array[i + 1], y_array[i + 1]]\n                            sample(param_array[i], param_array[i], point_a,\n                                   point_b, depth + 1)\n\n            #Sample further if one of the end points in None( ie a complex\n            #value) or the three points are not almost collinear.\n            elif (p[0] is None or p[1] is None\n                    or q[1] is None or q[0] is None\n                    or not flat(p, new_point, q)):\n                sample(param_p, param_new, p, new_point, depth + 1)\n                sample(param_new, param_q, new_point, q, depth + 1)\n            else:\n                list_segments.append([p, q])\n\n        f_start_x = f_x(self.start)\n        f_start_y = f_y(self.start)\n        start = [f_start_x, f_start_y]\n        f_end_x = f_x(self.end)\n        f_end_y = f_y(self.end)\n        end = [f_end_x, f_end_y]\n        sample(self.start, self.end, start, end, 0)\n        return list_segments\n\n\n### 3D lines\nclass Line3DBaseSeries(Line2DBaseSeries):\n    \"\"\"A base class for 3D lines.\n\n    Most of the stuff is derived from Line2DBaseSeries.\"\"\"\n\n    is_2Dline = False\n    is_3Dline = True\n    _dim = 3\n\n    def __init__(self):\n        super(Line3DBaseSeries, self).__init__()\n\n\nclass Parametric3DLineSeries(Line3DBaseSeries):\n    \"\"\"Representation for a 3D line consisting of two parametric sympy\n    expressions and a range.\"\"\"\n\n    def __init__(self, expr_x, expr_y, expr_z, var_start_end, **kwargs):\n        super(Parametric3DLineSeries, self).__init__()\n        self.expr_x = sympify(expr_x)\n        self.expr_y = sympify(expr_y)\n        self.expr_z = sympify(expr_z)\n        self.label = \"(%s, %s)\" % (str(self.expr_x), str(self.expr_y))\n        self.var = sympify(var_start_end[0])\n        self.start = float(var_start_end[1])\n        self.end = float(var_start_end[2])\n        self.nb_of_points = kwargs.get('nb_of_points', 300)\n        self.line_color = kwargs.get('line_color', None)\n\n    def __str__(self):\n        return '3D parametric cartesian line: (%s, %s, %s) for %s over %s' % (\n            str(self.expr_x), str(self.expr_y), str(self.expr_z),\n            str(self.var), str((self.start, self.end)))\n\n    def get_parameter_points(self):\n        np = import_module('numpy')\n        return np.linspace(self.start, self.end, num=self.nb_of_points)\n\n    def get_points(self):\n        param = self.get_parameter_points()\n        fx = vectorized_lambdify([self.var], self.expr_x)\n        fy = vectorized_lambdify([self.var], self.expr_y)\n        fz = vectorized_lambdify([self.var], self.expr_z)\n        list_x = fx(param)\n        list_y = fy(param)\n        list_z = fz(param)\n        return (list_x, list_y, list_z)\n\n\n### Surfaces\nclass SurfaceBaseSeries(BaseSeries):\n    \"\"\"A base class for 3D surfaces.\"\"\"\n\n    is_3Dsurface = True\n\n    def __init__(self):\n        super(SurfaceBaseSeries, self).__init__()\n        self.surface_color = None\n\n    def get_color_array(self):\n        np = import_module('numpy')\n        c = self.surface_color\n        if isinstance(c, Callable):\n            f = np.vectorize(c)\n            arity = _arity(c)\n            if self.is_parametric:\n                variables = list(map(centers_of_faces, self.get_parameter_meshes()))\n                if arity == 1:\n                    return f(variables[0])\n                elif arity == 2:\n                    return f(*variables)\n            variables = list(map(centers_of_faces, self.get_meshes()))\n            if arity == 1:\n                return f(variables[0])\n            elif arity == 2:\n                return f(*variables[:2])\n            else:\n                return f(*variables)\n        else:\n            return c*np.ones(self.nb_of_points)\n\n\nclass SurfaceOver2DRangeSeries(SurfaceBaseSeries):\n    \"\"\"Representation for a 3D surface consisting of a sympy expression and 2D\n    range.\"\"\"\n    def __init__(self, expr, var_start_end_x, var_start_end_y, **kwargs):\n        super(SurfaceOver2DRangeSeries, self).__init__()\n        self.expr = sympify(expr)\n        self.var_x = sympify(var_start_end_x[0])\n        self.start_x = float(var_start_end_x[1])\n        self.end_x = float(var_start_end_x[2])\n        self.var_y = sympify(var_start_end_y[0])\n        self.start_y = float(var_start_end_y[1])\n        self.end_y = float(var_start_end_y[2])\n        self.nb_of_points_x = kwargs.get('nb_of_points_x', 50)\n        self.nb_of_points_y = kwargs.get('nb_of_points_y', 50)\n        self.surface_color = kwargs.get('surface_color', None)\n\n    def __str__(self):\n        return ('cartesian surface: %s for'\n                ' %s over %s and %s over %s') % (\n                    str(self.expr),\n                    str(self.var_x),\n                    str((self.start_x, self.end_x)),\n                    str(self.var_y),\n                    str((self.start_y, self.end_y)))\n\n    def get_meshes(self):\n        np = import_module('numpy')\n        mesh_x, mesh_y = np.meshgrid(np.linspace(self.start_x, self.end_x,\n                                                 num=self.nb_of_points_x),\n                                     np.linspace(self.start_y, self.end_y,\n                                                 num=self.nb_of_points_y))\n        f = vectorized_lambdify((self.var_x, self.var_y), self.expr)\n        return (mesh_x, mesh_y, f(mesh_x, mesh_y))\n\n\nclass ParametricSurfaceSeries(SurfaceBaseSeries):\n    \"\"\"Representation for a 3D surface consisting of three parametric sympy\n    expressions and a range.\"\"\"\n\n    is_parametric = True\n\n    def __init__(\n        self, expr_x, expr_y, expr_z, var_start_end_u, var_start_end_v,\n            **kwargs):\n        super(ParametricSurfaceSeries, self).__init__()\n        self.expr_x = sympify(expr_x)\n        self.expr_y = sympify(expr_y)\n        self.expr_z = sympify(expr_z)\n        self.var_u = sympify(var_start_end_u[0])\n        self.start_u = float(var_start_end_u[1])\n        self.end_u = float(var_start_end_u[2])\n        self.var_v = sympify(var_start_end_v[0])\n        self.start_v = float(var_start_end_v[1])\n        self.end_v = float(var_start_end_v[2])\n        self.nb_of_points_u = kwargs.get('nb_of_points_u', 50)\n        self.nb_of_points_v = kwargs.get('nb_of_points_v', 50)\n        self.surface_color = kwargs.get('surface_color', None)\n\n    def __str__(self):\n        return ('parametric cartesian surface: (%s, %s, %s) for'\n                ' %s over %s and %s over %s') % (\n                    str(self.expr_x),\n                    str(self.expr_y),\n                    str(self.expr_z),\n                    str(self.var_u),\n                    str((self.start_u, self.end_u)),\n                    str(self.var_v),\n                    str((self.start_v, self.end_v)))\n\n    def get_parameter_meshes(self):\n        np = import_module('numpy')\n        return np.meshgrid(np.linspace(self.start_u, self.end_u,\n                                       num=self.nb_of_points_u),\n                           np.linspace(self.start_v, self.end_v,\n                                       num=self.nb_of_points_v))\n\n    def get_meshes(self):\n        mesh_u, mesh_v = self.get_parameter_meshes()\n        fx = vectorized_lambdify((self.var_u, self.var_v), self.expr_x)\n        fy = vectorized_lambdify((self.var_u, self.var_v), self.expr_y)\n        fz = vectorized_lambdify((self.var_u, self.var_v), self.expr_z)\n        return (fx(mesh_u, mesh_v), fy(mesh_u, mesh_v), fz(mesh_u, mesh_v))\n\n\n### Contours\nclass ContourSeries(BaseSeries):\n    \"\"\"Representation for a contour plot.\"\"\"\n    #The code is mostly repetition of SurfaceOver2DRange.\n    #XXX: Presently not used in any of those functions.\n    #XXX: Add contour plot and use this seties.\n\n    is_contour = True\n\n    def __init__(self, expr, var_start_end_x, var_start_end_y):\n        super(ContourSeries, self).__init__()\n        self.nb_of_points_x = 50\n        self.nb_of_points_y = 50\n        self.expr = sympify(expr)\n        self.var_x = sympify(var_start_end_x[0])\n        self.start_x = float(var_start_end_x[1])\n        self.end_x = float(var_start_end_x[2])\n        self.var_y = sympify(var_start_end_y[0])\n        self.start_y = float(var_start_end_y[1])\n        self.end_y = float(var_start_end_y[2])\n\n        self.get_points = self.get_meshes\n\n    def __str__(self):\n        return ('contour: %s for '\n                '%s over %s and %s over %s') % (\n                    str(self.expr),\n                    str(self.var_x),\n                    str((self.start_x, self.end_x)),\n                    str(self.var_y),\n                    str((self.start_y, self.end_y)))\n\n    def get_meshes(self):\n        np = import_module('numpy')\n        mesh_x, mesh_y = np.meshgrid(np.linspace(self.start_x, self.end_x,\n                                                 num=self.nb_of_points_x),\n                                     np.linspace(self.start_y, self.end_y,\n                                                 num=self.nb_of_points_y))\n        f = vectorized_lambdify((self.var_x, self.var_y), self.expr)\n        return (mesh_x, mesh_y, f(mesh_x, mesh_y))\n\n\n##############################################################################\n# Backends\n##############################################################################\n\nclass BaseBackend(object):\n    def __init__(self, parent):\n        super(BaseBackend, self).__init__()\n        self.parent = parent\n\n\n## don't have to check for the success of importing matplotlib in each case;\n## we will only be using this backend if we can successfully import matploblib\nclass MatplotlibBackend(BaseBackend):\n    def __init__(self, parent):\n        super(MatplotlibBackend, self).__init__(parent)\n        are_3D = [s.is_3D for s in self.parent._series]\n        self.matplotlib = import_module('matplotlib',\n            __import__kwargs={'fromlist': ['pyplot', 'cm', 'collections']},\n            min_module_version='1.1.0', catch=(RuntimeError,))\n        self.plt = self.matplotlib.pyplot\n        self.cm = self.matplotlib.cm\n        self.LineCollection = self.matplotlib.collections.LineCollection\n        if any(are_3D) and not all(are_3D):\n            raise ValueError('The matplotlib backend can not mix 2D and 3D.')\n        elif not any(are_3D):\n            self.fig = self.plt.figure()\n            self.ax = self.fig.add_subplot(111)\n            self.ax.spines['left'].set_position('zero')\n            self.ax.spines['right'].set_color('none')\n            self.ax.spines['bottom'].set_position('zero')\n            self.ax.spines['top'].set_color('none')\n            self.ax.spines['left'].set_smart_bounds(True)\n            self.ax.spines['bottom'].set_smart_bounds(False)\n            self.ax.xaxis.set_ticks_position('bottom')\n            self.ax.yaxis.set_ticks_position('left')\n        elif all(are_3D):\n            ## mpl_toolkits.mplot3d is necessary for\n            ##      projection='3d'\n            mpl_toolkits = import_module('mpl_toolkits',\n                                     __import__kwargs={'fromlist': ['mplot3d']})\n            self.fig = self.plt.figure()\n            self.ax = self.fig.add_subplot(111, projection='3d')\n\n    def process_series(self):\n        parent = self.parent\n\n        for s in self.parent._series:\n            # Create the collections\n            if s.is_2Dline:\n                collection = self.LineCollection(s.get_segments())\n                self.ax.add_collection(collection)\n            elif s.is_contour:\n                self.ax.contour(*s.get_meshes())\n            elif s.is_3Dline:\n                # TODO too complicated, I blame matplotlib\n                mpl_toolkits = import_module('mpl_toolkits',\n                    __import__kwargs={'fromlist': ['mplot3d']})\n                art3d = mpl_toolkits.mplot3d.art3d\n                collection = art3d.Line3DCollection(s.get_segments())\n                self.ax.add_collection(collection)\n                x, y, z = s.get_points()\n                self.ax.set_xlim((min(x), max(x)))\n                self.ax.set_ylim((min(y), max(y)))\n                self.ax.set_zlim((min(z), max(z)))\n            elif s.is_3Dsurface:\n                x, y, z = s.get_meshes()\n                collection = self.ax.plot_surface(x, y, z,\n                    cmap=getattr(self.cm, 'viridis', self.cm.jet),\n                    rstride=1, cstride=1, linewidth=0.1)\n            elif s.is_implicit:\n                #Smart bounds have to be set to False for implicit plots.\n                self.ax.spines['left'].set_smart_bounds(False)\n                self.ax.spines['bottom'].set_smart_bounds(False)\n                points = s.get_raster()\n                if len(points) == 2:\n                    #interval math plotting\n                    x, y = _matplotlib_list(points[0])\n                    self.ax.fill(x, y, facecolor=s.line_color, edgecolor='None')\n                else:\n                    # use contourf or contour depending on whether it is\n                    # an inequality or equality.\n                    #XXX: ``contour`` plots multiple lines. Should be fixed.\n                    ListedColormap = self.matplotlib.colors.ListedColormap\n                    colormap = ListedColormap([\"white\", s.line_color])\n                    xarray, yarray, zarray, plot_type = points\n                    if plot_type == 'contour':\n                        self.ax.contour(xarray, yarray, zarray, cmap=colormap)\n                    else:\n                        self.ax.contourf(xarray, yarray, zarray, cmap=colormap)\n            else:\n                raise ValueError('The matplotlib backend supports only '\n                                 'is_2Dline, is_3Dline, is_3Dsurface and '\n                                 'is_contour objects.')\n\n            # Customise the collections with the corresponding per-series\n            # options.\n            if hasattr(s, 'label'):\n                collection.set_label(s.label)\n            if s.is_line and s.line_color:\n                if isinstance(s.line_color, (float, int)) or isinstance(s.line_color, Callable):\n                    color_array = s.get_color_array()\n                    collection.set_array(color_array)\n                else:\n                    collection.set_color(s.line_color)\n            if s.is_3Dsurface and s.surface_color:\n                if self.matplotlib.__version__ < \"1.2.0\":  # TODO in the distant future remove this check\n                    warnings.warn('The version of matplotlib is too old to use surface coloring.')\n                elif isinstance(s.surface_color, (float, int)) or isinstance(s.surface_color, Callable):\n                    color_array = s.get_color_array()\n                    color_array = color_array.reshape(color_array.size)\n                    collection.set_array(color_array)\n                else:\n                    collection.set_color(s.surface_color)\n\n        # Set global options.\n        # TODO The 3D stuff\n        # XXX The order of those is important.\n\n        mpl_toolkits = import_module('mpl_toolkits',\n            __import__kwargs={'fromlist': ['mplot3d']})\n        Axes3D = mpl_toolkits.mplot3d.Axes3D\n        if parent.xscale and not isinstance(self.ax, Axes3D):\n            self.ax.set_xscale(parent.xscale)\n        if parent.yscale and not isinstance(self.ax, Axes3D):\n            self.ax.set_yscale(parent.yscale)\n        if parent.xlim:\n            self.ax.set_xlim(parent.xlim)\n        else:\n            if all(isinstance(s, LineOver1DRangeSeries) for s in parent._series):\n                starts = [s.start for s in parent._series]\n                ends = [s.end for s in parent._series]\n                self.ax.set_xlim(min(starts), max(ends))\n        if parent.ylim:\n            self.ax.set_ylim(parent.ylim)\n        if not isinstance(self.ax, Axes3D) or self.matplotlib.__version__ >= '1.2.0':  # XXX in the distant future remove this check\n            self.ax.set_autoscale_on(parent.autoscale)\n        if parent.axis_center:\n            val = parent.axis_center\n            if isinstance(self.ax, Axes3D):\n                pass\n            elif val == 'center':\n                self.ax.spines['left'].set_position('center')\n                self.ax.spines['bottom'].set_position('center')\n            elif val == 'auto':\n                xl, xh = self.ax.get_xlim()\n                yl, yh = self.ax.get_ylim()\n                pos_left = ('data', 0) if xl*xh <= 0 else 'center'\n                pos_bottom = ('data', 0) if yl*yh <= 0 else 'center'\n                self.ax.spines['left'].set_position(pos_left)\n                self.ax.spines['bottom'].set_position(pos_bottom)\n            else:\n                self.ax.spines['left'].set_position(('data', val[0]))\n                self.ax.spines['bottom'].set_position(('data', val[1]))\n        if not parent.axis:\n            self.ax.set_axis_off()\n        if parent.legend:\n            if self.ax.legend():\n                self.ax.legend_.set_visible(parent.legend)\n        if parent.margin:\n            self.ax.set_xmargin(parent.margin)\n            self.ax.set_ymargin(parent.margin)\n        if parent.title:\n            self.ax.set_title(parent.title)\n        if parent.xlabel:\n            self.ax.set_xlabel(parent.xlabel, position=(1, 0))\n        if parent.ylabel:\n            self.ax.set_ylabel(parent.ylabel, position=(0, 1))\n\n    def show(self):\n        self.process_series()\n        #TODO after fixing https://github.com/ipython/ipython/issues/1255\n        # you can uncomment the next line and remove the pyplot.show() call\n        #self.fig.show()\n        if _show:\n            self.plt.show()\n\n    def save(self, path):\n        self.process_series()\n        self.fig.savefig(path)\n\n    def close(self):\n        self.plt.close(self.fig)\n\n\nclass TextBackend(BaseBackend):\n    def __init__(self, parent):\n        super(TextBackend, self).__init__(parent)\n\n    def show(self):\n        if len(self.parent._series) != 1:\n            raise ValueError(\n                'The TextBackend supports only one graph per Plot.')\n        elif not isinstance(self.parent._series[0], LineOver1DRangeSeries):\n            raise ValueError(\n                'The TextBackend supports only expressions over a 1D range')\n        else:\n            ser = self.parent._series[0]\n            textplot(ser.expr, ser.start, ser.end)\n\n    def close(self):\n        pass\n\n\nclass DefaultBackend(BaseBackend):\n    def __new__(cls, parent):\n        matplotlib = import_module('matplotlib', min_module_version='1.1.0', catch=(RuntimeError,))\n        if matplotlib:\n            return MatplotlibBackend(parent)\n        else:\n            return TextBackend(parent)\n\n\nplot_backends = {\n    'matplotlib': MatplotlibBackend,\n    'text': TextBackend,\n    'default': DefaultBackend\n}\n\n\n##############################################################################\n# Finding the centers of line segments or mesh faces\n##############################################################################\n\ndef centers_of_segments(array):\n    np = import_module('numpy')\n    return np.mean(np.vstack((array[:-1], array[1:])), 0)\n\n\ndef centers_of_faces(array):\n    np = import_module('numpy')\n    return np.mean(np.dstack((array[:-1, :-1],\n                                 array[1:, :-1],\n                                 array[:-1, 1: ],\n                                 array[:-1, :-1],\n                                 )), 2)\n\n\ndef flat(x, y, z, eps=1e-3):\n    \"\"\"Checks whether three points are almost collinear\"\"\"\n    np = import_module('numpy')\n    # Workaround plotting piecewise (#8577):\n    #   workaround for `lambdify` in `.experimental_lambdify` fails\n    #   to return numerical values in some cases. Lower-level fix\n    #   in `lambdify` is possible.\n    vector_a = (x - y).astype(np.float)\n    vector_b = (z - y).astype(np.float)\n    dot_product = np.dot(vector_a, vector_b)\n    vector_a_norm = np.linalg.norm(vector_a)\n    vector_b_norm = np.linalg.norm(vector_b)\n    cos_theta = dot_product / (vector_a_norm * vector_b_norm)\n    return abs(cos_theta + 1) < eps\n\n\ndef _matplotlib_list(interval_list):\n    \"\"\"\n    Returns lists for matplotlib ``fill`` command from a list of bounding\n    rectangular intervals\n    \"\"\"\n    xlist = []\n    ylist = []\n    if len(interval_list):\n        for intervals in interval_list:\n            intervalx = intervals[0]\n            intervaly = intervals[1]\n            xlist.extend([intervalx.start, intervalx.start,\n                          intervalx.end, intervalx.end, None])\n            ylist.extend([intervaly.start, intervaly.end,\n                          intervaly.end, intervaly.start, None])\n    else:\n        #XXX Ugly hack. Matplotlib does not accept empty lists for ``fill``\n        xlist.extend([None, None, None, None])\n        ylist.extend([None, None, None, None])\n    return xlist, ylist\n\n\n####New API for plotting module ####\n\n# TODO: Add color arrays for plots.\n# TODO: Add more plotting options for 3d plots.\n# TODO: Adaptive sampling for 3D plots.\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot(*args, **kwargs):\n    \"\"\"\n    Plots a function of a single variable and returns an instance of\n    the ``Plot`` class (also, see the description of the\n    ``show`` keyword argument below).\n\n    The plotting uses an adaptive algorithm which samples recursively to\n    accurately plot the plot. The adaptive algorithm uses a random point near\n    the midpoint of two points that has to be further sampled. Hence the same\n    plots can appear slightly different.\n\n    Usage\n    =====\n\n    Single Plot\n\n    ``plot(expr, range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with same range.\n\n    ``plot(expr1, expr2, ..., range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with different ranges.\n\n    ``plot((expr1, range), (expr2, range), ..., **kwargs)``\n\n    Range has to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr`` : Expression representing the function of single variable\n\n    ``range``: (x, 0, 5), A 3-tuple denoting the range of the free variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``plot`` function:\n\n    ``show``: Boolean. The default value is set to ``True``. Set show to\n    ``False`` and the function will not display the plot. The returned\n    instance of the ``Plot`` class can then be used to save or display\n    the plot by calling the ``save()`` and ``show()`` methods\n    respectively.\n\n    Arguments for ``LineOver1DRangeSeries`` class:\n\n    ``adaptive``: Boolean. The default value is set to True. Set adaptive to False and\n    specify ``nb_of_points`` if uniform sampling is required.\n\n    ``depth``: int Recursion depth of the adaptive algorithm. A depth of value ``n``\n    samples a maximum of `2^{n}` points.\n\n    ``nb_of_points``: int. Used when the ``adaptive`` is set to False. The function\n    is uniformly sampled at ``nb_of_points`` number of points.\n\n    Aesthetics options:\n\n    ``line_color``: float. Specifies the color for the plot.\n    See ``Plot`` to see how to set color for the plots.\n\n    If there are multiple plots, then the same series series are applied to\n    all the plots. If you want to set these options separately, you can index\n    the ``Plot`` object returned and set it.\n\n    Arguments for ``Plot`` class:\n\n    ``title`` : str. Title of the plot. It is set to the latex representation of\n    the expression, if the plot has only one expression.\n\n    ``xlabel`` : str. Label for the x-axis.\n\n    ``ylabel`` : str. Label for the y-axis.\n\n    ``xscale``: {'linear', 'log'} Sets the scaling of the x-axis.\n\n    ``yscale``: {'linear', 'log'} Sets the scaling if the y-axis.\n\n    ``axis_center``: tuple of two floats denoting the coordinates of the center or\n    {'center', 'auto'}\n\n    ``xlim`` : tuple of two floats, denoting the x-axis limits.\n\n    ``ylim`` : tuple of two floats, denoting the y-axis limits.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols\n    >>> from sympy.plotting import plot\n    >>> x = symbols('x')\n\n    Single Plot\n\n    >>> plot(x**2, (x, -5, 5))\n    Plot object containing:\n    [0]: cartesian line: x**2 for x over (-5.0, 5.0)\n\n    Multiple plots with single range.\n\n    >>> plot(x, x**2, x**3, (x, -5, 5))\n    Plot object containing:\n    [0]: cartesian line: x for x over (-5.0, 5.0)\n    [1]: cartesian line: x**2 for x over (-5.0, 5.0)\n    [2]: cartesian line: x**3 for x over (-5.0, 5.0)\n\n\n    Multiple plots with different ranges.\n\n    >>> plot((x**2, (x, -6, 6)), (x, (x, -5, 5)))\n    Plot object containing:\n    [0]: cartesian line: x**2 for x over (-6.0, 6.0)\n    [1]: cartesian line: x for x over (-5.0, 5.0)\n\n    No adaptive sampling.\n\n    >>> plot(x**2, adaptive=False, nb_of_points=400)\n    Plot object containing:\n    [0]: cartesian line: x**2 for x over (-10.0, 10.0)\n\n    See Also\n    ========\n\n    Plot, LineOver1DRangeSeries.\n\n    \"\"\"\n    args = list(map(sympify, args))\n    free = set()\n    for a in args:\n        if isinstance(a, Expr):\n            free |= a.free_symbols\n            if len(free) > 1:\n                raise ValueError(\n                    'The same variable should be used in all '\n                    'univariate expressions being plotted.')\n    x = free.pop() if free else Symbol('x')\n    kwargs.setdefault('xlabel', x.name)\n    kwargs.setdefault('ylabel', 'f(%s)' % x.name)\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 1, 1)\n    series = [LineOver1DRangeSeries(*arg, **kwargs) for arg in plot_expr]\n\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot_parametric(*args, **kwargs):\n    \"\"\"\n    Plots a 2D parametric plot.\n\n    The plotting uses an adaptive algorithm which samples recursively to\n    accurately plot the plot. The adaptive algorithm uses a random point near\n    the midpoint of two points that has to be further sampled. Hence the same\n    plots can appear slightly different.\n\n    Usage\n    =====\n\n    Single plot.\n\n    ``plot_parametric(expr_x, expr_y, range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with same range.\n\n    ``plot_parametric((expr1_x, expr1_y), (expr2_x, expr2_y), range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with different ranges.\n\n    ``plot_parametric((expr_x, expr_y, range), ..., **kwargs)``\n\n    Range has to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr_x`` : Expression representing the function along x.\n\n    ``expr_y`` : Expression representing the function along y.\n\n    ``range``: (u, 0, 5), A 3-tuple denoting the range of the parameter\n    variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``Parametric2DLineSeries`` class:\n\n    ``adaptive``: Boolean. The default value is set to True. Set adaptive to\n    False and specify ``nb_of_points`` if uniform sampling is required.\n\n    ``depth``: int Recursion depth of the adaptive algorithm. A depth of\n    value ``n`` samples a maximum of `2^{n}` points.\n\n    ``nb_of_points``: int. Used when the ``adaptive`` is set to False. The\n    function is uniformly sampled at ``nb_of_points`` number of points.\n\n    Aesthetics\n    ----------\n\n    ``line_color``: function which returns a float. Specifies the color for the\n    plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same Series arguments are applied to\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n    Arguments for ``Plot`` class:\n\n    ``xlabel`` : str. Label for the x-axis.\n\n    ``ylabel`` : str. Label for the y-axis.\n\n    ``xscale``: {'linear', 'log'} Sets the scaling of the x-axis.\n\n    ``yscale``: {'linear', 'log'} Sets the scaling if the y-axis.\n\n    ``axis_center``: tuple of two floats denoting the coordinates of the center\n    or {'center', 'auto'}\n\n    ``xlim`` : tuple of two floats, denoting the x-axis limits.\n\n    ``ylim`` : tuple of two floats, denoting the y-axis limits.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, cos, sin\n    >>> from sympy.plotting import plot_parametric\n    >>> u = symbols('u')\n\n    Single Parametric plot\n\n    >>> plot_parametric(cos(u), sin(u), (u, -5, 5))\n    Plot object containing:\n    [0]: parametric cartesian line: (cos(u), sin(u)) for u over (-5.0, 5.0)\n\n\n    Multiple parametric plot with single range.\n\n    >>> plot_parametric((cos(u), sin(u)), (u, cos(u)))\n    Plot object containing:\n    [0]: parametric cartesian line: (cos(u), sin(u)) for u over (-10.0, 10.0)\n    [1]: parametric cartesian line: (u, cos(u)) for u over (-10.0, 10.0)\n\n    Multiple parametric plots.\n\n    >>> plot_parametric((cos(u), sin(u), (u, -5, 5)),\n    ...     (cos(u), u, (u, -5, 5)))\n    Plot object containing:\n    [0]: parametric cartesian line: (cos(u), sin(u)) for u over (-5.0, 5.0)\n    [1]: parametric cartesian line: (cos(u), u) for u over (-5.0, 5.0)\n\n\n    See Also\n    ========\n    Plot, Parametric2DLineSeries\n\n    \"\"\"\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 2, 1)\n    series = [Parametric2DLineSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot3d_parametric_line(*args, **kwargs):\n    \"\"\"\n    Plots a 3D parametric line plot.\n\n    Usage\n    =====\n\n    Single plot:\n\n    ``plot3d_parametric_line(expr_x, expr_y, expr_z, range, **kwargs)``\n\n    If the range is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots.\n\n    ``plot3d_parametric_line((expr_x, expr_y, expr_z, range), ..., **kwargs)``\n\n    Ranges have to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr_x`` : Expression representing the function along x.\n\n    ``expr_y`` : Expression representing the function along y.\n\n    ``expr_z`` : Expression representing the function along z.\n\n    ``range``: ``(u, 0, 5)``, A 3-tuple denoting the range of the parameter\n    variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``Parametric3DLineSeries`` class.\n\n    ``nb_of_points``: The range is uniformly sampled at ``nb_of_points``\n    number of points.\n\n    Aesthetics:\n\n    ``line_color``: function which returns a float. Specifies the color for the\n    plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same series arguments are applied to\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n    Arguments for ``Plot`` class.\n\n    ``title`` : str. Title of the plot.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, cos, sin\n    >>> from sympy.plotting import plot3d_parametric_line\n    >>> u = symbols('u')\n\n    Single plot.\n\n    >>> plot3d_parametric_line(cos(u), sin(u), u, (u, -5, 5))\n    Plot object containing:\n    [0]: 3D parametric cartesian line: (cos(u), sin(u), u) for u over (-5.0, 5.0)\n\n\n    Multiple plots.\n\n    >>> plot3d_parametric_line((cos(u), sin(u), u, (u, -5, 5)),\n    ...     (sin(u), u**2, u, (u, -5, 5)))\n    Plot object containing:\n    [0]: 3D parametric cartesian line: (cos(u), sin(u), u) for u over (-5.0, 5.0)\n    [1]: 3D parametric cartesian line: (sin(u), u**2, u) for u over (-5.0, 5.0)\n\n\n    See Also\n    ========\n\n    Plot, Parametric3DLineSeries\n\n    \"\"\"\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 3, 1)\n    series = [Parametric3DLineSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot3d(*args, **kwargs):\n    \"\"\"\n    Plots a 3D surface plot.\n\n    Usage\n    =====\n\n    Single plot\n\n    ``plot3d(expr, range_x, range_y, **kwargs)``\n\n    If the ranges are not specified, then a default range of (-10, 10) is used.\n\n    Multiple plot with the same range.\n\n    ``plot3d(expr1, expr2, range_x, range_y, **kwargs)``\n\n    If the ranges are not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots with different ranges.\n\n    ``plot3d((expr1, range_x, range_y), (expr2, range_x, range_y), ..., **kwargs)``\n\n    Ranges have to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr`` : Expression representing the function along x.\n\n    ``range_x``: (x, 0, 5), A 3-tuple denoting the range of the x\n    variable.\n\n    ``range_y``: (y, 0, 5), A 3-tuple denoting the range of the y\n     variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``SurfaceOver2DRangeSeries`` class:\n\n    ``nb_of_points_x``: int. The x range is sampled uniformly at\n    ``nb_of_points_x`` of points.\n\n    ``nb_of_points_y``: int. The y range is sampled uniformly at\n    ``nb_of_points_y`` of points.\n\n    Aesthetics:\n\n    ``surface_color``: Function which returns a float. Specifies the color for\n    the surface of the plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same series arguments are applied to\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n    Arguments for ``Plot`` class:\n\n    ``title`` : str. Title of the plot.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols\n    >>> from sympy.plotting import plot3d\n    >>> x, y = symbols('x y')\n\n    Single plot\n\n    >>> plot3d(x*y, (x, -5, 5), (y, -5, 5))\n    Plot object containing:\n    [0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n\n\n    Multiple plots with same range\n\n    >>> plot3d(x*y, -x*y, (x, -5, 5), (y, -5, 5))\n    Plot object containing:\n    [0]: cartesian surface: x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n    [1]: cartesian surface: -x*y for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n\n\n    Multiple plots with different ranges.\n\n    >>> plot3d((x**2 + y**2, (x, -5, 5), (y, -5, 5)),\n    ...     (x*y, (x, -3, 3), (y, -3, 3)))\n    Plot object containing:\n    [0]: cartesian surface: x**2 + y**2 for x over (-5.0, 5.0) and y over (-5.0, 5.0)\n    [1]: cartesian surface: x*y for x over (-3.0, 3.0) and y over (-3.0, 3.0)\n\n\n    See Also\n    ========\n    Plot, SurfaceOver2DRangeSeries\n\n    \"\"\"\n\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 1, 2)\n    series = [SurfaceOver2DRangeSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\n@doctest_depends_on(modules=('numpy', 'matplotlib',))\ndef plot3d_parametric_surface(*args, **kwargs):\n    \"\"\"\n    Plots a 3D parametric surface plot.\n\n    Usage\n    =====\n\n    Single plot.\n\n    ``plot3d_parametric_surface(expr_x, expr_y, expr_z, range_u, range_v, **kwargs)``\n\n    If the ranges is not specified, then a default range of (-10, 10) is used.\n\n    Multiple plots.\n\n    ``plot3d_parametric_surface((expr_x, expr_y, expr_z, range_u, range_v), ..., **kwargs)``\n\n    Ranges have to be specified for every expression.\n\n    Default range may change in the future if a more advanced default range\n    detection algorithm is implemented.\n\n    Arguments\n    =========\n\n    ``expr_x``: Expression representing the function along ``x``.\n\n    ``expr_y``: Expression representing the function along ``y``.\n\n    ``expr_z``: Expression representing the function along ``z``.\n\n    ``range_u``: ``(u, 0, 5)``,  A 3-tuple denoting the range of the ``u``\n    variable.\n\n    ``range_v``: ``(v, 0, 5)``,  A 3-tuple denoting the range of the v\n    variable.\n\n    Keyword Arguments\n    =================\n\n    Arguments for ``ParametricSurfaceSeries`` class:\n\n    ``nb_of_points_u``: int. The ``u`` range is sampled uniformly at\n    ``nb_of_points_v`` of points\n\n    ``nb_of_points_y``: int. The ``v`` range is sampled uniformly at\n    ``nb_of_points_y`` of points\n\n    Aesthetics:\n\n    ``surface_color``: Function which returns a float. Specifies the color for\n    the surface of the plot. See ``sympy.plotting.Plot`` for more details.\n\n    If there are multiple plots, then the same series arguments are applied for\n    all the plots. If you want to set these options separately, you can index\n    the returned ``Plot`` object and set it.\n\n\n    Arguments for ``Plot`` class:\n\n    ``title`` : str. Title of the plot.\n\n    Examples\n    ========\n\n    >>> from sympy import symbols, cos, sin\n    >>> from sympy.plotting import plot3d_parametric_surface\n    >>> u, v = symbols('u v')\n\n    Single plot.\n\n    >>> plot3d_parametric_surface(cos(u + v), sin(u - v), u - v,\n    ...     (u, -5, 5), (v, -5, 5))\n    Plot object containing:\n    [0]: parametric cartesian surface: (cos(u + v), sin(u - v), u - v) for u over (-5.0, 5.0) and v over (-5.0, 5.0)\n\n\n    See Also\n    ========\n    Plot, ParametricSurfaceSeries\n\n    \"\"\"\n\n    args = list(map(sympify, args))\n    show = kwargs.pop('show', True)\n    series = []\n    plot_expr = check_arguments(args, 3, 2)\n    series = [ParametricSurfaceSeries(*arg, **kwargs) for arg in plot_expr]\n    plots = Plot(*series, **kwargs)\n    if show:\n        plots.show()\n    return plots\n\n\ndef check_arguments(args, expr_len, nb_of_free_symbols):\n    \"\"\"\n    Checks the arguments and converts into tuples of the\n    form (exprs, ranges)\n\n    Examples\n    ========\n\n    >>> from sympy import plot, cos, sin, symbols\n    >>> from sympy.plotting.plot import check_arguments\n    >>> x = symbols('x')\n    >>> check_arguments([cos(x), sin(x)], 2, 1)\n        [(cos(x), sin(x), (x, -10, 10))]\n\n    >>> check_arguments([x, x**2], 1, 1)\n        [(x, (x, -10, 10)), (x**2, (x, -10, 10))]\n    \"\"\"\n    if expr_len > 1 and isinstance(args[0], Expr):\n        # Multiple expressions same range.\n        # The arguments are tuples when the expression length is\n        # greater than 1.\n        if len(args) < expr_len:\n            raise ValueError(\"len(args) should not be less than expr_len\")\n        for i in range(len(args)):\n            if isinstance(args[i], Tuple):\n                break\n        else:\n            i = len(args) + 1\n\n        exprs = Tuple(*args[:i])\n        free_symbols = list(set().union(*[e.free_symbols for e in exprs]))\n        if len(args) == expr_len + nb_of_free_symbols:\n            #Ranges given\n            plots = [exprs + Tuple(*args[expr_len:])]\n        else:\n            default_range = Tuple(-10, 10)\n            ranges = []\n            for symbol in free_symbols:\n                ranges.append(Tuple(symbol) + default_range)\n\n            for i in range(len(free_symbols) - nb_of_free_symbols):\n                ranges.append(Tuple(Dummy()) + default_range)\n            plots = [exprs + Tuple(*ranges)]\n        return plots\n\n    if isinstance(args[0], Expr) or (isinstance(args[0], Tuple) and\n                                     len(args[0]) == expr_len and\n                                     expr_len != 3):\n        # Cannot handle expressions with number of expression = 3. It is\n        # not possible to differentiate between expressions and ranges.\n        #Series of plots with same range\n        for i in range(len(args)):\n            if isinstance(args[i], Tuple) and len(args[i]) != expr_len:\n                break\n            if not isinstance(args[i], Tuple):\n                args[i] = Tuple(args[i])\n        else:\n            i = len(args) + 1\n\n        exprs = args[:i]\n        assert all(isinstance(e, Expr) for expr in exprs for e in expr)\n        free_symbols = list(set().union(*[e.free_symbols for expr in exprs\n                                        for e in expr]))\n\n        if len(free_symbols) > nb_of_free_symbols:\n            raise ValueError(\"The number of free_symbols in the expression \"\n                             \"is greater than %d\" % nb_of_free_symbols)\n        if len(args) == i + nb_of_free_symbols and isinstance(args[i], Tuple):\n            ranges = Tuple(*[range_expr for range_expr in args[\n                           i:i + nb_of_free_symbols]])\n            plots = [expr + ranges for expr in exprs]\n            return plots\n        else:\n            #Use default ranges.\n            default_range = Tuple(-10, 10)\n            ranges = []\n            for symbol in free_symbols:\n                ranges.append(Tuple(symbol) + default_range)\n\n            for i in range(nb_of_free_symbols - len(free_symbols)):\n                ranges.append(Tuple(Dummy()) + default_range)\n            ranges = Tuple(*ranges)\n            plots = [expr + ranges for expr in exprs]\n            return plots\n\n    elif isinstance(args[0], Tuple) and len(args[0]) == expr_len + nb_of_free_symbols:\n        #Multiple plots with different ranges.\n        for arg in args:\n            for i in range(expr_len):\n                if not isinstance(arg[i], Expr):\n                    raise ValueError(\"Expected an expression, given %s\" %\n                                     str(arg[i]))\n            for i in range(nb_of_free_symbols):\n                if not len(arg[i + expr_len]) == 3:\n                    raise ValueError(\"The ranges should be a tuple of \"\n                                     \"length 3, got %s\" % str(arg[i + expr_len]))\n        return args\n"}, "action_id": "de961d55-a959-4bb2-986f-95b972fe70ff"}