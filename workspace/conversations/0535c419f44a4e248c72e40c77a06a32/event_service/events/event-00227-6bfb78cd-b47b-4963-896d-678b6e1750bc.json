{"kind": "ObservationEvent", "id": "6bfb78cd-b47b-4963-896d-678b6e1750bc", "timestamp": "2025-09-25T19:11:26.404524", "source": "environment", "tool_name": "execute_bash", "tool_call_id": "toolu_01HZjiSzLEwLdmzBC2B2kHG9", "observation": {"kind": "ExecuteBashObservation", "output": "commit 9c2fe99946af40478e366dc852545ddb90559822\nAuthor: Matus Valo <matusvalo@users.noreply.github.com>\nDate:   Fri May 13 08:06:04 2022 +0200\n\n    Respect ignore configuration options when --recursive=y. (#6528)\n\n    * Ignore specified files/directories in recursive mode\n\n    Co-authored-by: Pierre Sassoulas <pierre.sassoulas@gmail.com>\n    Co-authored-by: Dani\u00ebl van Noord <13665637+DanielNoord@users.noreply.github.com>\n\ndiff --git a/ChangeLog b/ChangeLog\nindex ccce125a1..a49bb9e30 100644\n--- a/ChangeLog\n+++ b/ChangeLog\n@@ -21,6 +21,10 @@ What's New in Pylint 2.13.9?\n Release date: TBA\n\n\n+* Respect ignore configuration options with ``--recursive=y``.\n+\n+  Closes #6471\n+\n * Fix false positives for ``no-name-in-module`` and ``import-error`` for ``numpy.distutils`` and ``pydantic``.\n\n   Closes #6497\ndiff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 184316e9b..07b92895a 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -43,6 +43,20 @@ def _is_in_ignore_list_re(element: str, ignore_list_re: List[Pattern]) -> bool:\n     return any(file_pattern.match(element) for file_pattern in ignore_list_re)\n\n\n+def _is_ignored_file(\n+    element: str,\n+    ignore_list: list[str],\n+    ignore_list_re: list[Pattern[str]],\n+    ignore_list_paths_re: list[Pattern[str]],\n+) -> bool:\n+    basename = os.path.basename(element)\n+    return (\n+        basename in ignore_list\n+        or _is_in_ignore_list_re(basename, ignore_list_re)\n+        or _is_in_ignore_list_re(element, ignore_list_paths_re)\n+    )\n+\n+\n def expand_modules(\n     files_or_modules: List[str],\n     ignore_list: List[str],\n@@ -58,10 +72,8 @@ def expand_modules(\n\n     for something in files_or_modules:\n         basename = os.path.basename(something)\n-        if (\n-            basename in ignore_list\n-            or _is_in_ignore_list_re(os.path.basename(something), ignore_list_re)\n-            or _is_in_ignore_list_re(something, ignore_list_paths_re)\n+        if _is_ignored_file(\n+            something, ignore_list, ignore_list_re, ignore_list_paths_re\n         ):\n             continue\n         module_path = get_python_path(something)\ndiff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 0bf8961c1..878c1190e 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -40,7 +40,7 @@ from pylint.constants import (\n     MSG_TYPES_LONG,\n     MSG_TYPES_STATUS,\n )\n-from pylint.lint.expand_modules import expand_modules\n+from pylint.lint.expand_modules import _is_ignored_file, expand_modules\n from pylint.lint.parallel import check_parallel\n from pylint.lint.report_functions import (\n     report_messages_by_module_stats,\n@@ -1013,9 +1013,8 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n\n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n-        \"\"\"Discover python modules and packages in subdirectory.\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n+        \"\"\"Discover python modules and packages in sub-directory.\n\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n@@ -1028,6 +1027,16 @@ class PyLinter(\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+\n+                    if _is_ignored_file(\n+                        root,\n+                        self.config.ignore,\n+                        self.config.ignore_patterns,\n+                        self.config.ignore_paths,\n+                    ):\n+                        skip_subtrees.append(root)\n+                        continue\n+\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\ndiff --git a/tests/lint/unittest_lint.py b/tests/lint/unittest_lint.py\nindex 91df7dc1f..f124e4251 100644\n--- a/tests/lint/unittest_lint.py\n+++ b/tests/lint/unittest_lint.py\n@@ -13,6 +13,7 @@ from importlib import reload\n from io import StringIO\n from os import chdir, getcwd\n from os.path import abspath, basename, dirname, isdir, join, sep\n+from pathlib import Path\n from shutil import rmtree\n from typing import Iterable, Iterator, List, Optional, Tuple\n\n@@ -29,7 +30,13 @@ from pylint.constants import (\n     OLD_DEFAULT_PYLINT_HOME,\n )\n from pylint.exceptions import InvalidMessageError\n-from pylint.lint import ArgumentPreprocessingError, PyLinter, Run, preprocess_options\n+from pylint.lint import (\n+    ArgumentPreprocessingError,\n+    PyLinter,\n+    Run,\n+    fix_import_path,\n+    preprocess_options,\n+)\n from pylint.message import Message\n from pylint.reporters import text\n from pylint.typing import MessageLocationTuple\n@@ -868,3 +875,67 @@ def test_by_module_statement_value(initialized_linter: PyLinter) -> None:\n         # Check that the by_module \"statement\" is equal to the global \"statement\"\n         # computed for that module\n         assert module_stats[\"statement\"] == linter2.stats.statement\n+\n+\n+@pytest.mark.parametrize(\n+    \"ignore_parameter,ignore_parameter_value\",\n+    [\n+        (\"--ignore\", \"failing.py\"),\n+        (\"--ignore\", \"ignored_subdirectory\"),\n+        (\"--ignore-patterns\", \"failing.*\"),\n+        (\"--ignore-patterns\", \"ignored_*\"),\n+        (\"--ignore-paths\", \".*directory/ignored.*\"),\n+        (\"--ignore-paths\", \".*ignored.*/failing.*\"),\n+    ],\n+)\n+def test_recursive_ignore(ignore_parameter, ignore_parameter_value) -> None:\n+    run = Run(\n+        [\n+            \"--recursive\",\n+            \"y\",\n+            ignore_parameter,\n+            ignore_parameter_value,\n+            join(REGRTEST_DATA_DIR, \"directory\"),\n+        ],\n+        exit=False,\n+    )\n+\n+    linted_files = run.linter._iterate_file_descrs(\n+        tuple(run.linter._discover_files([join(REGRTEST_DATA_DIR, \"directory\")]))\n+    )\n+    linted_file_paths = [file_item.filepath for file_item in linted_files]\n+\n+    ignored_file = os.path.abspath(\n+        join(REGRTEST_DATA_DIR, \"directory\", \"ignored_subdirectory\", \"failing.py\")\n+    )\n+    assert ignored_file not in linted_file_paths\n+\n+    for regrtest_data_module in (\n+        (\"directory\", \"subdirectory\", \"subsubdirectory\", \"module.py\"),\n+        (\"directory\", \"subdirectory\", \"module.py\"),\n+        (\"directory\", \"package\", \"module.py\"),\n+        (\"directory\", \"package\", \"subpackage\", \"module.py\"),\n+    ):\n+        module = os.path.abspath(join(REGRTEST_DATA_DIR, *regrtest_data_module))\n+    assert module in linted_file_paths\n+\n+\n+def test_import_sibling_module_from_namespace(initialized_linter: PyLinter) -> None:\n+    \"\"\"If the parent directory above `namespace` is on sys.path, ensure that\n+    modules under `namespace` can import each other without raising `import-error`.\"\"\"\n+    linter = initialized_linter\n+    with tempdir() as tmpdir:\n+        create_files([\"namespace/submodule1.py\", \"namespace/submodule2.py\"])\n+        second_path = Path(\"namespace/submodule2.py\")\n+        with open(second_path, \"w\", encoding=\"utf-8\") as f:\n+            f.write(\n+                \"\"\"\\\"\\\"\\\"This module imports submodule1.\\\"\\\"\\\"\n+import submodule1\n+print(submodule1)\n+\"\"\"\n+            )\n+        os.chdir(\"namespace\")\n+        # Add the parent directory to sys.path\n+        with fix_import_path([tmpdir]):\n+            linter.check([\"submodule2.py\"])\n+    assert not linter.stats.by_msg\ndiff --git a/tests/regrtest_data/directory/ignored_subdirectory/failing.py b/tests/regrtest_data/directory/ignored_subdirectory/failing.py\nnew file mode 100644\nindex 000000000..b199df542\n--- /dev/null\n+++ b/tests/regrtest_data/directory/ignored_subdirectory/failing.py\n@@ -0,0 +1 @@\n+import re\ndiff --git a/tests/test_self.py b/tests/test_self.py\nindex 36084b717..27b1e7bed 100644\n--- a/tests/test_self.py\n+++ b/tests/test_self.py\n@@ -1276,17 +1276,91 @@ class TestRunTC:\n         assert not ex.value.code % 2\n\n     def test_regression_recursive(self):\n+        \"\"\"Tests if error is raised when linter is executed over directory not using --recursive=y\"\"\"\n         self._test_output(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=n\"],\n             expected_output=\"No such file or directory\",\n         )\n\n     def test_recursive(self):\n+        \"\"\"Tests if running linter over directory using --recursive=y\"\"\"\n         self._runtest(\n             [join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"), \"--recursive=y\"],\n             code=0,\n         )\n\n+    def test_ignore_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=ignored_subdirectory\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore=failing.py\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_pattern_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-parameter parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-pattern=ignored_.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-pattern=failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n+    def test_ignore_path_recursive(self):\n+        \"\"\"Tests recursive run of linter ignoring directory using --ignore-path parameter.\n+\n+        Ignored directory contains files yielding lint errors. If directory is not ignored\n+        test would fail due these errors.\n+        \"\"\"\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-path=.*ignored.*\",\n+            ],\n+            code=0,\n+        )\n+\n+        self._runtest(\n+            [\n+                join(HERE, \"regrtest_data\", \"directory\"),\n+                \"--recursive=y\",\n+                \"--ignore-path=.*failing.*\",\n+            ],\n+            code=0,\n+        )\n+\n     def test_recursive_current_dir(self):\n         with _test_sys_path():\n             # pytest is including directory HERE/regrtest_data to sys.path which causes\n@@ -1297,7 +1371,7 @@ class TestRunTC:\n                 if not os.path.basename(path) == \"regrtest_data\"\n             ]\n             with _test_cwd():\n-                os.chdir(join(HERE, \"regrtest_data\", \"directory\"))\n+                os.chdir(join(HERE, \"regrtest_data\", \"directory\", \"subdirectory\"))\n                 self._runtest(\n                     [\".\", \"--recursive=y\"],\n                     code=0,", "command": "cd /tmp/tmpr59rsqbu/pylint && git show 9c2fe9994", "error": false, "timeout": false, "metadata": {"exit_code": 0, "pid": -1, "username": "juan-all-hands", "hostname": "juan-dev", "working_dir": "/tmp/tmpr59rsqbu/pylint", "py_interpreter_path": "/home/juan-all-hands/v1/benchmarks/.venv/bin/python", "prefix": "", "suffix": "\n[The command completed with exit code 0.]"}}, "action_id": "d0671735-deb7-4b55-8c1d-014a314e35ca"}