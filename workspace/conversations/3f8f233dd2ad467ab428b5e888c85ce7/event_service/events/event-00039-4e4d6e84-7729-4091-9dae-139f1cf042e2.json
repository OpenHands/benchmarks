{"kind": "ObservationEvent", "id": "4e4d6e84-7729-4091-9dae-139f1cf042e2", "timestamp": "2025-09-25T11:21:21.082546", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01QARuLG5oDAf5NgDDPmq5R8", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/altaz.py:\n     1\t# Licensed under a 3-clause BSD style license - see LICENSE.rst\n     2\t\n     3\timport numpy as np\n     4\t\n     5\tfrom astropy import units as u\n     6\tfrom astropy.utils.decorators import format_doc\n     7\tfrom astropy.coordinates import representation as r\n     8\tfrom astropy.coordinates.baseframe import BaseCoordinateFrame, RepresentationMapping, base_doc\n     9\tfrom astropy.coordinates.attributes import (TimeAttribute,\n    10\t                                            QuantityAttribute,\n    11\t                                            EarthLocationAttribute)\n    12\t\n    13\t__all__ = ['AltAz']\n    14\t\n    15\t\n    16\t_90DEG = 90*u.deg\n    17\t\n    18\tdoc_components = \"\"\"\n    19\t    az : `~astropy.coordinates.Angle`, optional, keyword-only\n    20\t        The Azimuth for this object (``alt`` must also be given and\n    21\t        ``representation`` must be None).\n    22\t    alt : `~astropy.coordinates.Angle`, optional, keyword-only\n    23\t        The Altitude for this object (``az`` must also be given and\n    24\t        ``representation`` must be None).\n    25\t    distance : `~astropy.units.Quantity` ['length'], optional, keyword-only\n    26\t        The Distance for this object along the line-of-sight.\n    27\t\n    28\t    pm_az_cosalt : `~astropy.units.Quantity` ['angular speed'], optional, keyword-only\n    29\t        The proper motion in azimuth (including the ``cos(alt)`` factor) for\n    30\t        this object (``pm_alt`` must also be given).\n    31\t    pm_alt : `~astropy.units.Quantity` ['angular speed'], optional, keyword-only\n    32\t        The proper motion in altitude for this object (``pm_az_cosalt`` must\n    33\t        also be given).\n    34\t    radial_velocity : `~astropy.units.Quantity` ['speed'], optional, keyword-only\n    35\t        The radial velocity of this object.\"\"\"\n    36\t\n    37\tdoc_footer = \"\"\"\n    38\t    Other parameters\n    39\t    ----------------\n    40\t    obstime : `~astropy.time.Time`\n    41\t        The time at which the observation is taken.  Used for determining the\n    42\t        position and orientation of the Earth.\n    43\t    location : `~astropy.coordinates.EarthLocation`\n    44\t        The location on the Earth.  This can be specified either as an\n    45\t        `~astropy.coordinates.EarthLocation` object or as anything that can be\n    46\t        transformed to an `~astropy.coordinates.ITRS` frame.\n    47\t    pressure : `~astropy.units.Quantity` ['pressure']\n    48\t        The atmospheric pressure as an `~astropy.units.Quantity` with pressure\n    49\t        units.  This is necessary for performing refraction corrections.\n    50\t        Setting this to 0 (the default) will disable refraction calculations\n    51\t        when transforming to/from this frame.\n    52\t    temperature : `~astropy.units.Quantity` ['temperature']\n    53\t        The ground-level temperature as an `~astropy.units.Quantity` in\n    54\t        deg C.  This is necessary for performing refraction corrections.\n    55\t    relative_humidity : `~astropy.units.Quantity` ['dimensionless'] or number\n    56\t        The relative humidity as a dimensionless quantity between 0 to 1.\n    57\t        This is necessary for performing refraction corrections.\n    58\t    obswl : `~astropy.units.Quantity` ['length']\n    59\t        The average wavelength of observations as an `~astropy.units.Quantity`\n    60\t         with length units.  This is necessary for performing refraction\n    61\t         corrections.\n    62\t\n    63\t    Notes\n    64\t    -----\n    65\t    The refraction model is based on that implemented in ERFA, which is fast\n    66\t    but becomes inaccurate for altitudes below about 5 degrees.  Near and below\n    67\t    altitudes of 0, it can even give meaningless answers, and in this case\n    68\t    transforming to AltAz and back to another frame can give highly discrepant\n    69\t    results.  For much better numerical stability, leave the ``pressure`` at\n    70\t    ``0`` (the default), thereby disabling the refraction correction and\n    71\t    yielding \"topocentric\" horizontal coordinates.\n    72\t    \"\"\"\n    73\t\n    74\t\n    75\t@format_doc(base_doc, components=doc_components, footer=doc_footer)\n    76\tclass AltAz(BaseCoordinateFrame):\n    77\t    \"\"\"\n    78\t    A coordinate or frame in the Altitude-Azimuth system (Horizontal\n    79\t    coordinates) with respect to the WGS84 ellipsoid.  Azimuth is oriented\n    80\t    East of North (i.e., N=0, E=90 degrees).  Altitude is also known as\n    81\t    elevation angle, so this frame is also in the Azimuth-Elevation system.\n    82\t\n    83\t    This frame is assumed to *include* refraction effects if the ``pressure``\n    84\t    frame attribute is non-zero.\n    85\t\n    86\t    The frame attributes are listed under **Other Parameters**, which are\n    87\t    necessary for transforming from AltAz to some other system.\n    88\t    \"\"\"\n    89\t\n    90\t    frame_specific_representation_info = {\n    91\t        r.SphericalRepresentation: [\n    92\t            RepresentationMapping('lon', 'az'),\n    93\t            RepresentationMapping('lat', 'alt')\n    94\t        ]\n    95\t    }\n    96\t\n    97\t    default_representation = r.SphericalRepresentation\n    98\t    default_differential = r.SphericalCosLatDifferential\n    99\t\n   100\t    obstime = TimeAttribute(default=None)\n   101\t    location = EarthLocationAttribute(default=None)\n   102\t    pressure = QuantityAttribute(default=0, unit=u.hPa)\n   103\t    temperature = QuantityAttribute(default=0, unit=u.deg_C)\n   104\t    relative_humidity = QuantityAttribute(default=0, unit=u.dimensionless_unscaled)\n   105\t    obswl = QuantityAttribute(default=1*u.micron, unit=u.micron)\n   106\t\n   107\t    def __init__(self, *args, **kwargs):\n   108\t        super().__init__(*args, **kwargs)\n   109\t\n   110\t    @property\n   111\t    def secz(self):\n   112\t        \"\"\"\n   113\t        Secant of the zenith angle for this coordinate, a common estimate of\n   114\t        the airmass.\n   115\t        \"\"\"\n   116\t        return 1/np.sin(self.alt)\n   117\t\n   118\t    @property\n   119\t    def zen(self):\n   120\t        \"\"\"\n   121\t        The zenith angle (or zenith distance / co-altitude) for this coordinate.\n   122\t        \"\"\"\n   123\t        return _90DEG.to(self.alt.unit) - self.alt\n   124\t\n   125\t\n   126\t# self-transform defined in icrs_observed_transforms.py\n   127\t\n", "path": "/tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/altaz.py", "prev_exist": true}, "action_id": "db09dbcc-bc67-4d48-8d2e-2c7793157fd4"}