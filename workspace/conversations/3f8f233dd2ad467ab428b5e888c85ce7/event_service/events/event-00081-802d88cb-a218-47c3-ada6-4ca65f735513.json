{"kind": "ObservationEvent", "id": "802d88cb-a218-47c3-ada6-4ca65f735513", "timestamp": "2025-09-25T11:24:08.993142", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_012P7w6E7iZqM3uEDdEguWeH", "observation": {"kind": "StrReplaceEditorObservation", "command": "str_replace", "output": "The file /tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py has been edited. Here's the result of running `cat -n` on a snippet of /tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py:\n   276\t    return teme_frame.realize_frame(newrepr)\n   277\t\n   278\t\n   279\t# Direct ITRS to observed transformations that stay within ITRS\n   280\t\n   281\tdef itrs_to_observed_mat(observed_frame):\n   282\t    \"\"\"\n   283\t    Generate transformation matrix from ITRS to observed frame (AltAz or HADec).\n   284\t    \n   285\t    This function creates the rotation matrix needed to transform from ITRS\n   286\t    coordinates to topocentric observed coordinates (AltAz or HADec) without\n   287\t    going through complex aberration corrections or SSB referencing.\n   288\t    \n   289\t    Parameters\n   290\t    ----------\n   291\t    observed_frame : AltAz or HADec\n   292\t        The target observed frame containing location information\n   293\t        \n   294\t    Returns\n   295\t    -------\n   296\t    mat : array\n   297\t        3x3 rotation matrix for the transformation\n   298\t    \"\"\"\n   299\t    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n   300\t    elong = lon.to_value(u.radian)\n   301\t\n   302\t    if isinstance(observed_frame, AltAz):\n   303\t        # form ITRS to AltAz matrix\n   304\t        elat = lat.to_value(u.radian)\n   305\t        # AltAz frame is left handed\n   306\t        minus_x = np.eye(3)\n   307\t        minus_x[0][0] = -1.0\n   308\t        mat = (minus_x\n   309\t               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\n   310\t               @ rotation_matrix(elong, 'z', unit=u.radian))\n   311\t\n   312\t    else:\n   313\t        # form ITRS to HADec matrix\n   314\t        # HADec frame is left handed\n   315\t        minus_y = np.eye(3)\n   316\t        minus_y[1][1] = -1.0\n   317\t        mat = (minus_y\n   318\t               @ rotation_matrix(elong, 'z', unit=u.radian))\n   319\t    return mat\n   320\t\n   321\t\n   322\t@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n   323\t@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)\n   324\tdef itrs_to_observed(itrs_coo, observed_frame):\n   325\t    \"\"\"\n   326\t    Transform from ITRS to observed coordinates (AltAz or HADec).\n   327\t    \n   328\t    This transformation stays entirely within the ITRS frame and treats\n   329\t    ITRS coordinates as time invariant. It avoids the problematic ITRS->ITRS\n   330\t    transform that references coordinates to the SSB instead of Earth.\n   331\t    \n   332\t    Parameters\n   333\t    ----------\n   334\t    itrs_coo : ITRS\n   335\t        Input ITRS coordinate\n   336\t    observed_frame : AltAz or HADec\n   337\t        Target observed frame\n   338\t        \n   339\t    Returns\n   340\t    -------\n   341\t    observed coordinate in the target frame\n   342\t    \"\"\"\n   343\t    # Trying to synchronize the obstimes here makes no sense. In fact,\n   344\t    # it's a real gotcha as doing an ITRS->ITRS transform references \n   345\t    # ITRS coordinates, which should be tied to the Earth, to the SSB.\n   346\t    # Instead, we treat ITRS coordinates as time invariant here.\n   347\t\n   348\t    # form the Topocentric ITRS position\n   349\t    topocentric_itrs_repr = (itrs_coo.cartesian\n   350\t                             - observed_frame.location.get_itrs().cartesian)\n   351\t    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))\n   352\t    return observed_frame.realize_frame(rep)\n   353\t\n   354\t\n   355\t@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n   356\t@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\n   357\tdef observed_to_itrs(observed_coo, itrs_frame):\n   358\t    \"\"\"\n   359\t    Transform from observed coordinates (AltAz or HADec) to ITRS.\n   360\t    \n   361\t    This transformation stays entirely within the ITRS frame and treats\n   362\t    ITRS coordinates as time invariant.\n   363\t    \n   364\t    Parameters\n   365\t    ----------\n   366\t    observed_coo : AltAz or HADec\n   367\t        Input observed coordinate\n   368\t    itrs_frame : ITRS\n   369\t        Target ITRS frame\n   370\t        \n   371\t    Returns\n   372\t    -------\n   373\t    ITRS coordinate in the target frame\n   374\t    \"\"\"\n   375\t    # form the Topocentric ITRS position\n   376\t    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(\n   377\t                            itrs_to_observed_mat(observed_coo)))\n   378\t    # form the Geocentric ITRS position\n   379\t    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\n   380\t    return itrs_frame.realize_frame(rep)\n   381\t\n   382\t\n   383\t# Create loopback transformations\n   384\tframe_transform_graph._add_merged_transform(ITRS, CIRS, ITRS)\n   385\tframe_transform_graph._add_merged_transform(PrecessedGeocentric, GCRS, PrecessedGeocentric)\n   386\tframe_transform_graph._add_merged_transform(TEME, ITRS, TEME)\n   387\tframe_transform_graph._add_merged_transform(TETE, ICRS, TETE)\n   388\t\nReview the changes and make sure they are as expected. Edit the file again if necessary.", "path": "/tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py", "prev_exist": true, "old_content": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"\nContains the transformation functions for getting to/from ITRS, TEME, GCRS, and CIRS.\nThese are distinct from the ICRS and AltAz functions because they are just\nrotations without aberration corrections or offsets.\n\"\"\"\n\nimport numpy as np\nimport erfa\n\nfrom astropy import units as u\n\nfrom astropy.coordinates.baseframe import frame_transform_graph\nfrom astropy.coordinates.transformations import FunctionTransformWithFiniteDifference\nfrom astropy.coordinates.matrix_utilities import matrix_transpose, rotation_matrix\n\nfrom .icrs import ICRS\nfrom .gcrs import GCRS, PrecessedGeocentric\nfrom .cirs import CIRS\nfrom .itrs import ITRS\nfrom .equatorial import TEME, TETE\nfrom .altaz import AltAz\nfrom .hadec import HADec\nfrom .utils import get_polar_motion, get_jd12, EARTH_CENTER, PIOVER2\n\n# # first define helper functions\n\n\ndef teme_to_itrs_mat(time):\n    # Sidereal time, rotates from ITRS to mean equinox\n    # Use 1982 model for consistency with Vallado et al (2006)\n    # http://www.celestrak.com/publications/aiaa/2006-6753/AIAA-2006-6753.pdf\n    gst = erfa.gmst82(*get_jd12(time, 'ut1'))\n\n    # Polar Motion\n    # Do not include TIO locator s' because it is not used in Vallado 2006\n    xp, yp = get_polar_motion(time)\n    pmmat = erfa.pom00(xp, yp, 0)\n\n    # rotation matrix\n    # c2tcio expects a GCRS->CIRS matrix as it's first argument.\n    # Here, we just set that to an I-matrix, because we're already\n    # in TEME and the difference between TEME and CIRS is just the\n    # rotation by the sidereal time rather than the Earth Rotation Angle\n    return erfa.c2tcio(np.eye(3), gst, pmmat)\n\n\ndef gcrs_to_cirs_mat(time):\n    # celestial-to-intermediate matrix\n    return erfa.c2i06a(*get_jd12(time, 'tt'))\n\n\ndef cirs_to_itrs_mat(time):\n    # compute the polar motion p-matrix\n    xp, yp = get_polar_motion(time)\n    sp = erfa.sp00(*get_jd12(time, 'tt'))\n    pmmat = erfa.pom00(xp, yp, sp)\n\n    # now determine the Earth Rotation Angle for the input obstime\n    # era00 accepts UT1, so we convert if need be\n    era = erfa.era00(*get_jd12(time, 'ut1'))\n\n    # c2tcio expects a GCRS->CIRS matrix, but we just set that to an I-matrix\n    # because we're already in CIRS\n    return erfa.c2tcio(np.eye(3), era, pmmat)\n\n\ndef tete_to_itrs_mat(time, rbpn=None):\n    \"\"\"Compute the polar motion p-matrix at the given time.\n\n    If the nutation-precession matrix is already known, it should be passed in,\n    as this is by far the most expensive calculation.\n    \"\"\"\n    xp, yp = get_polar_motion(time)\n    sp = erfa.sp00(*get_jd12(time, 'tt'))\n    pmmat = erfa.pom00(xp, yp, sp)\n\n    # now determine the greenwich apparent siderial time for the input obstime\n    # we use the 2006A model for consistency with RBPN matrix use in GCRS <-> TETE\n    ujd1, ujd2 = get_jd12(time, 'ut1')\n    jd1, jd2 = get_jd12(time, 'tt')\n    if rbpn is None:\n        # erfa.gst06a calls pnm06a to calculate rbpn and then gst06. Use it in\n        # favour of getting rbpn with erfa.pnm06a to avoid a possibly large array.\n        gast = erfa.gst06a(ujd1, ujd2, jd1, jd2)\n    else:\n        gast = erfa.gst06(ujd1, ujd2, jd1, jd2, rbpn)\n\n    # c2tcio expects a GCRS->CIRS matrix, but we just set that to an I-matrix\n    # because we're already in CIRS equivalent frame\n    return erfa.c2tcio(np.eye(3), gast, pmmat)\n\n\ndef gcrs_precession_mat(equinox):\n    gamb, phib, psib, epsa = erfa.pfw06(*get_jd12(equinox, 'tt'))\n    return erfa.fw2m(gamb, phib, psib, epsa)\n\n\ndef get_location_gcrs(location, obstime, ref_to_itrs, gcrs_to_ref):\n    \"\"\"Create a GCRS frame at the location and obstime.\n\n    The reference frame z axis must point to the Celestial Intermediate Pole\n    (as is the case for CIRS and TETE).\n\n    This function is here to avoid location.get_gcrs(obstime), which would\n    recalculate matrices that are already available below (and return a GCRS\n    coordinate, rather than a frame with obsgeoloc and obsgeovel).  Instead,\n    it uses the private method that allows passing in the matrices.\n\n    \"\"\"\n    obsgeoloc, obsgeovel = location._get_gcrs_posvel(obstime,\n                                                     ref_to_itrs, gcrs_to_ref)\n    return GCRS(obstime=obstime, obsgeoloc=obsgeoloc, obsgeovel=obsgeovel)\n\n\n# now the actual transforms\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, TETE)\ndef gcrs_to_tete(gcrs_coo, tete_frame):\n    # Classical NPB matrix, IAU 2006/2000A\n    # (same as in builtin_frames.utils.get_cip).\n    rbpn = erfa.pnm06a(*get_jd12(tete_frame.obstime, 'tt'))\n    # Get GCRS coordinates for the target observer location and time.\n    loc_gcrs = get_location_gcrs(tete_frame.location, tete_frame.obstime,\n                                 tete_to_itrs_mat(tete_frame.obstime, rbpn=rbpn),\n                                 rbpn)\n    gcrs_coo2 = gcrs_coo.transform_to(loc_gcrs)\n    # Now we are relative to the correct observer, do the transform to TETE.\n    # These rotations are defined at the geocenter, but can be applied to\n    # topocentric positions as well, assuming rigid Earth. See p57 of\n    # https://www.usno.navy.mil/USNO/astronomical-applications/publications/Circular_179.pdf\n    crepr = gcrs_coo2.cartesian.transform(rbpn)\n    return tete_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TETE, GCRS)\ndef tete_to_gcrs(tete_coo, gcrs_frame):\n    # Compute the pn matrix, and then multiply by its transpose.\n    rbpn = erfa.pnm06a(*get_jd12(tete_coo.obstime, 'tt'))\n    newrepr = tete_coo.cartesian.transform(matrix_transpose(rbpn))\n    # We now have a GCRS vector for the input location and obstime.\n    # Turn it into a GCRS frame instance.\n    loc_gcrs = get_location_gcrs(tete_coo.location, tete_coo.obstime,\n                                 tete_to_itrs_mat(tete_coo.obstime, rbpn=rbpn),\n                                 rbpn)\n    gcrs = loc_gcrs.realize_frame(newrepr)\n    # Finally, do any needed offsets (no-op if same obstime and location)\n    return gcrs.transform_to(gcrs_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TETE, ITRS)\ndef tete_to_itrs(tete_coo, itrs_frame):\n    # first get us to TETE at the target obstime, and geocentric position\n    tete_coo2 = tete_coo.transform_to(TETE(obstime=itrs_frame.obstime,\n                                           location=EARTH_CENTER))\n\n    # now get the pmatrix\n    pmat = tete_to_itrs_mat(itrs_frame.obstime)\n    crepr = tete_coo2.cartesian.transform(pmat)\n    return itrs_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, TETE)\ndef itrs_to_tete(itrs_coo, tete_frame):\n    # compute the pmatrix, and then multiply by its transpose\n    pmat = tete_to_itrs_mat(itrs_coo.obstime)\n    newrepr = itrs_coo.cartesian.transform(matrix_transpose(pmat))\n    tete = TETE(newrepr, obstime=itrs_coo.obstime)\n\n    # now do any needed offsets (no-op if same obstime)\n    return tete.transform_to(tete_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, CIRS)\ndef gcrs_to_cirs(gcrs_coo, cirs_frame):\n    # first get the pmatrix\n    pmat = gcrs_to_cirs_mat(cirs_frame.obstime)\n    # Get GCRS coordinates for the target observer location and time.\n    loc_gcrs = get_location_gcrs(cirs_frame.location, cirs_frame.obstime,\n                                 cirs_to_itrs_mat(cirs_frame.obstime), pmat)\n    gcrs_coo2 = gcrs_coo.transform_to(loc_gcrs)\n    # Now we are relative to the correct observer, do the transform to CIRS.\n    crepr = gcrs_coo2.cartesian.transform(pmat)\n    return cirs_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, GCRS)\ndef cirs_to_gcrs(cirs_coo, gcrs_frame):\n    # Compute the pmatrix, and then multiply by its transpose,\n    pmat = gcrs_to_cirs_mat(cirs_coo.obstime)\n    newrepr = cirs_coo.cartesian.transform(matrix_transpose(pmat))\n    # We now have a GCRS vector for the input location and obstime.\n    # Turn it into a GCRS frame instance.\n    loc_gcrs = get_location_gcrs(cirs_coo.location, cirs_coo.obstime,\n                                 cirs_to_itrs_mat(cirs_coo.obstime), pmat)\n    gcrs = loc_gcrs.realize_frame(newrepr)\n    # Finally, do any needed offsets (no-op if same obstime and location)\n    return gcrs.transform_to(gcrs_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, ITRS)\ndef cirs_to_itrs(cirs_coo, itrs_frame):\n    # first get us to geocentric CIRS at the target obstime\n    cirs_coo2 = cirs_coo.transform_to(CIRS(obstime=itrs_frame.obstime,\n                                           location=EARTH_CENTER))\n\n    # now get the pmatrix\n    pmat = cirs_to_itrs_mat(itrs_frame.obstime)\n    crepr = cirs_coo2.cartesian.transform(pmat)\n    return itrs_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, CIRS)\ndef itrs_to_cirs(itrs_coo, cirs_frame):\n    # compute the pmatrix, and then multiply by its transpose\n    pmat = cirs_to_itrs_mat(itrs_coo.obstime)\n    newrepr = itrs_coo.cartesian.transform(matrix_transpose(pmat))\n    cirs = CIRS(newrepr, obstime=itrs_coo.obstime)\n\n    # now do any needed offsets (no-op if same obstime)\n    return cirs.transform_to(cirs_frame)\n\n\n# TODO: implement GCRS<->CIRS if there's call for it.  The thing that's awkward\n# is that they both have obstimes, so an extra set of transformations are necessary.\n# so unless there's a specific need for that, better to just have it go through the above\n# two steps anyway\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, PrecessedGeocentric)\ndef gcrs_to_precessedgeo(from_coo, to_frame):\n    # first get us to GCRS with the right attributes (might be a no-op)\n    gcrs_coo = from_coo.transform_to(GCRS(obstime=to_frame.obstime,\n                                          obsgeoloc=to_frame.obsgeoloc,\n                                          obsgeovel=to_frame.obsgeovel))\n\n    # now precess to the requested equinox\n    pmat = gcrs_precession_mat(to_frame.equinox)\n    crepr = gcrs_coo.cartesian.transform(pmat)\n    return to_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, PrecessedGeocentric, GCRS)\ndef precessedgeo_to_gcrs(from_coo, to_frame):\n    # first un-precess\n    pmat = gcrs_precession_mat(from_coo.equinox)\n    crepr = from_coo.cartesian.transform(matrix_transpose(pmat))\n    gcrs_coo = GCRS(crepr,\n                    obstime=from_coo.obstime,\n                    obsgeoloc=from_coo.obsgeoloc,\n                    obsgeovel=from_coo.obsgeovel)\n\n    # then move to the GCRS that's actually desired\n    return gcrs_coo.transform_to(to_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TEME, ITRS)\ndef teme_to_itrs(teme_coo, itrs_frame):\n    # use the pmatrix to transform to ITRS in the source obstime\n    pmat = teme_to_itrs_mat(teme_coo.obstime)\n    crepr = teme_coo.cartesian.transform(pmat)\n    itrs = ITRS(crepr, obstime=teme_coo.obstime)\n\n    # transform the ITRS coordinate to the target obstime\n    return itrs.transform_to(itrs_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, TEME)\ndef itrs_to_teme(itrs_coo, teme_frame):\n    # transform the ITRS coordinate to the target obstime\n    itrs_coo2 = itrs_coo.transform_to(ITRS(obstime=teme_frame.obstime))\n\n    # compute the pmatrix, and then multiply by its transpose\n    pmat = teme_to_itrs_mat(teme_frame.obstime)\n    newrepr = itrs_coo2.cartesian.transform(matrix_transpose(pmat))\n    return teme_frame.realize_frame(newrepr)\n\n\n# Create loopback transformations\nframe_transform_graph._add_merged_transform(ITRS, CIRS, ITRS)\nframe_transform_graph._add_merged_transform(PrecessedGeocentric, GCRS, PrecessedGeocentric)\nframe_transform_graph._add_merged_transform(TEME, ITRS, TEME)\nframe_transform_graph._add_merged_transform(TETE, ICRS, TETE)\n", "new_content": "# Licensed under a 3-clause BSD style license - see LICENSE.rst\n\"\"\"\nContains the transformation functions for getting to/from ITRS, TEME, GCRS, and CIRS.\nThese are distinct from the ICRS and AltAz functions because they are just\nrotations without aberration corrections or offsets.\n\"\"\"\n\nimport numpy as np\nimport erfa\n\nfrom astropy import units as u\n\nfrom astropy.coordinates.baseframe import frame_transform_graph\nfrom astropy.coordinates.transformations import FunctionTransformWithFiniteDifference\nfrom astropy.coordinates.matrix_utilities import matrix_transpose, rotation_matrix\n\nfrom .icrs import ICRS\nfrom .gcrs import GCRS, PrecessedGeocentric\nfrom .cirs import CIRS\nfrom .itrs import ITRS\nfrom .equatorial import TEME, TETE\nfrom .altaz import AltAz\nfrom .hadec import HADec\nfrom .utils import get_polar_motion, get_jd12, EARTH_CENTER, PIOVER2\n\n# # first define helper functions\n\n\ndef teme_to_itrs_mat(time):\n    # Sidereal time, rotates from ITRS to mean equinox\n    # Use 1982 model for consistency with Vallado et al (2006)\n    # http://www.celestrak.com/publications/aiaa/2006-6753/AIAA-2006-6753.pdf\n    gst = erfa.gmst82(*get_jd12(time, 'ut1'))\n\n    # Polar Motion\n    # Do not include TIO locator s' because it is not used in Vallado 2006\n    xp, yp = get_polar_motion(time)\n    pmmat = erfa.pom00(xp, yp, 0)\n\n    # rotation matrix\n    # c2tcio expects a GCRS->CIRS matrix as it's first argument.\n    # Here, we just set that to an I-matrix, because we're already\n    # in TEME and the difference between TEME and CIRS is just the\n    # rotation by the sidereal time rather than the Earth Rotation Angle\n    return erfa.c2tcio(np.eye(3), gst, pmmat)\n\n\ndef gcrs_to_cirs_mat(time):\n    # celestial-to-intermediate matrix\n    return erfa.c2i06a(*get_jd12(time, 'tt'))\n\n\ndef cirs_to_itrs_mat(time):\n    # compute the polar motion p-matrix\n    xp, yp = get_polar_motion(time)\n    sp = erfa.sp00(*get_jd12(time, 'tt'))\n    pmmat = erfa.pom00(xp, yp, sp)\n\n    # now determine the Earth Rotation Angle for the input obstime\n    # era00 accepts UT1, so we convert if need be\n    era = erfa.era00(*get_jd12(time, 'ut1'))\n\n    # c2tcio expects a GCRS->CIRS matrix, but we just set that to an I-matrix\n    # because we're already in CIRS\n    return erfa.c2tcio(np.eye(3), era, pmmat)\n\n\ndef tete_to_itrs_mat(time, rbpn=None):\n    \"\"\"Compute the polar motion p-matrix at the given time.\n\n    If the nutation-precession matrix is already known, it should be passed in,\n    as this is by far the most expensive calculation.\n    \"\"\"\n    xp, yp = get_polar_motion(time)\n    sp = erfa.sp00(*get_jd12(time, 'tt'))\n    pmmat = erfa.pom00(xp, yp, sp)\n\n    # now determine the greenwich apparent siderial time for the input obstime\n    # we use the 2006A model for consistency with RBPN matrix use in GCRS <-> TETE\n    ujd1, ujd2 = get_jd12(time, 'ut1')\n    jd1, jd2 = get_jd12(time, 'tt')\n    if rbpn is None:\n        # erfa.gst06a calls pnm06a to calculate rbpn and then gst06. Use it in\n        # favour of getting rbpn with erfa.pnm06a to avoid a possibly large array.\n        gast = erfa.gst06a(ujd1, ujd2, jd1, jd2)\n    else:\n        gast = erfa.gst06(ujd1, ujd2, jd1, jd2, rbpn)\n\n    # c2tcio expects a GCRS->CIRS matrix, but we just set that to an I-matrix\n    # because we're already in CIRS equivalent frame\n    return erfa.c2tcio(np.eye(3), gast, pmmat)\n\n\ndef gcrs_precession_mat(equinox):\n    gamb, phib, psib, epsa = erfa.pfw06(*get_jd12(equinox, 'tt'))\n    return erfa.fw2m(gamb, phib, psib, epsa)\n\n\ndef get_location_gcrs(location, obstime, ref_to_itrs, gcrs_to_ref):\n    \"\"\"Create a GCRS frame at the location and obstime.\n\n    The reference frame z axis must point to the Celestial Intermediate Pole\n    (as is the case for CIRS and TETE).\n\n    This function is here to avoid location.get_gcrs(obstime), which would\n    recalculate matrices that are already available below (and return a GCRS\n    coordinate, rather than a frame with obsgeoloc and obsgeovel).  Instead,\n    it uses the private method that allows passing in the matrices.\n\n    \"\"\"\n    obsgeoloc, obsgeovel = location._get_gcrs_posvel(obstime,\n                                                     ref_to_itrs, gcrs_to_ref)\n    return GCRS(obstime=obstime, obsgeoloc=obsgeoloc, obsgeovel=obsgeovel)\n\n\n# now the actual transforms\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, TETE)\ndef gcrs_to_tete(gcrs_coo, tete_frame):\n    # Classical NPB matrix, IAU 2006/2000A\n    # (same as in builtin_frames.utils.get_cip).\n    rbpn = erfa.pnm06a(*get_jd12(tete_frame.obstime, 'tt'))\n    # Get GCRS coordinates for the target observer location and time.\n    loc_gcrs = get_location_gcrs(tete_frame.location, tete_frame.obstime,\n                                 tete_to_itrs_mat(tete_frame.obstime, rbpn=rbpn),\n                                 rbpn)\n    gcrs_coo2 = gcrs_coo.transform_to(loc_gcrs)\n    # Now we are relative to the correct observer, do the transform to TETE.\n    # These rotations are defined at the geocenter, but can be applied to\n    # topocentric positions as well, assuming rigid Earth. See p57 of\n    # https://www.usno.navy.mil/USNO/astronomical-applications/publications/Circular_179.pdf\n    crepr = gcrs_coo2.cartesian.transform(rbpn)\n    return tete_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TETE, GCRS)\ndef tete_to_gcrs(tete_coo, gcrs_frame):\n    # Compute the pn matrix, and then multiply by its transpose.\n    rbpn = erfa.pnm06a(*get_jd12(tete_coo.obstime, 'tt'))\n    newrepr = tete_coo.cartesian.transform(matrix_transpose(rbpn))\n    # We now have a GCRS vector for the input location and obstime.\n    # Turn it into a GCRS frame instance.\n    loc_gcrs = get_location_gcrs(tete_coo.location, tete_coo.obstime,\n                                 tete_to_itrs_mat(tete_coo.obstime, rbpn=rbpn),\n                                 rbpn)\n    gcrs = loc_gcrs.realize_frame(newrepr)\n    # Finally, do any needed offsets (no-op if same obstime and location)\n    return gcrs.transform_to(gcrs_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TETE, ITRS)\ndef tete_to_itrs(tete_coo, itrs_frame):\n    # first get us to TETE at the target obstime, and geocentric position\n    tete_coo2 = tete_coo.transform_to(TETE(obstime=itrs_frame.obstime,\n                                           location=EARTH_CENTER))\n\n    # now get the pmatrix\n    pmat = tete_to_itrs_mat(itrs_frame.obstime)\n    crepr = tete_coo2.cartesian.transform(pmat)\n    return itrs_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, TETE)\ndef itrs_to_tete(itrs_coo, tete_frame):\n    # compute the pmatrix, and then multiply by its transpose\n    pmat = tete_to_itrs_mat(itrs_coo.obstime)\n    newrepr = itrs_coo.cartesian.transform(matrix_transpose(pmat))\n    tete = TETE(newrepr, obstime=itrs_coo.obstime)\n\n    # now do any needed offsets (no-op if same obstime)\n    return tete.transform_to(tete_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, CIRS)\ndef gcrs_to_cirs(gcrs_coo, cirs_frame):\n    # first get the pmatrix\n    pmat = gcrs_to_cirs_mat(cirs_frame.obstime)\n    # Get GCRS coordinates for the target observer location and time.\n    loc_gcrs = get_location_gcrs(cirs_frame.location, cirs_frame.obstime,\n                                 cirs_to_itrs_mat(cirs_frame.obstime), pmat)\n    gcrs_coo2 = gcrs_coo.transform_to(loc_gcrs)\n    # Now we are relative to the correct observer, do the transform to CIRS.\n    crepr = gcrs_coo2.cartesian.transform(pmat)\n    return cirs_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, GCRS)\ndef cirs_to_gcrs(cirs_coo, gcrs_frame):\n    # Compute the pmatrix, and then multiply by its transpose,\n    pmat = gcrs_to_cirs_mat(cirs_coo.obstime)\n    newrepr = cirs_coo.cartesian.transform(matrix_transpose(pmat))\n    # We now have a GCRS vector for the input location and obstime.\n    # Turn it into a GCRS frame instance.\n    loc_gcrs = get_location_gcrs(cirs_coo.location, cirs_coo.obstime,\n                                 cirs_to_itrs_mat(cirs_coo.obstime), pmat)\n    gcrs = loc_gcrs.realize_frame(newrepr)\n    # Finally, do any needed offsets (no-op if same obstime and location)\n    return gcrs.transform_to(gcrs_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, CIRS, ITRS)\ndef cirs_to_itrs(cirs_coo, itrs_frame):\n    # first get us to geocentric CIRS at the target obstime\n    cirs_coo2 = cirs_coo.transform_to(CIRS(obstime=itrs_frame.obstime,\n                                           location=EARTH_CENTER))\n\n    # now get the pmatrix\n    pmat = cirs_to_itrs_mat(itrs_frame.obstime)\n    crepr = cirs_coo2.cartesian.transform(pmat)\n    return itrs_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, CIRS)\ndef itrs_to_cirs(itrs_coo, cirs_frame):\n    # compute the pmatrix, and then multiply by its transpose\n    pmat = cirs_to_itrs_mat(itrs_coo.obstime)\n    newrepr = itrs_coo.cartesian.transform(matrix_transpose(pmat))\n    cirs = CIRS(newrepr, obstime=itrs_coo.obstime)\n\n    # now do any needed offsets (no-op if same obstime)\n    return cirs.transform_to(cirs_frame)\n\n\n# TODO: implement GCRS<->CIRS if there's call for it.  The thing that's awkward\n# is that they both have obstimes, so an extra set of transformations are necessary.\n# so unless there's a specific need for that, better to just have it go through the above\n# two steps anyway\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, GCRS, PrecessedGeocentric)\ndef gcrs_to_precessedgeo(from_coo, to_frame):\n    # first get us to GCRS with the right attributes (might be a no-op)\n    gcrs_coo = from_coo.transform_to(GCRS(obstime=to_frame.obstime,\n                                          obsgeoloc=to_frame.obsgeoloc,\n                                          obsgeovel=to_frame.obsgeovel))\n\n    # now precess to the requested equinox\n    pmat = gcrs_precession_mat(to_frame.equinox)\n    crepr = gcrs_coo.cartesian.transform(pmat)\n    return to_frame.realize_frame(crepr)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, PrecessedGeocentric, GCRS)\ndef precessedgeo_to_gcrs(from_coo, to_frame):\n    # first un-precess\n    pmat = gcrs_precession_mat(from_coo.equinox)\n    crepr = from_coo.cartesian.transform(matrix_transpose(pmat))\n    gcrs_coo = GCRS(crepr,\n                    obstime=from_coo.obstime,\n                    obsgeoloc=from_coo.obsgeoloc,\n                    obsgeovel=from_coo.obsgeovel)\n\n    # then move to the GCRS that's actually desired\n    return gcrs_coo.transform_to(to_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, TEME, ITRS)\ndef teme_to_itrs(teme_coo, itrs_frame):\n    # use the pmatrix to transform to ITRS in the source obstime\n    pmat = teme_to_itrs_mat(teme_coo.obstime)\n    crepr = teme_coo.cartesian.transform(pmat)\n    itrs = ITRS(crepr, obstime=teme_coo.obstime)\n\n    # transform the ITRS coordinate to the target obstime\n    return itrs.transform_to(itrs_frame)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, TEME)\ndef itrs_to_teme(itrs_coo, teme_frame):\n    # transform the ITRS coordinate to the target obstime\n    itrs_coo2 = itrs_coo.transform_to(ITRS(obstime=teme_frame.obstime))\n\n    # compute the pmatrix, and then multiply by its transpose\n    pmat = teme_to_itrs_mat(teme_frame.obstime)\n    newrepr = itrs_coo2.cartesian.transform(matrix_transpose(pmat))\n    return teme_frame.realize_frame(newrepr)\n\n\n# Direct ITRS to observed transformations that stay within ITRS\n\ndef itrs_to_observed_mat(observed_frame):\n    \"\"\"\n    Generate transformation matrix from ITRS to observed frame (AltAz or HADec).\n    \n    This function creates the rotation matrix needed to transform from ITRS\n    coordinates to topocentric observed coordinates (AltAz or HADec) without\n    going through complex aberration corrections or SSB referencing.\n    \n    Parameters\n    ----------\n    observed_frame : AltAz or HADec\n        The target observed frame containing location information\n        \n    Returns\n    -------\n    mat : array\n        3x3 rotation matrix for the transformation\n    \"\"\"\n    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n    elong = lon.to_value(u.radian)\n\n    if isinstance(observed_frame, AltAz):\n        # form ITRS to AltAz matrix\n        elat = lat.to_value(u.radian)\n        # AltAz frame is left handed\n        minus_x = np.eye(3)\n        minus_x[0][0] = -1.0\n        mat = (minus_x\n               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\n               @ rotation_matrix(elong, 'z', unit=u.radian))\n\n    else:\n        # form ITRS to HADec matrix\n        # HADec frame is left handed\n        minus_y = np.eye(3)\n        minus_y[1][1] = -1.0\n        mat = (minus_y\n               @ rotation_matrix(elong, 'z', unit=u.radian))\n    return mat\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)\ndef itrs_to_observed(itrs_coo, observed_frame):\n    \"\"\"\n    Transform from ITRS to observed coordinates (AltAz or HADec).\n    \n    This transformation stays entirely within the ITRS frame and treats\n    ITRS coordinates as time invariant. It avoids the problematic ITRS->ITRS\n    transform that references coordinates to the SSB instead of Earth.\n    \n    Parameters\n    ----------\n    itrs_coo : ITRS\n        Input ITRS coordinate\n    observed_frame : AltAz or HADec\n        Target observed frame\n        \n    Returns\n    -------\n    observed coordinate in the target frame\n    \"\"\"\n    # Trying to synchronize the obstimes here makes no sense. In fact,\n    # it's a real gotcha as doing an ITRS->ITRS transform references \n    # ITRS coordinates, which should be tied to the Earth, to the SSB.\n    # Instead, we treat ITRS coordinates as time invariant here.\n\n    # form the Topocentric ITRS position\n    topocentric_itrs_repr = (itrs_coo.cartesian\n                             - observed_frame.location.get_itrs().cartesian)\n    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))\n    return observed_frame.realize_frame(rep)\n\n\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)\ndef observed_to_itrs(observed_coo, itrs_frame):\n    \"\"\"\n    Transform from observed coordinates (AltAz or HADec) to ITRS.\n    \n    This transformation stays entirely within the ITRS frame and treats\n    ITRS coordinates as time invariant.\n    \n    Parameters\n    ----------\n    observed_coo : AltAz or HADec\n        Input observed coordinate\n    itrs_frame : ITRS\n        Target ITRS frame\n        \n    Returns\n    -------\n    ITRS coordinate in the target frame\n    \"\"\"\n    # form the Topocentric ITRS position\n    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(\n                            itrs_to_observed_mat(observed_coo)))\n    # form the Geocentric ITRS position\n    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian\n    return itrs_frame.realize_frame(rep)\n\n\n# Create loopback transformations\nframe_transform_graph._add_merged_transform(ITRS, CIRS, ITRS)\nframe_transform_graph._add_merged_transform(PrecessedGeocentric, GCRS, PrecessedGeocentric)\nframe_transform_graph._add_merged_transform(TEME, ITRS, TEME)\nframe_transform_graph._add_merged_transform(TETE, ICRS, TETE)\n"}, "action_id": "1d1929ac-e495-4c04-b3b4-9fb85561d42c"}