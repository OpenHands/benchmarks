{"kind": "ObservationEvent", "id": "b97716e7-67fe-4195-9a89-097e873f304a", "timestamp": "2025-09-25T11:25:49.766038", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_015x7mWJrnPKnd2YNRtUfTgs", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py:\n   279\t# Direct ITRS to observed transformations that stay within ITRS\n   280\t\n   281\tdef itrs_to_observed_mat(observed_frame):\n   282\t    \"\"\"\n   283\t    Generate transformation matrix from ITRS to observed frame (AltAz or HADec).\n   284\t    \n   285\t    This function creates the rotation matrix needed to transform from ITRS\n   286\t    coordinates to topocentric observed coordinates (AltAz or HADec) without\n   287\t    going through complex aberration corrections or SSB referencing.\n   288\t    \n   289\t    Parameters\n   290\t    ----------\n   291\t    observed_frame : AltAz or HADec\n   292\t        The target observed frame containing location information\n   293\t        \n   294\t    Returns\n   295\t    -------\n   296\t    mat : array\n   297\t        3x3 rotation matrix for the transformation\n   298\t    \"\"\"\n   299\t    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n   300\t    elong = lon.to_value(u.radian)\n   301\t\n   302\t    if isinstance(observed_frame, AltAz):\n   303\t        # form ITRS to AltAz matrix\n   304\t        elat = lat.to_value(u.radian)\n   305\t        # AltAz frame is left handed\n   306\t        minus_x = np.eye(3)\n   307\t        minus_x[0][0] = -1.0\n   308\t        mat = (minus_x\n   309\t               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\n   310\t               @ rotation_matrix(elong, 'z', unit=u.radian))\n   311\t\n   312\t    else:\n   313\t        # form ITRS to HADec matrix\n   314\t        # HADec frame is left handed\n   315\t        minus_y = np.eye(3)\n   316\t        minus_y[1][1] = -1.0\n   317\t        mat = (minus_y\n   318\t               @ rotation_matrix(elong, 'z', unit=u.radian))\n   319\t    return mat\n   320\t\n", "path": "/tmp/tmp2_wxitqd/astropy/astropy/coordinates/builtin_frames/intermediate_rotation_transforms.py", "prev_exist": true}, "action_id": "8bf1e013-c10f-415c-9b23-d55c43196c10"}