{"kind": "ObservationEvent", "id": "ab619031-b528-4741-87ab-1b72e31df74d", "timestamp": "2025-09-25T11:22:10.544541", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_01URMG3dP1k3PVQQy8v1PZLN", "observation": {"kind": "StrReplaceEditorObservation", "command": "view", "output": "Here's the result of running `cat -n` on /tmp/tmp2_wxitqd/astropy/astropy/coordinates/matrix_utilities.py:\n     1\t# Licensed under a 3-clause BSD style license - see LICENSE.rst\n     2\t\n     3\t\"\"\"\n     4\tUtililies used for constructing and inspecting rotation matrices.\n     5\t\"\"\"\n     6\tfrom functools import reduce\n     7\timport numpy as np\n     8\t\n     9\tfrom astropy import units as u\n    10\tfrom .angles import Angle\n    11\t\n    12\t\n    13\tdef matrix_product(*matrices):\n    14\t    \"\"\"Matrix multiply all arguments together.\n    15\t\n    16\t    Arguments should have dimension 2 or larger. Larger dimensional objects\n    17\t    are interpreted as stacks of matrices residing in the last two dimensions.\n    18\t\n    19\t    This function mostly exists for readability: using `~numpy.matmul`\n    20\t    directly, one would have ``matmul(matmul(m1, m2), m3)``, etc. For even\n    21\t    better readability, one might consider using `~numpy.matrix` for the\n    22\t    arguments (so that one could write ``m1 * m2 * m3``), but then it is not\n    23\t    possible to handle stacks of matrices. Once only python >=3.5 is supported,\n    24\t    this function can be replaced by ``m1 @ m2 @ m3``.\n    25\t    \"\"\"\n    26\t    return reduce(np.matmul, matrices)\n    27\t\n    28\t\n    29\tdef matrix_transpose(matrix):\n    30\t    \"\"\"Transpose a matrix or stack of matrices by swapping the last two axes.\n    31\t\n    32\t    This function mostly exists for readability; seeing ``.swapaxes(-2, -1)``\n    33\t    it is not that obvious that one does a transpose.  Note that one cannot\n    34\t    use `~numpy.ndarray.T`, as this transposes all axes and thus does not\n    35\t    work for stacks of matrices.\n    36\t    \"\"\"\n    37\t    return matrix.swapaxes(-2, -1)\n    38\t\n    39\t\n    40\tdef rotation_matrix(angle, axis='z', unit=None):\n    41\t    \"\"\"\n    42\t    Generate matrices for rotation by some angle around some axis.\n    43\t\n    44\t    Parameters\n    45\t    ----------\n    46\t    angle : angle-like\n    47\t        The amount of rotation the matrices should represent.  Can be an array.\n    48\t    axis : str or array-like\n    49\t        Either ``'x'``, ``'y'``, ``'z'``, or a (x,y,z) specifying the axis to\n    50\t        rotate about. If ``'x'``, ``'y'``, or ``'z'``, the rotation sense is\n", "path": "/tmp/tmp2_wxitqd/astropy/astropy/coordinates/matrix_utilities.py", "prev_exist": true}, "action_id": "f89bb12d-67f2-4b17-b41f-d121fbfb85a1"}