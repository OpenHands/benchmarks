{"kind": "ObservationEvent", "id": "5c2bb43b-13d8-47eb-8189-dd439380772c", "timestamp": "2025-09-25T11:25:29.305337", "source": "environment", "tool_name": "str_replace_editor", "tool_call_id": "toolu_014MapA3Fu2ocXoArJhjqwon", "observation": {"kind": "StrReplaceEditorObservation", "command": "create", "output": "File created successfully at: /tmp/tmp2_wxitqd/astropy/test_itrs_direct_transforms.py", "path": "/tmp/tmp2_wxitqd/astropy/test_itrs_direct_transforms.py", "prev_exist": false, "new_content": "#!/usr/bin/env python3\n\"\"\"\nTest script for the new direct ITRS to AltAz/HADec transformations.\n\nThis script tests that the new transformations work correctly and address\nthe issue with ITRS coordinates being referenced to the SSB.\n\"\"\"\n\nimport sys\nimport os\nsys.path.insert(0, os.path.abspath('.'))\n\ntry:\n    import numpy as np\n    from astropy import units as u\n    from astropy.time import Time\n    from astropy.coordinates import EarthLocation, ITRS, AltAz, HADec\n    from astropy.coordinates.representation import CartesianRepresentation\n    ASTROPY_AVAILABLE = True\nexcept ImportError as e:\n    print(f\"Astropy not available: {e}\")\n    ASTROPY_AVAILABLE = False\n\ndef test_direct_itrs_transformations():\n    \"\"\"Test the new direct ITRS transformations.\"\"\"\n    if not ASTROPY_AVAILABLE:\n        print(\"Skipping tests - astropy not available\")\n        return False\n        \n    print(\"Testing direct ITRS transformations...\")\n    \n    # Create a location (London)\n    location = EarthLocation(lat=51.5*u.deg, lon=0*u.deg, height=0*u.m)\n    \n    # Create a satellite 400km directly above London in ITRS coordinates\n    observer_itrs = location.get_itrs()\n    satellite_itrs_coords = observer_itrs.cartesian + CartesianRepresentation(\n        x=0*u.km, y=0*u.km, z=400*u.km\n    )\n    \n    # Test at two different times\n    t1 = Time('2023-01-01T12:00:00')\n    t2 = Time('2023-01-01T13:00:00')\n    \n    # Create ITRS coordinates (same position, different times)\n    satellite_itrs_t1 = ITRS(satellite_itrs_coords, obstime=t1)\n    satellite_itrs_t2 = ITRS(satellite_itrs_coords, obstime=t2)\n    \n    print(f\"Satellite ITRS at T1: {satellite_itrs_t1}\")\n    print(f\"Satellite ITRS at T2: {satellite_itrs_t2}\")\n    \n    # Transform to AltAz using the new direct transformation\n    try:\n        altaz_t1 = satellite_itrs_t1.transform_to(AltAz(obstime=t1, location=location))\n        altaz_t2 = satellite_itrs_t2.transform_to(AltAz(obstime=t2, location=location))\n        \n        print(f\"AltAz at T1: Alt={altaz_t1.alt:.2f}, Az={altaz_t1.az:.2f}\")\n        print(f\"AltAz at T2: Alt={altaz_t2.alt:.2f}, Az={altaz_t2.az:.2f}\")\n        \n        # The satellite should appear at nearly the same position\n        # since it's tied to Earth and we're using direct transformation\n        separation = altaz_t1.separation(altaz_t2)\n        print(f\"Apparent movement of satellite: {separation.to(u.arcsec):.1f}\")\n        \n        # Test that the satellite appears roughly overhead (within a few degrees)\n        # It won't be exactly 90\u00b0 due to Earth's rotation and the 1-hour difference\n        if altaz_t1.alt > 80*u.deg:\n            print(\"\u2713 Satellite appears near zenith as expected\")\n        else:\n            print(f\"\u26a0 Satellite altitude {altaz_t1.alt:.1f} is lower than expected\")\n        \n        # Test HADec transformation\n        hadec_t1 = satellite_itrs_t1.transform_to(HADec(obstime=t1, location=location))\n        hadec_t2 = satellite_itrs_t2.transform_to(HADec(obstime=t2, location=location))\n        \n        print(f\"HADec at T1: HA={hadec_t1.ha:.2f}, Dec={hadec_t1.dec:.2f}\")\n        print(f\"HADec at T2: HA={hadec_t2.ha:.2f}, Dec={hadec_t2.dec:.2f}\")\n        \n        # Test round-trip transformation\n        itrs_roundtrip = altaz_t1.transform_to(ITRS(obstime=t1))\n        roundtrip_diff = np.sqrt(np.sum((satellite_itrs_t1.cartesian.xyz - \n                                       itrs_roundtrip.cartesian.xyz)**2))\n        print(f\"Round-trip difference: {roundtrip_diff.to(u.mm):.1f}\")\n        \n        if roundtrip_diff < 1*u.m:\n            print(\"\u2713 Round-trip transformation is accurate\")\n        else:\n            print(f\"\u26a0 Round-trip transformation has large error: {roundtrip_diff}\")\n        \n        return True\n        \n    except Exception as e:\n        print(f\"Error in transformation: {e}\")\n        import traceback\n        traceback.print_exc()\n        return False\n\ndef test_overhead_object():\n    \"\"\"Test that an object directly overhead gives Alt=90\u00b0.\"\"\"\n    if not ASTROPY_AVAILABLE:\n        return False\n        \n    print(\"\\nTesting overhead object...\")\n    \n    # Create observer location\n    location = EarthLocation(lat=52*u.deg, lon=-1*u.deg, height=0*u.m)\n    t = Time('2023-01-01T12:00:00')\n    \n    # Create an object 1km directly above the observer\n    observer_itrs = location.get_itrs(t)\n    overhead_itrs_coords = observer_itrs.cartesian + CartesianRepresentation(\n        x=0*u.km, y=0*u.km, z=1*u.km\n    )\n    overhead_itrs = ITRS(overhead_itrs_coords, obstime=t)\n    \n    try:\n        # Transform to AltAz\n        altaz = overhead_itrs.transform_to(AltAz(obstime=t, location=location))\n        print(f\"Overhead object: Alt={altaz.alt:.4f}, Az={altaz.az:.1f}\")\n        \n        # Should be very close to 90 degrees\n        if abs(altaz.alt - 90*u.deg) < 0.1*u.deg:\n            print(\"\u2713 Overhead object correctly shows Alt \u2248 90\u00b0\")\n            return True\n        else:\n            print(f\"\u26a0 Overhead object altitude {altaz.alt:.4f} is not close to 90\u00b0\")\n            return False\n            \n    except Exception as e:\n        print(f\"Error testing overhead object: {e}\")\n        return False\n\ndef test_time_invariance():\n    \"\"\"Test that ITRS coordinates are treated as time-invariant.\"\"\"\n    if not ASTROPY_AVAILABLE:\n        return False\n        \n    print(\"\\nTesting time invariance...\")\n    \n    location = EarthLocation(lat=51.5*u.deg, lon=0*u.deg, height=0*u.m)\n    \n    # Same ITRS coordinates at different times\n    itrs_coords = location.get_itrs().cartesian + CartesianRepresentation(\n        x=100*u.km, y=0*u.km, z=100*u.km\n    )\n    \n    t1 = Time('2023-01-01T00:00:00')\n    t2 = Time('2023-01-01T12:00:00')  # 12 hours later\n    \n    itrs_t1 = ITRS(itrs_coords, obstime=t1)\n    itrs_t2 = ITRS(itrs_coords, obstime=t2)\n    \n    try:\n        # Transform to AltAz at the respective times\n        altaz_t1 = itrs_t1.transform_to(AltAz(obstime=t1, location=location))\n        altaz_t2 = itrs_t2.transform_to(AltAz(obstime=t2, location=location))\n        \n        # Due to Earth's rotation, the object should appear to move\n        # but not by millions of kilometers as in the old system\n        separation = altaz_t1.separation(altaz_t2)\n        print(f\"Object movement over 12 hours: {separation.to(u.deg):.2f}\")\n        \n        # The movement should be reasonable (due to Earth's rotation)\n        # but not excessive (due to SSB referencing)\n        if 1*u.deg < separation < 180*u.deg:\n            print(\"\u2713 Object movement is reasonable (Earth rotation effect)\")\n            return True\n        elif separation < 1*u.deg:\n            print(\"\u26a0 Object movement is very small - might indicate an issue\")\n            return False\n        else:\n            print(f\"\u2717 Object movement {separation:.1f} is excessive - SSB referencing issue\")\n            return False\n            \n    except Exception as e:\n        print(f\"Error testing time invariance: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    print(\"Testing Direct ITRS to Observed Transformations\")\n    print(\"=\" * 60)\n    \n    if not ASTROPY_AVAILABLE:\n        print(\"Cannot run tests - astropy build issues prevent import\")\n        print(\"This is expected in the current environment.\")\n        print(\"Tests should be run after proper astropy installation.\")\n        sys.exit(0)\n    \n    tests_passed = 0\n    total_tests = 3\n    \n    if test_direct_itrs_transformations():\n        tests_passed += 1\n    \n    if test_overhead_object():\n        tests_passed += 1\n        \n    if test_time_invariance():\n        tests_passed += 1\n    \n    print(f\"\\nTest Results: {tests_passed}/{total_tests} tests passed\")\n    \n    if tests_passed == total_tests:\n        print(\"\u2713 All tests passed!\")\n        sys.exit(0)\n    else:\n        print(\"\u2717 Some tests failed\")\n        sys.exit(1)"}, "action_id": "4b3ecb02-ceb6-4231-918a-f10d8d93e567"}