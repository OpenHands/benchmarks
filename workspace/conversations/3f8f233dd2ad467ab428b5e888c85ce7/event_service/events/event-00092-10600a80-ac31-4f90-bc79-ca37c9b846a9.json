{"kind": "ObservationEvent", "id": "10600a80-ac31-4f90-bc79-ca37c9b846a9", "timestamp": "2025-09-25T11:24:52.611240", "source": "environment", "tool_name": "execute_bash", "tool_call_id": "toolu_01XtLiCh6PmnDThNYU7bPA8W", "observation": {"kind": "ExecuteBashObservation", "output": "795-    # create a CIRS object that appears straight overhead for a TOPOCENTRIC OBSERVER\n796-    topocentric_cirs_frame = CIRS(obstime=t, location=home)\n797-    cirs_topo = topocentric_cirs_frame.realize_frame(cirs_repr)\n798-\n799-    # Check AltAz (though Azimuth can be anything so is not tested).\n800:    aa = cirs_topo.transform_to(AltAz(obstime=t, location=home))\n801-    assert_allclose(aa.alt, 90*u.deg, atol=1*u.uas, rtol=0)\n802-\n803-    # Check HADec.\n804:    hd = cirs_topo.transform_to(HADec(obstime=t, location=home))\n805-    assert_allclose(hd.ha, 0*u.hourangle, atol=1*u.uas, rtol=0)\n806-    assert_allclose(hd.dec, 52*u.deg, atol=1*u.uas, rtol=0)\n807-\n808-\n809-def jplephem_ge(minversion):\n810-    \"\"\"Check if jplephem is installed and has version >= minversion.\"\"\"\n811-    # This is a separate routine since somehow with pyinstaller the stanza\n812-    # not HAS_JPLEPHEM or metadata.version('jplephem') < '2.15'\n813-    # leads to a module not found error.\n814-    try:\n--\n845-    # Note: at this level of precision for the comparison, we have to include\n846-    # the location in the time, as it influences the transformation to TDB.\n847-    t = Time('2017-04-06T00:00:00.0', location=loc)\n848-    with solar_system_ephemeris.set('de430'):\n849-        moon = get_body('moon', t, loc)\n850:        moon_aa = moon.transform_to(AltAz(obstime=t, location=loc))\n851:        moon_hd = moon.transform_to(HADec(obstime=t, location=loc))\n852-\n853-    # Numbers from\n854-    # https://github.com/astropy/astropy/pull/11073#issuecomment-735486271\n855-    # updated in https://github.com/astropy/astropy/issues/11683\n856-    TARGET_AZ, TARGET_EL = 15.032673509956*u.deg, 50.303110133923*u.deg\n857-    TARGET_DISTANCE = 376252883.247239*u.m\n858-    assert_allclose(moon_aa.az, TARGET_AZ, atol=0.1*u.uas, rtol=0)\n859-    assert_allclose(moon_aa.alt, TARGET_EL, atol=0.1*u.uas, rtol=0)\n860-    assert_allclose(moon_aa.distance, TARGET_DISTANCE, atol=0.1*u.mm, rtol=0)\n861-    ha, dec = erfa.ae2hd(moon_aa.az.to_value(u.radian), moon_aa.alt.to_value(u.radian),\n--\n881-    elev = 5186*u.m\n882-    loc = EarthLocation.from_geodetic(lon, lat, elev)\n883-    t = Time('2017-04-06T00:00:00.0')\n884-\n885-    moon = get_body('moon', t, loc)\n886:    moon_aa = moon.transform_to(AltAz(obstime=t, location=loc))\n887-    assert_allclose(moon_aa.az - TARGET_AZ, 0*u.mas, atol=0.5*u.mas)\n888-    assert_allclose(moon_aa.alt - TARGET_EL, 0*u.mas, atol=0.5*u.mas)\n889-\n890-\n891-class TestGetLocationGCRS:\n892-    # TETE and CIRS use get_location_gcrs to get obsgeoloc and obsgeovel\n893-    # with knowledge of some of the matrices. Check that this is consistent\n894-    # with a direct transformation.\n895-    def setup_class(cls):\n896-        cls.loc = loc = EarthLocation.from_geodetic(", "command": "cd /tmp/tmp2_wxitqd/astropy && grep -n -A10 -B5 \"transform_to.*AltAz\\|transform_to.*HADec\" astropy/coordinates/tests/test_intermediate_transformations.py", "error": false, "timeout": false, "metadata": {"exit_code": 0, "pid": -1, "username": "juan-all-hands", "hostname": "juan-dev", "working_dir": "/tmp/tmp2_wxitqd/astropy", "py_interpreter_path": "/home/juan-all-hands/v1/benchmarks/.venv/bin/python", "prefix": "", "suffix": "\n[The command completed with exit code 0.]"}}, "action_id": "512551ef-0f93-41e2-91d5-430b078453c5"}